pub use api::*;

#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
pub mod api {
    #[allow(unused_imports)]
    mod root_mod {
        pub use super::*;
    }
    pub static PALLETS: [&str; 61usize] = [
        "System",
        "Babe",
        "Timestamp",
        "Indices",
        "Balances",
        "TransactionPayment",
        "Authorship",
        "Offences",
        "Historical",
        "Mmr",
        "Session",
        "Grandpa",
        "ImOnline",
        "AuthorityDiscovery",
        "Democracy",
        "Council",
        "TechnicalCommittee",
        "PhragmenElection",
        "TechnicalMembership",
        "Treasury",
        "Claims",
        "Utility",
        "Identity",
        "Society",
        "Recovery",
        "Vesting",
        "Scheduler",
        "Proxy",
        "Multisig",
        "Preimage",
        "Bounties",
        "ChildBounties",
        "Tips",
        "Nis",
        "NisCounterpartBalances",
        "ParachainsOrigin",
        "Configuration",
        "ParasShared",
        "ParaInclusion",
        "ParaInherent",
        "ParaScheduler",
        "Paras",
        "Initializer",
        "Dmp",
        "Ump",
        "Hrmp",
        "ParaSessionInfo",
        "ParasDisputes",
        "ParasSlashing",
        "Registrar",
        "Slots",
        "Auctions",
        "Crowdloan",
        "XcmPallet",
        "Beefy",
        "MmrLeaf",
        "ParasSudoWrapper",
        "AssignedSlots",
        "ValidatorManager",
        "StateTrieMigration",
        "Sudo",
    ];
    /// The error type returned when there is a runtime issue.
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    #[derive(
        ::subxt::ext::codec::Decode,
        ::subxt::ext::codec::Encode,
        ::subxt::ext::scale_decode::DecodeAsType,
        ::subxt::ext::scale_encode::EncodeAsType,
        Debug,
    )]
    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
    pub enum Event {
        #[codec(index = 0)]
        System(system::Event),
        #[codec(index = 3)]
        Indices(indices::Event),
        #[codec(index = 4)]
        Balances(balances::Event),
        #[codec(index = 33)]
        TransactionPayment(transaction_payment::Event),
        #[codec(index = 7)]
        Offences(offences::Event),
        #[codec(index = 8)]
        Session(session::Event),
        #[codec(index = 10)]
        Grandpa(grandpa::Event),
        #[codec(index = 11)]
        ImOnline(im_online::Event),
        #[codec(index = 13)]
        Democracy(democracy::Event),
        #[codec(index = 14)]
        Council(council::Event),
        #[codec(index = 15)]
        TechnicalCommittee(technical_committee::Event),
        #[codec(index = 16)]
        PhragmenElection(phragmen_election::Event),
        #[codec(index = 17)]
        TechnicalMembership(technical_membership::Event),
        #[codec(index = 18)]
        Treasury(treasury::Event),
        #[codec(index = 19)]
        Claims(claims::Event),
        #[codec(index = 24)]
        Utility(utility::Event),
        #[codec(index = 25)]
        Identity(identity::Event),
        #[codec(index = 26)]
        Society(society::Event),
        #[codec(index = 27)]
        Recovery(recovery::Event),
        #[codec(index = 28)]
        Vesting(vesting::Event),
        #[codec(index = 29)]
        Scheduler(scheduler::Event),
        #[codec(index = 30)]
        Proxy(proxy::Event),
        #[codec(index = 31)]
        Multisig(multisig::Event),
        #[codec(index = 32)]
        Preimage(preimage::Event),
        #[codec(index = 35)]
        Bounties(bounties::Event),
        #[codec(index = 40)]
        ChildBounties(child_bounties::Event),
        #[codec(index = 36)]
        Tips(tips::Event),
        #[codec(index = 38)]
        Nis(nis::Event),
        #[codec(index = 45)]
        NisCounterpartBalances(nis_counterpart_balances::Event),
        #[codec(index = 53)]
        ParaInclusion(para_inclusion::Event),
        #[codec(index = 56)]
        Paras(paras::Event),
        #[codec(index = 59)]
        Ump(ump::Event),
        #[codec(index = 60)]
        Hrmp(hrmp::Event),
        #[codec(index = 62)]
        ParasDisputes(paras_disputes::Event),
        #[codec(index = 70)]
        Registrar(registrar::Event),
        #[codec(index = 71)]
        Slots(slots::Event),
        #[codec(index = 72)]
        Auctions(auctions::Event),
        #[codec(index = 73)]
        Crowdloan(crowdloan::Event),
        #[codec(index = 99)]
        XcmPallet(xcm_pallet::Event),
        #[codec(index = 251)]
        AssignedSlots(assigned_slots::Event),
        #[codec(index = 252)]
        ValidatorManager(validator_manager::Event),
        #[codec(index = 254)]
        StateTrieMigration(state_trie_migration::Event),
        #[codec(index = 255)]
        Sudo(sudo::Event),
    }
    impl ::subxt::events::RootEvent for Event {
        fn root_event(
            pallet_bytes: &[u8],
            pallet_name: &str,
            pallet_ty: u32,
            metadata: &::subxt::Metadata,
        ) -> Result<Self, ::subxt::Error> {
            use ::subxt::metadata::DecodeWithMetadata;
            if pallet_name == "System" {
                return Ok(Event::System(system::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Indices" {
                return Ok(Event::Indices(indices::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Balances" {
                return Ok(Event::Balances(balances::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "TransactionPayment" {
                return Ok(Event::TransactionPayment(
                    transaction_payment::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ))
            }
            if pallet_name == "Offences" {
                return Ok(Event::Offences(offences::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Session" {
                return Ok(Event::Session(session::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Grandpa" {
                return Ok(Event::Grandpa(grandpa::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "ImOnline" {
                return Ok(Event::ImOnline(im_online::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Democracy" {
                return Ok(Event::Democracy(democracy::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Council" {
                return Ok(Event::Council(council::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "TechnicalCommittee" {
                return Ok(Event::TechnicalCommittee(
                    technical_committee::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ))
            }
            if pallet_name == "PhragmenElection" {
                return Ok(Event::PhragmenElection(phragmen_election::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "TechnicalMembership" {
                return Ok(Event::TechnicalMembership(
                    technical_membership::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ))
            }
            if pallet_name == "Treasury" {
                return Ok(Event::Treasury(treasury::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Claims" {
                return Ok(Event::Claims(claims::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Utility" {
                return Ok(Event::Utility(utility::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Identity" {
                return Ok(Event::Identity(identity::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Society" {
                return Ok(Event::Society(society::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Recovery" {
                return Ok(Event::Recovery(recovery::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Vesting" {
                return Ok(Event::Vesting(vesting::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Scheduler" {
                return Ok(Event::Scheduler(scheduler::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Proxy" {
                return Ok(Event::Proxy(proxy::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Multisig" {
                return Ok(Event::Multisig(multisig::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Preimage" {
                return Ok(Event::Preimage(preimage::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Bounties" {
                return Ok(Event::Bounties(bounties::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "ChildBounties" {
                return Ok(Event::ChildBounties(child_bounties::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Tips" {
                return Ok(Event::Tips(tips::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Nis" {
                return Ok(Event::Nis(nis::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "NisCounterpartBalances" {
                return Ok(Event::NisCounterpartBalances(
                    nis_counterpart_balances::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ))
            }
            if pallet_name == "ParaInclusion" {
                return Ok(Event::ParaInclusion(para_inclusion::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Paras" {
                return Ok(Event::Paras(paras::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Ump" {
                return Ok(Event::Ump(ump::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Hrmp" {
                return Ok(Event::Hrmp(hrmp::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "ParasDisputes" {
                return Ok(Event::ParasDisputes(paras_disputes::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Registrar" {
                return Ok(Event::Registrar(registrar::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Slots" {
                return Ok(Event::Slots(slots::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Auctions" {
                return Ok(Event::Auctions(auctions::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "Crowdloan" {
                return Ok(Event::Crowdloan(crowdloan::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "XcmPallet" {
                return Ok(Event::XcmPallet(xcm_pallet::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "AssignedSlots" {
                return Ok(Event::AssignedSlots(assigned_slots::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "ValidatorManager" {
                return Ok(Event::ValidatorManager(validator_manager::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            if pallet_name == "StateTrieMigration" {
                return Ok(Event::StateTrieMigration(
                    state_trie_migration::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ))
            }
            if pallet_name == "Sudo" {
                return Ok(Event::Sudo(sudo::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?))
            }
            Err(::subxt::ext::scale_decode::Error::custom(format!(
                "Pallet name '{}' not found in root Event enum",
                pallet_name
            ))
            .into())
        }
    }
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn babe(&self) -> babe::constants::ConstantsApi {
            babe::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn indices(&self) -> indices::constants::ConstantsApi {
            indices::constants::ConstantsApi
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi {
            balances::constants::ConstantsApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn grandpa(&self) -> grandpa::constants::ConstantsApi {
            grandpa::constants::ConstantsApi
        }
        pub fn im_online(&self) -> im_online::constants::ConstantsApi {
            im_online::constants::ConstantsApi
        }
        pub fn democracy(&self) -> democracy::constants::ConstantsApi {
            democracy::constants::ConstantsApi
        }
        pub fn phragmen_election(&self) -> phragmen_election::constants::ConstantsApi {
            phragmen_election::constants::ConstantsApi
        }
        pub fn treasury(&self) -> treasury::constants::ConstantsApi {
            treasury::constants::ConstantsApi
        }
        pub fn claims(&self) -> claims::constants::ConstantsApi {
            claims::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn identity(&self) -> identity::constants::ConstantsApi {
            identity::constants::ConstantsApi
        }
        pub fn society(&self) -> society::constants::ConstantsApi {
            society::constants::ConstantsApi
        }
        pub fn recovery(&self) -> recovery::constants::ConstantsApi {
            recovery::constants::ConstantsApi
        }
        pub fn vesting(&self) -> vesting::constants::ConstantsApi {
            vesting::constants::ConstantsApi
        }
        pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
            scheduler::constants::ConstantsApi
        }
        pub fn proxy(&self) -> proxy::constants::ConstantsApi {
            proxy::constants::ConstantsApi
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi {
            multisig::constants::ConstantsApi
        }
        pub fn bounties(&self) -> bounties::constants::ConstantsApi {
            bounties::constants::ConstantsApi
        }
        pub fn child_bounties(&self) -> child_bounties::constants::ConstantsApi {
            child_bounties::constants::ConstantsApi
        }
        pub fn tips(&self) -> tips::constants::ConstantsApi {
            tips::constants::ConstantsApi
        }
        pub fn nis(&self) -> nis::constants::ConstantsApi {
            nis::constants::ConstantsApi
        }
        pub fn nis_counterpart_balances(
            &self,
        ) -> nis_counterpart_balances::constants::ConstantsApi {
            nis_counterpart_balances::constants::ConstantsApi
        }
        pub fn paras(&self) -> paras::constants::ConstantsApi {
            paras::constants::ConstantsApi
        }
        pub fn registrar(&self) -> registrar::constants::ConstantsApi {
            registrar::constants::ConstantsApi
        }
        pub fn slots(&self) -> slots::constants::ConstantsApi {
            slots::constants::ConstantsApi
        }
        pub fn auctions(&self) -> auctions::constants::ConstantsApi {
            auctions::constants::ConstantsApi
        }
        pub fn crowdloan(&self) -> crowdloan::constants::ConstantsApi {
            crowdloan::constants::ConstantsApi
        }
        pub fn beefy(&self) -> beefy::constants::ConstantsApi {
            beefy::constants::ConstantsApi
        }
        pub fn assigned_slots(&self) -> assigned_slots::constants::ConstantsApi {
            assigned_slots::constants::ConstantsApi
        }
        pub fn state_trie_migration(&self) -> state_trie_migration::constants::ConstantsApi {
            state_trie_migration::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn babe(&self) -> babe::storage::StorageApi {
            babe::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn indices(&self) -> indices::storage::StorageApi {
            indices::storage::StorageApi
        }
        pub fn balances(&self) -> balances::storage::StorageApi {
            balances::storage::StorageApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn authorship(&self) -> authorship::storage::StorageApi {
            authorship::storage::StorageApi
        }
        pub fn offences(&self) -> offences::storage::StorageApi {
            offences::storage::StorageApi
        }
        pub fn mmr(&self) -> mmr::storage::StorageApi {
            mmr::storage::StorageApi
        }
        pub fn session(&self) -> session::storage::StorageApi {
            session::storage::StorageApi
        }
        pub fn grandpa(&self) -> grandpa::storage::StorageApi {
            grandpa::storage::StorageApi
        }
        pub fn im_online(&self) -> im_online::storage::StorageApi {
            im_online::storage::StorageApi
        }
        pub fn democracy(&self) -> democracy::storage::StorageApi {
            democracy::storage::StorageApi
        }
        pub fn council(&self) -> council::storage::StorageApi {
            council::storage::StorageApi
        }
        pub fn technical_committee(&self) -> technical_committee::storage::StorageApi {
            technical_committee::storage::StorageApi
        }
        pub fn phragmen_election(&self) -> phragmen_election::storage::StorageApi {
            phragmen_election::storage::StorageApi
        }
        pub fn technical_membership(&self) -> technical_membership::storage::StorageApi {
            technical_membership::storage::StorageApi
        }
        pub fn treasury(&self) -> treasury::storage::StorageApi {
            treasury::storage::StorageApi
        }
        pub fn claims(&self) -> claims::storage::StorageApi {
            claims::storage::StorageApi
        }
        pub fn identity(&self) -> identity::storage::StorageApi {
            identity::storage::StorageApi
        }
        pub fn society(&self) -> society::storage::StorageApi {
            society::storage::StorageApi
        }
        pub fn recovery(&self) -> recovery::storage::StorageApi {
            recovery::storage::StorageApi
        }
        pub fn vesting(&self) -> vesting::storage::StorageApi {
            vesting::storage::StorageApi
        }
        pub fn scheduler(&self) -> scheduler::storage::StorageApi {
            scheduler::storage::StorageApi
        }
        pub fn proxy(&self) -> proxy::storage::StorageApi {
            proxy::storage::StorageApi
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi {
            multisig::storage::StorageApi
        }
        pub fn preimage(&self) -> preimage::storage::StorageApi {
            preimage::storage::StorageApi
        }
        pub fn bounties(&self) -> bounties::storage::StorageApi {
            bounties::storage::StorageApi
        }
        pub fn child_bounties(&self) -> child_bounties::storage::StorageApi {
            child_bounties::storage::StorageApi
        }
        pub fn tips(&self) -> tips::storage::StorageApi {
            tips::storage::StorageApi
        }
        pub fn nis(&self) -> nis::storage::StorageApi {
            nis::storage::StorageApi
        }
        pub fn nis_counterpart_balances(&self) -> nis_counterpart_balances::storage::StorageApi {
            nis_counterpart_balances::storage::StorageApi
        }
        pub fn configuration(&self) -> configuration::storage::StorageApi {
            configuration::storage::StorageApi
        }
        pub fn paras_shared(&self) -> paras_shared::storage::StorageApi {
            paras_shared::storage::StorageApi
        }
        pub fn para_inclusion(&self) -> para_inclusion::storage::StorageApi {
            para_inclusion::storage::StorageApi
        }
        pub fn para_inherent(&self) -> para_inherent::storage::StorageApi {
            para_inherent::storage::StorageApi
        }
        pub fn para_scheduler(&self) -> para_scheduler::storage::StorageApi {
            para_scheduler::storage::StorageApi
        }
        pub fn paras(&self) -> paras::storage::StorageApi {
            paras::storage::StorageApi
        }
        pub fn initializer(&self) -> initializer::storage::StorageApi {
            initializer::storage::StorageApi
        }
        pub fn dmp(&self) -> dmp::storage::StorageApi {
            dmp::storage::StorageApi
        }
        pub fn ump(&self) -> ump::storage::StorageApi {
            ump::storage::StorageApi
        }
        pub fn hrmp(&self) -> hrmp::storage::StorageApi {
            hrmp::storage::StorageApi
        }
        pub fn para_session_info(&self) -> para_session_info::storage::StorageApi {
            para_session_info::storage::StorageApi
        }
        pub fn paras_disputes(&self) -> paras_disputes::storage::StorageApi {
            paras_disputes::storage::StorageApi
        }
        pub fn paras_slashing(&self) -> paras_slashing::storage::StorageApi {
            paras_slashing::storage::StorageApi
        }
        pub fn registrar(&self) -> registrar::storage::StorageApi {
            registrar::storage::StorageApi
        }
        pub fn slots(&self) -> slots::storage::StorageApi {
            slots::storage::StorageApi
        }
        pub fn auctions(&self) -> auctions::storage::StorageApi {
            auctions::storage::StorageApi
        }
        pub fn crowdloan(&self) -> crowdloan::storage::StorageApi {
            crowdloan::storage::StorageApi
        }
        pub fn xcm_pallet(&self) -> xcm_pallet::storage::StorageApi {
            xcm_pallet::storage::StorageApi
        }
        pub fn beefy(&self) -> beefy::storage::StorageApi {
            beefy::storage::StorageApi
        }
        pub fn mmr_leaf(&self) -> mmr_leaf::storage::StorageApi {
            mmr_leaf::storage::StorageApi
        }
        pub fn assigned_slots(&self) -> assigned_slots::storage::StorageApi {
            assigned_slots::storage::StorageApi
        }
        pub fn validator_manager(&self) -> validator_manager::storage::StorageApi {
            validator_manager::storage::StorageApi
        }
        pub fn state_trie_migration(&self) -> state_trie_migration::storage::StorageApi {
            state_trie_migration::storage::StorageApi
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi {
            sudo::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn babe(&self) -> babe::calls::TransactionApi {
            babe::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn indices(&self) -> indices::calls::TransactionApi {
            indices::calls::TransactionApi
        }
        pub fn balances(&self) -> balances::calls::TransactionApi {
            balances::calls::TransactionApi
        }
        pub fn session(&self) -> session::calls::TransactionApi {
            session::calls::TransactionApi
        }
        pub fn grandpa(&self) -> grandpa::calls::TransactionApi {
            grandpa::calls::TransactionApi
        }
        pub fn im_online(&self) -> im_online::calls::TransactionApi {
            im_online::calls::TransactionApi
        }
        pub fn democracy(&self) -> democracy::calls::TransactionApi {
            democracy::calls::TransactionApi
        }
        pub fn council(&self) -> council::calls::TransactionApi {
            council::calls::TransactionApi
        }
        pub fn technical_committee(&self) -> technical_committee::calls::TransactionApi {
            technical_committee::calls::TransactionApi
        }
        pub fn phragmen_election(&self) -> phragmen_election::calls::TransactionApi {
            phragmen_election::calls::TransactionApi
        }
        pub fn technical_membership(&self) -> technical_membership::calls::TransactionApi {
            technical_membership::calls::TransactionApi
        }
        pub fn treasury(&self) -> treasury::calls::TransactionApi {
            treasury::calls::TransactionApi
        }
        pub fn claims(&self) -> claims::calls::TransactionApi {
            claims::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn identity(&self) -> identity::calls::TransactionApi {
            identity::calls::TransactionApi
        }
        pub fn society(&self) -> society::calls::TransactionApi {
            society::calls::TransactionApi
        }
        pub fn recovery(&self) -> recovery::calls::TransactionApi {
            recovery::calls::TransactionApi
        }
        pub fn vesting(&self) -> vesting::calls::TransactionApi {
            vesting::calls::TransactionApi
        }
        pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
            scheduler::calls::TransactionApi
        }
        pub fn proxy(&self) -> proxy::calls::TransactionApi {
            proxy::calls::TransactionApi
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi {
            multisig::calls::TransactionApi
        }
        pub fn preimage(&self) -> preimage::calls::TransactionApi {
            preimage::calls::TransactionApi
        }
        pub fn bounties(&self) -> bounties::calls::TransactionApi {
            bounties::calls::TransactionApi
        }
        pub fn child_bounties(&self) -> child_bounties::calls::TransactionApi {
            child_bounties::calls::TransactionApi
        }
        pub fn tips(&self) -> tips::calls::TransactionApi {
            tips::calls::TransactionApi
        }
        pub fn nis(&self) -> nis::calls::TransactionApi {
            nis::calls::TransactionApi
        }
        pub fn nis_counterpart_balances(&self) -> nis_counterpart_balances::calls::TransactionApi {
            nis_counterpart_balances::calls::TransactionApi
        }
        pub fn configuration(&self) -> configuration::calls::TransactionApi {
            configuration::calls::TransactionApi
        }
        pub fn paras_shared(&self) -> paras_shared::calls::TransactionApi {
            paras_shared::calls::TransactionApi
        }
        pub fn para_inclusion(&self) -> para_inclusion::calls::TransactionApi {
            para_inclusion::calls::TransactionApi
        }
        pub fn para_inherent(&self) -> para_inherent::calls::TransactionApi {
            para_inherent::calls::TransactionApi
        }
        pub fn paras(&self) -> paras::calls::TransactionApi {
            paras::calls::TransactionApi
        }
        pub fn initializer(&self) -> initializer::calls::TransactionApi {
            initializer::calls::TransactionApi
        }
        pub fn dmp(&self) -> dmp::calls::TransactionApi {
            dmp::calls::TransactionApi
        }
        pub fn ump(&self) -> ump::calls::TransactionApi {
            ump::calls::TransactionApi
        }
        pub fn hrmp(&self) -> hrmp::calls::TransactionApi {
            hrmp::calls::TransactionApi
        }
        pub fn paras_disputes(&self) -> paras_disputes::calls::TransactionApi {
            paras_disputes::calls::TransactionApi
        }
        pub fn paras_slashing(&self) -> paras_slashing::calls::TransactionApi {
            paras_slashing::calls::TransactionApi
        }
        pub fn registrar(&self) -> registrar::calls::TransactionApi {
            registrar::calls::TransactionApi
        }
        pub fn slots(&self) -> slots::calls::TransactionApi {
            slots::calls::TransactionApi
        }
        pub fn auctions(&self) -> auctions::calls::TransactionApi {
            auctions::calls::TransactionApi
        }
        pub fn crowdloan(&self) -> crowdloan::calls::TransactionApi {
            crowdloan::calls::TransactionApi
        }
        pub fn xcm_pallet(&self) -> xcm_pallet::calls::TransactionApi {
            xcm_pallet::calls::TransactionApi
        }
        pub fn beefy(&self) -> beefy::calls::TransactionApi {
            beefy::calls::TransactionApi
        }
        pub fn paras_sudo_wrapper(&self) -> paras_sudo_wrapper::calls::TransactionApi {
            paras_sudo_wrapper::calls::TransactionApi
        }
        pub fn assigned_slots(&self) -> assigned_slots::calls::TransactionApi {
            assigned_slots::calls::TransactionApi
        }
        pub fn validator_manager(&self) -> validator_manager::calls::TransactionApi {
            validator_manager::calls::TransactionApi
        }
        pub fn state_trie_migration(&self) -> state_trie_migration::calls::TransactionApi {
            state_trie_migration::calls::TransactionApi
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi {
            sudo::calls::TransactionApi
        }
    }
    /// check whether the Client you are using is aligned with the statically generated codegen.
    pub fn validate_codegen<T: ::subxt::Config, C: ::subxt::client::OfflineClientT<T>>(
        client: &C,
    ) -> Result<(), ::subxt::error::MetadataError> {
        let runtime_metadata_hash = client.metadata().metadata_hash(&PALLETS);
        if runtime_metadata_hash !=
            [
                66u8, 183u8, 245u8, 66u8, 154u8, 87u8, 200u8, 30u8, 83u8, 44u8, 182u8, 27u8, 7u8,
                193u8, 110u8, 191u8, 159u8, 122u8, 166u8, 221u8, 190u8, 194u8, 148u8, 240u8, 59u8,
                29u8, 40u8, 132u8, 146u8, 207u8, 221u8, 207u8,
            ]
        {
            Err(::subxt::error::MetadataError::IncompatibleMetadata)
        } else {
            Ok(())
        }
    }
    pub mod system {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Remark {
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHeapPages {
                pub pages: ::core::primitive::u64,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetCode {
                pub code: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetCodeWithoutChecks {
                pub code: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetStorage {
                pub items: ::std::vec::Vec<(
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::std::vec::Vec<::core::primitive::u8>,
                )>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct KillStorage {
                pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct KillPrefix {
                pub prefix: ::std::vec::Vec<::core::primitive::u8>,
                pub subkeys: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemarkWithEvent {
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Make some on-chain remark.
                ///
                ///## Complexity
                /// - `O(1)`
                pub fn remark(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<Remark> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark",
                        Remark { remark },
                        [
                            101u8, 80u8, 195u8, 226u8, 224u8, 247u8, 60u8, 128u8, 3u8, 101u8, 51u8,
                            147u8, 96u8, 126u8, 76u8, 230u8, 194u8, 227u8, 191u8, 73u8, 160u8,
                            146u8, 87u8, 147u8, 243u8, 28u8, 228u8, 116u8, 224u8, 181u8, 129u8,
                            160u8,
                        ],
                    )
                }
                ///Set the number of pages in the WebAssembly environment's heap.
                pub fn set_heap_pages(
                    &self,
                    pages: ::core::primitive::u64,
                ) -> ::subxt::tx::Payload<SetHeapPages> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_heap_pages",
                        SetHeapPages { pages },
                        [
                            43u8, 103u8, 128u8, 49u8, 156u8, 136u8, 11u8, 204u8, 80u8, 6u8, 244u8,
                            86u8, 171u8, 44u8, 140u8, 225u8, 142u8, 198u8, 43u8, 87u8, 26u8, 45u8,
                            125u8, 222u8, 165u8, 254u8, 172u8, 158u8, 39u8, 178u8, 86u8, 87u8,
                        ],
                    )
                }
                ///Set the new runtime code.
                ///
                ///## Complexity
                /// - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`
                pub fn set_code(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<SetCode> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code",
                        SetCode { code },
                        [
                            27u8, 104u8, 244u8, 205u8, 188u8, 254u8, 121u8, 13u8, 106u8, 120u8,
                            244u8, 108u8, 97u8, 84u8, 100u8, 68u8, 26u8, 69u8, 93u8, 128u8, 107u8,
                            4u8, 3u8, 142u8, 13u8, 134u8, 196u8, 62u8, 113u8, 181u8, 14u8, 40u8,
                        ],
                    )
                }
                ///Set the new runtime code without doing any checks of the given `code`.
                ///
                ///## Complexity
                /// - `O(C)` where `C` length of `code`
                pub fn set_code_without_checks(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<SetCodeWithoutChecks> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code_without_checks",
                        SetCodeWithoutChecks { code },
                        [
                            102u8, 160u8, 125u8, 235u8, 30u8, 23u8, 45u8, 239u8, 112u8, 148u8,
                            159u8, 158u8, 42u8, 93u8, 206u8, 94u8, 80u8, 250u8, 66u8, 195u8, 60u8,
                            40u8, 142u8, 169u8, 183u8, 80u8, 80u8, 96u8, 3u8, 231u8, 99u8, 216u8,
                        ],
                    )
                }
                ///Set some items of storage.
                pub fn set_storage(
                    &self,
                    items: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                ) -> ::subxt::tx::Payload<SetStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_storage",
                        SetStorage { items },
                        [
                            74u8, 43u8, 106u8, 255u8, 50u8, 151u8, 192u8, 155u8, 14u8, 90u8, 19u8,
                            45u8, 165u8, 16u8, 235u8, 242u8, 21u8, 131u8, 33u8, 172u8, 119u8, 78u8,
                            140u8, 10u8, 107u8, 202u8, 122u8, 235u8, 181u8, 191u8, 22u8, 116u8,
                        ],
                    )
                }
                ///Kill some items from storage.
                pub fn kill_storage(
                    &self,
                    keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                ) -> ::subxt::tx::Payload<KillStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_storage",
                        KillStorage { keys },
                        [
                            174u8, 174u8, 13u8, 174u8, 75u8, 138u8, 128u8, 235u8, 222u8, 216u8,
                            85u8, 18u8, 198u8, 1u8, 138u8, 70u8, 19u8, 108u8, 209u8, 41u8, 228u8,
                            67u8, 130u8, 230u8, 160u8, 207u8, 11u8, 180u8, 139u8, 242u8, 41u8,
                            15u8,
                        ],
                    )
                }
                ///Kill all storage items with a key that starts with the given prefix.
                ///
                ///**NOTE:** We rely on the Root origin to provide us the number of subkeys under
                ///the prefix we are removing to accurately calculate the weight of this function.
                pub fn kill_prefix(
                    &self,
                    prefix: ::std::vec::Vec<::core::primitive::u8>,
                    subkeys: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<KillPrefix> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_prefix",
                        KillPrefix { prefix, subkeys },
                        [
                            203u8, 116u8, 217u8, 42u8, 154u8, 215u8, 77u8, 217u8, 13u8, 22u8,
                            193u8, 2u8, 128u8, 115u8, 179u8, 115u8, 187u8, 218u8, 129u8, 34u8,
                            80u8, 4u8, 173u8, 120u8, 92u8, 35u8, 237u8, 112u8, 201u8, 207u8, 200u8,
                            48u8,
                        ],
                    )
                }
                ///Make some on-chain remark and emit event.
                pub fn remark_with_event(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<RemarkWithEvent> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark_with_event",
                        RemarkWithEvent { remark },
                        [
                            123u8, 225u8, 180u8, 179u8, 144u8, 74u8, 27u8, 85u8, 101u8, 75u8,
                            134u8, 44u8, 181u8, 25u8, 183u8, 158u8, 14u8, 213u8, 56u8, 225u8,
                            136u8, 88u8, 26u8, 114u8, 178u8, 43u8, 176u8, 43u8, 240u8, 84u8, 116u8,
                            46u8,
                        ],
                    )
                }
            }
        }
        ///Event for the System pallet.
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An extrinsic completed successfully.
            pub struct ExtrinsicSuccess {
                pub dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
            }
            impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An extrinsic failed.
            pub struct ExtrinsicFailed {
                pub dispatch_error: runtime_types::sp_runtime::DispatchError,
                pub dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
            }
            impl ::subxt::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///`:code` was updated.
            pub struct CodeUpdated;
            impl ::subxt::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new account was created.
            pub struct NewAccount {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An account was reaped.
            pub struct KilledAccount {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///On on-chain remark happened.
            pub struct Remarked {
                pub sender: ::subxt::utils::AccountId32,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The full account information for a particular account ID.
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            176u8, 187u8, 21u8, 220u8, 159u8, 204u8, 127u8, 14u8, 21u8, 69u8, 77u8,
                            114u8, 230u8, 141u8, 107u8, 79u8, 23u8, 16u8, 174u8, 243u8, 252u8,
                            42u8, 65u8, 120u8, 229u8, 38u8, 210u8, 255u8, 22u8, 40u8, 109u8, 223u8,
                        ],
                    )
                }
                /// The full account information for a particular account ID.
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        Vec::new(),
                        [
                            176u8, 187u8, 21u8, 220u8, 159u8, 204u8, 127u8, 14u8, 21u8, 69u8, 77u8,
                            114u8, 230u8, 141u8, 107u8, 79u8, 23u8, 16u8, 174u8, 243u8, 252u8,
                            42u8, 65u8, 120u8, 229u8, 38u8, 210u8, 255u8, 22u8, 40u8, 109u8, 223u8,
                        ],
                    )
                }
                /// Total extrinsics count for the current block.
                pub fn extrinsic_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicCount",
                        vec![],
                        [
                            223u8, 60u8, 201u8, 120u8, 36u8, 44u8, 180u8, 210u8, 242u8, 53u8,
                            222u8, 154u8, 123u8, 176u8, 249u8, 8u8, 225u8, 28u8, 232u8, 4u8, 136u8,
                            41u8, 151u8, 82u8, 189u8, 149u8, 49u8, 166u8, 139u8, 9u8, 163u8, 231u8,
                        ],
                    )
                }
                /// The current weight for the block.
                pub fn block_weight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockWeight",
                        vec![],
                        [
                            120u8, 67u8, 71u8, 163u8, 36u8, 202u8, 52u8, 106u8, 143u8, 155u8,
                            144u8, 87u8, 142u8, 241u8, 232u8, 183u8, 56u8, 235u8, 27u8, 237u8,
                            20u8, 202u8, 33u8, 85u8, 189u8, 0u8, 28u8, 52u8, 198u8, 40u8, 219u8,
                            54u8,
                        ],
                    )
                }
                /// Total length (in bytes) for all extrinsics put together, for the current block.
                pub fn all_extrinsics_len(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "AllExtrinsicsLen",
                        vec![],
                        [
                            202u8, 145u8, 209u8, 225u8, 40u8, 220u8, 174u8, 74u8, 93u8, 164u8,
                            254u8, 248u8, 254u8, 192u8, 32u8, 117u8, 96u8, 149u8, 53u8, 145u8,
                            219u8, 64u8, 234u8, 18u8, 217u8, 200u8, 203u8, 141u8, 145u8, 28u8,
                            134u8, 60u8,
                        ],
                    )
                }
                /// Map of block numbers to block hashes.
                pub fn block_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            50u8, 112u8, 176u8, 239u8, 175u8, 18u8, 205u8, 20u8, 241u8, 195u8,
                            21u8, 228u8, 186u8, 57u8, 200u8, 25u8, 38u8, 44u8, 106u8, 20u8, 168u8,
                            80u8, 76u8, 235u8, 12u8, 51u8, 137u8, 149u8, 200u8, 4u8, 220u8, 237u8,
                        ],
                    )
                }
                /// Map of block numbers to block hashes.
                pub fn block_hash_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        Vec::new(),
                        [
                            50u8, 112u8, 176u8, 239u8, 175u8, 18u8, 205u8, 20u8, 241u8, 195u8,
                            21u8, 228u8, 186u8, 57u8, 200u8, 25u8, 38u8, 44u8, 106u8, 20u8, 168u8,
                            80u8, 76u8, 235u8, 12u8, 51u8, 137u8, 149u8, 200u8, 4u8, 220u8, 237u8,
                        ],
                    )
                }
                /// Extrinsics data for the current block (maps an extrinsic's index to its data).
                pub fn extrinsic_data(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8,
                            254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8,
                            59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
                        ],
                    )
                }
                /// Extrinsics data for the current block (maps an extrinsic's index to its data).
                pub fn extrinsic_data_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        Vec::new(),
                        [
                            210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8,
                            254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8,
                            59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
                        ],
                    )
                }
                /// The current block number being processed. Set by `execute_block`.
                pub fn number(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Number",
                        vec![],
                        [
                            228u8, 96u8, 102u8, 190u8, 252u8, 130u8, 239u8, 172u8, 126u8, 235u8,
                            246u8, 139u8, 208u8, 15u8, 88u8, 245u8, 141u8, 232u8, 43u8, 204u8,
                            36u8, 87u8, 211u8, 141u8, 187u8, 68u8, 236u8, 70u8, 193u8, 235u8,
                            164u8, 191u8,
                        ],
                    )
                }
                /// Hash of the previous block.
                pub fn parent_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ParentHash",
                        vec![],
                        [
                            232u8, 206u8, 177u8, 119u8, 38u8, 57u8, 233u8, 50u8, 225u8, 49u8,
                            169u8, 176u8, 210u8, 51u8, 231u8, 176u8, 234u8, 186u8, 188u8, 112u8,
                            15u8, 152u8, 195u8, 232u8, 201u8, 97u8, 208u8, 249u8, 9u8, 163u8, 69u8,
                            36u8,
                        ],
                    )
                }
                /// Digest of the current block, also part of the block header.
                pub fn digest(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_runtime::generic::digest::Digest,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Digest",
                        vec![],
                        [
                            83u8, 141u8, 200u8, 132u8, 182u8, 55u8, 197u8, 122u8, 13u8, 159u8,
                            31u8, 42u8, 60u8, 191u8, 89u8, 221u8, 242u8, 47u8, 199u8, 213u8, 48u8,
                            216u8, 131u8, 168u8, 245u8, 82u8, 56u8, 190u8, 62u8, 69u8, 96u8, 37u8,
                        ],
                    )
                }
                /// Events deposited for the current block.
                ///
                /// NOTE: The item is unbound and should therefore never be read on chain.
                /// It could otherwise inflate the PoV size of a block.
                ///
                /// Events have a large in-memory size. Box the events to not go out-of-memory
                /// just in case someone still reads them from within the runtime.
                pub fn events(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::frame_system::EventRecord<
                            runtime_types::rococo_runtime::RuntimeEvent,
                            ::subxt::utils::H256,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Events",
                        vec![],
                        [
                            26u8, 227u8, 161u8, 81u8, 102u8, 132u8, 218u8, 195u8, 163u8, 6u8,
                            171u8, 227u8, 40u8, 229u8, 192u8, 18u8, 213u8, 224u8, 33u8, 183u8,
                            112u8, 0u8, 230u8, 235u8, 118u8, 202u8, 156u8, 50u8, 27u8, 122u8,
                            161u8, 134u8,
                        ],
                    )
                }
                /// The number of events in the `Events<T>` list.
                pub fn event_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventCount",
                        vec![],
                        [
                            236u8, 93u8, 90u8, 177u8, 250u8, 211u8, 138u8, 187u8, 26u8, 208u8,
                            203u8, 113u8, 221u8, 233u8, 227u8, 9u8, 249u8, 25u8, 202u8, 185u8,
                            161u8, 144u8, 167u8, 104u8, 127u8, 187u8, 38u8, 18u8, 52u8, 61u8, 66u8,
                            112u8,
                        ],
                    )
                }
                /// Mapping between a topic (represented by T::Hash) and a vector of indexes
                /// of events in the `<Events<T>>` list.
                ///
                /// All topic vectors have deterministic storage locations depending on the topic.
                /// This allows light-clients to leverage the changes trie storage
                /// tracking mechanism and in case of changes fetch the list of
                /// events of interest.
                ///
                /// The value has the type `(T::BlockNumber, EventIndex)` because if we used only
                /// just the `EventIndex` then in case if the topic has the same
                /// contents on the next block no notification will be triggered
                /// thus the event might be lost.
                pub fn event_topics(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            205u8, 90u8, 142u8, 190u8, 176u8, 37u8, 94u8, 82u8, 98u8, 1u8, 129u8,
                            63u8, 246u8, 101u8, 130u8, 58u8, 216u8, 16u8, 139u8, 196u8, 154u8,
                            111u8, 110u8, 178u8, 24u8, 44u8, 183u8, 176u8, 232u8, 82u8, 223u8,
                            38u8,
                        ],
                    )
                }
                /// Mapping between a topic (represented by T::Hash) and a vector of indexes
                /// of events in the `<Events<T>>` list.
                ///
                /// All topic vectors have deterministic storage locations depending on the topic.
                /// This allows light-clients to leverage the changes trie storage
                /// tracking mechanism and in case of changes fetch the list of
                /// events of interest.
                ///
                /// The value has the type `(T::BlockNumber, EventIndex)` because if we used only
                /// just the `EventIndex` then in case if the topic has the same
                /// contents on the next block no notification will be triggered
                /// thus the event might be lost.
                pub fn event_topics_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        Vec::new(),
                        [
                            205u8, 90u8, 142u8, 190u8, 176u8, 37u8, 94u8, 82u8, 98u8, 1u8, 129u8,
                            63u8, 246u8, 101u8, 130u8, 58u8, 216u8, 16u8, 139u8, 196u8, 154u8,
                            111u8, 110u8, 178u8, 24u8, 44u8, 183u8, 176u8, 232u8, 82u8, 223u8,
                            38u8,
                        ],
                    )
                }
                /// Stores the `spec_version` and `spec_name` of when the last runtime upgrade
                /// happened.
                pub fn last_runtime_upgrade(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::LastRuntimeUpgradeInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "LastRuntimeUpgrade",
                        vec![],
                        [
                            52u8, 37u8, 117u8, 111u8, 57u8, 130u8, 196u8, 14u8, 99u8, 77u8, 91u8,
                            126u8, 178u8, 249u8, 78u8, 34u8, 9u8, 194u8, 92u8, 105u8, 113u8, 81u8,
                            185u8, 127u8, 245u8, 184u8, 60u8, 29u8, 234u8, 182u8, 96u8, 196u8,
                        ],
                    )
                }
                /// True if we have upgraded so that `type RefCount` is `u32`. False (default) if
                /// not.
                pub fn upgraded_to_u32_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToU32RefCount",
                        vec![],
                        [
                            171u8, 88u8, 244u8, 92u8, 122u8, 67u8, 27u8, 18u8, 59u8, 175u8, 175u8,
                            178u8, 20u8, 150u8, 213u8, 59u8, 222u8, 141u8, 32u8, 107u8, 3u8, 114u8,
                            83u8, 250u8, 180u8, 233u8, 152u8, 54u8, 187u8, 99u8, 131u8, 204u8,
                        ],
                    )
                }
                /// True if we have upgraded so that AccountInfo contains three types of `RefCount`.
                /// False (default) if not.
                pub fn upgraded_to_triple_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToTripleRefCount",
                        vec![],
                        [
                            90u8, 33u8, 56u8, 86u8, 90u8, 101u8, 89u8, 133u8, 203u8, 56u8, 201u8,
                            210u8, 244u8, 232u8, 150u8, 18u8, 51u8, 105u8, 14u8, 230u8, 103u8,
                            155u8, 246u8, 99u8, 53u8, 207u8, 225u8, 128u8, 186u8, 76u8, 40u8,
                            185u8,
                        ],
                    )
                }
                /// The execution phase of the block.
                pub fn execution_phase(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::Phase,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExecutionPhase",
                        vec![],
                        [
                            230u8, 183u8, 221u8, 135u8, 226u8, 223u8, 55u8, 104u8, 138u8, 224u8,
                            103u8, 156u8, 222u8, 99u8, 203u8, 199u8, 164u8, 168u8, 193u8, 133u8,
                            201u8, 155u8, 63u8, 95u8, 17u8, 206u8, 165u8, 123u8, 161u8, 33u8,
                            172u8, 93u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// Block & extrinsics weights: base values and limits.
                pub fn block_weights(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockWeights>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockWeights",
                        [
                            118u8, 253u8, 239u8, 217u8, 145u8, 115u8, 85u8, 86u8, 172u8, 248u8,
                            139u8, 32u8, 158u8, 126u8, 172u8, 188u8, 197u8, 105u8, 145u8, 235u8,
                            171u8, 50u8, 31u8, 225u8, 167u8, 187u8, 241u8, 87u8, 6u8, 17u8, 234u8,
                            185u8,
                        ],
                    )
                }
                /// The maximum length of a block (in bytes).
                pub fn block_length(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockLength>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockLength",
                        [
                            116u8, 184u8, 225u8, 228u8, 207u8, 203u8, 4u8, 220u8, 234u8, 198u8,
                            150u8, 108u8, 205u8, 87u8, 194u8, 131u8, 229u8, 51u8, 140u8, 4u8, 47u8,
                            12u8, 200u8, 144u8, 153u8, 62u8, 51u8, 39u8, 138u8, 205u8, 203u8,
                            236u8,
                        ],
                    )
                }
                /// Maximum number of block number to block hash mappings to keep (oldest pruned
                /// first).
                pub fn block_hash_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockHashCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The weight of runtime database operations the runtime can invoke.
                pub fn db_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::RuntimeDbWeight>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "DbWeight",
                        [
                            124u8, 162u8, 190u8, 149u8, 49u8, 177u8, 162u8, 231u8, 62u8, 167u8,
                            199u8, 181u8, 43u8, 232u8, 185u8, 116u8, 195u8, 51u8, 233u8, 223u8,
                            20u8, 129u8, 246u8, 13u8, 65u8, 180u8, 64u8, 9u8, 157u8, 59u8, 245u8,
                            118u8,
                        ],
                    )
                }
                /// Get the chain's current version.
                pub fn version(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_version::RuntimeVersion>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "Version",
                        [
                            93u8, 98u8, 57u8, 243u8, 229u8, 8u8, 234u8, 231u8, 72u8, 230u8, 139u8,
                            47u8, 63u8, 181u8, 17u8, 2u8, 220u8, 231u8, 104u8, 237u8, 185u8, 143u8,
                            165u8, 253u8, 188u8, 76u8, 147u8, 12u8, 170u8, 26u8, 74u8, 200u8,
                        ],
                    )
                }
                /// The designated SS58 prefix of this chain.
                ///
                /// This replaces the "ss58Format" property declared in the chain spec. Reason is
                /// that the runtime should know about the prefix in order to make use of it as
                /// an identifier of the chain.
                pub fn ss58_prefix(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod babe {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReportEquivocation {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReportEquivocationUnsigned {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PlanConfigChange {
                pub config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Report authority equivocation/misbehavior. This method will verify
                ///the equivocation proof and validate the given key ownership proof
                ///against the extracted offender. If both are valid, the offence will
                ///be reported.
                pub fn report_equivocation(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<ReportEquivocation> {
                    ::subxt::tx::Payload::new_static(
                        "Babe",
                        "report_equivocation",
                        ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            177u8, 237u8, 107u8, 138u8, 237u8, 233u8, 30u8, 195u8, 112u8, 176u8,
                            185u8, 113u8, 157u8, 221u8, 134u8, 151u8, 62u8, 151u8, 64u8, 164u8,
                            254u8, 112u8, 2u8, 94u8, 175u8, 79u8, 160u8, 3u8, 72u8, 145u8, 244u8,
                            137u8,
                        ],
                    )
                }
                ///Report authority equivocation/misbehavior. This method will verify
                ///the equivocation proof and validate the given key ownership proof
                ///against the extracted offender. If both are valid, the offence will
                ///be reported.
                ///This extrinsic must be called unsigned and it is expected that only
                ///block authors will call it (validated in `ValidateUnsigned`), as such
                ///if the block author is defined it will be defined as the equivocation
                ///reporter.
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<ReportEquivocationUnsigned> {
                    ::subxt::tx::Payload::new_static(
                        "Babe",
                        "report_equivocation_unsigned",
                        ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            56u8, 103u8, 238u8, 118u8, 61u8, 192u8, 222u8, 87u8, 254u8, 24u8,
                            138u8, 219u8, 210u8, 85u8, 201u8, 147u8, 128u8, 49u8, 199u8, 144u8,
                            46u8, 158u8, 163u8, 31u8, 101u8, 224u8, 72u8, 98u8, 68u8, 120u8, 215u8,
                            19u8,
                        ],
                    )
                }
                ///Plan an epoch config change. The epoch config change is recorded and will be
                /// enacted on the next call to `enact_epoch_change`. The config
                /// will be activated one epoch after. Multiple calls to this method
                /// will replace any existing planned config change that had
                /// not been enacted yet.
                pub fn plan_config_change(
                    &self,
                    config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                ) -> ::subxt::tx::Payload<PlanConfigChange> {
                    ::subxt::tx::Payload::new_static(
                        "Babe",
                        "plan_config_change",
                        PlanConfigChange { config },
                        [
                            229u8, 157u8, 41u8, 58u8, 56u8, 4u8, 52u8, 107u8, 104u8, 20u8, 42u8,
                            110u8, 1u8, 17u8, 45u8, 196u8, 30u8, 135u8, 63u8, 46u8, 40u8, 137u8,
                            209u8, 37u8, 24u8, 108u8, 251u8, 189u8, 77u8, 208u8, 74u8, 32u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Current epoch index.
                pub fn epoch_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "EpochIndex",
                        vec![],
                        [
                            51u8, 27u8, 91u8, 156u8, 118u8, 99u8, 46u8, 219u8, 190u8, 147u8, 205u8,
                            23u8, 106u8, 169u8, 121u8, 218u8, 208u8, 235u8, 135u8, 127u8, 243u8,
                            41u8, 55u8, 243u8, 235u8, 122u8, 57u8, 86u8, 37u8, 90u8, 208u8, 71u8,
                        ],
                    )
                }
                /// Current epoch authorities.
                pub fn authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_consensus_babe::app::Public,
                        ::core::primitive::u64,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "Authorities",
                        vec![],
                        [
                            61u8, 8u8, 133u8, 111u8, 169u8, 120u8, 0u8, 213u8, 31u8, 159u8, 204u8,
                            212u8, 18u8, 205u8, 93u8, 84u8, 140u8, 108u8, 136u8, 209u8, 234u8,
                            107u8, 145u8, 9u8, 204u8, 224u8, 105u8, 9u8, 238u8, 241u8, 65u8, 30u8,
                        ],
                    )
                }
                /// The slot at which the first epoch actually started. This is 0
                /// until the first block of the chain.
                pub fn genesis_slot(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_slots::Slot,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "GenesisSlot",
                        vec![],
                        [
                            234u8, 127u8, 243u8, 100u8, 124u8, 160u8, 66u8, 248u8, 48u8, 218u8,
                            61u8, 52u8, 54u8, 142u8, 158u8, 77u8, 32u8, 63u8, 156u8, 39u8, 94u8,
                            255u8, 192u8, 238u8, 170u8, 118u8, 58u8, 42u8, 199u8, 61u8, 199u8,
                            77u8,
                        ],
                    )
                }
                /// Current slot number.
                pub fn current_slot(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_slots::Slot,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "CurrentSlot",
                        vec![],
                        [
                            139u8, 237u8, 185u8, 137u8, 251u8, 179u8, 69u8, 167u8, 133u8, 168u8,
                            204u8, 64u8, 178u8, 123u8, 92u8, 250u8, 119u8, 190u8, 208u8, 178u8,
                            208u8, 176u8, 124u8, 187u8, 74u8, 165u8, 33u8, 78u8, 161u8, 206u8, 8u8,
                            108u8,
                        ],
                    )
                }
                /// The epoch randomness for the *current* epoch.
                ///
                /// # Security
                ///
                /// This MUST NOT be used for gambling, as it can be influenced by a
                /// malicious validator in the short term. It MAY be used in many
                /// cryptographic protocols, however, so long as one remembers that this
                /// (like everything else on-chain) it is public. For example, it can be
                /// used where a number is needed that cannot have been chosen by an
                /// adversary, for purposes such as public-coin zero-knowledge proofs.
                pub fn randomness(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    [::core::primitive::u8; 32usize],
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "Randomness",
                        vec![],
                        [
                            191u8, 197u8, 25u8, 164u8, 104u8, 248u8, 247u8, 193u8, 244u8, 60u8,
                            181u8, 195u8, 248u8, 90u8, 41u8, 199u8, 82u8, 123u8, 72u8, 126u8, 18u8,
                            17u8, 128u8, 215u8, 34u8, 251u8, 227u8, 70u8, 166u8, 10u8, 104u8,
                            140u8,
                        ],
                    )
                }
                /// Pending epoch configuration change that will be applied when the next epoch is
                /// enacted.
                pub fn pending_epoch_config_change(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "PendingEpochConfigChange",
                        vec![],
                        [
                            4u8, 201u8, 0u8, 204u8, 47u8, 246u8, 4u8, 185u8, 163u8, 242u8, 242u8,
                            152u8, 29u8, 222u8, 71u8, 127u8, 49u8, 203u8, 206u8, 180u8, 244u8,
                            50u8, 80u8, 49u8, 199u8, 97u8, 3u8, 170u8, 156u8, 139u8, 106u8, 113u8,
                        ],
                    )
                }
                /// Next epoch randomness.
                pub fn next_randomness(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    [::core::primitive::u8; 32usize],
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "NextRandomness",
                        vec![],
                        [
                            185u8, 98u8, 45u8, 109u8, 253u8, 38u8, 238u8, 221u8, 240u8, 29u8, 38u8,
                            107u8, 118u8, 117u8, 131u8, 115u8, 21u8, 255u8, 203u8, 81u8, 243u8,
                            251u8, 91u8, 60u8, 163u8, 202u8, 125u8, 193u8, 173u8, 234u8, 166u8,
                            92u8,
                        ],
                    )
                }
                /// Next epoch authorities.
                pub fn next_authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_consensus_babe::app::Public,
                        ::core::primitive::u64,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "NextAuthorities",
                        vec![],
                        [
                            201u8, 193u8, 164u8, 18u8, 155u8, 253u8, 124u8, 163u8, 143u8, 73u8,
                            212u8, 20u8, 241u8, 108u8, 110u8, 5u8, 171u8, 66u8, 224u8, 208u8, 10u8,
                            65u8, 148u8, 164u8, 1u8, 12u8, 216u8, 83u8, 20u8, 226u8, 254u8, 183u8,
                        ],
                    )
                }
                /// Randomness under construction.
                ///
                /// We make a trade-off between storage accesses and list length.
                /// We store the under-construction randomness in segments of up to
                /// `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
                ///
                /// Once a segment reaches this length, we begin the next one.
                /// We reset all segments and return to `0` at the beginning of every
                /// epoch.
                pub fn segment_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "SegmentIndex",
                        vec![],
                        [
                            128u8, 45u8, 87u8, 58u8, 174u8, 152u8, 241u8, 156u8, 56u8, 192u8, 19u8,
                            45u8, 75u8, 160u8, 35u8, 253u8, 145u8, 11u8, 178u8, 81u8, 114u8, 117u8,
                            112u8, 107u8, 163u8, 208u8, 240u8, 151u8, 102u8, 176u8, 246u8, 5u8,
                        ],
                    )
                }
                /// TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
                pub fn under_construction(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        [::core::primitive::u8; 32usize],
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "UnderConstruction",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            180u8, 4u8, 149u8, 245u8, 231u8, 92u8, 99u8, 170u8, 254u8, 172u8,
                            182u8, 3u8, 152u8, 156u8, 132u8, 196u8, 140u8, 97u8, 7u8, 84u8, 220u8,
                            89u8, 195u8, 177u8, 235u8, 51u8, 98u8, 144u8, 73u8, 238u8, 59u8, 164u8,
                        ],
                    )
                }
                /// TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
                pub fn under_construction_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        [::core::primitive::u8; 32usize],
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "UnderConstruction",
                        Vec::new(),
                        [
                            180u8, 4u8, 149u8, 245u8, 231u8, 92u8, 99u8, 170u8, 254u8, 172u8,
                            182u8, 3u8, 152u8, 156u8, 132u8, 196u8, 140u8, 97u8, 7u8, 84u8, 220u8,
                            89u8, 195u8, 177u8, 235u8, 51u8, 98u8, 144u8, 73u8, 238u8, 59u8, 164u8,
                        ],
                    )
                }
                /// Temporary value (cleared at block finalization) which is `Some`
                /// if per-block initialization has already been called for current block.
                pub fn initialized(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<runtime_types::sp_consensus_babe::digests::PreDigest>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "Initialized",
                        vec![],
                        [
                            142u8, 101u8, 250u8, 113u8, 93u8, 201u8, 157u8, 18u8, 166u8, 153u8,
                            59u8, 197u8, 107u8, 247u8, 124u8, 110u8, 202u8, 67u8, 62u8, 57u8,
                            186u8, 134u8, 49u8, 182u8, 149u8, 44u8, 255u8, 85u8, 87u8, 177u8,
                            149u8, 121u8,
                        ],
                    )
                }
                /// This field should always be populated during block processing unless
                /// secondary plain slots are enabled (which don't contain a VRF output).
                ///
                /// It is set in `on_finalize`, before it will contain the value from the last
                /// block.
                pub fn author_vrf_randomness(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "AuthorVrfRandomness",
                        vec![],
                        [
                            66u8, 235u8, 74u8, 252u8, 222u8, 135u8, 19u8, 28u8, 74u8, 191u8, 170u8,
                            197u8, 207u8, 127u8, 77u8, 121u8, 138u8, 138u8, 110u8, 187u8, 34u8,
                            14u8, 230u8, 43u8, 241u8, 241u8, 63u8, 163u8, 53u8, 179u8, 250u8,
                            247u8,
                        ],
                    )
                }
                /// The block numbers when the last and current epoch have started, respectively
                /// `N-1` and `N`.
                /// NOTE: We track this is in order to annotate the block number when a given pool
                /// of entropy was fixed (i.e. it was known to chain observers).
                /// Since epochs are defined in slots, which may be skipped, the
                /// block numbers may not line up with the slot numbers.
                pub fn epoch_start(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "EpochStart",
                        vec![],
                        [
                            196u8, 39u8, 241u8, 20u8, 150u8, 180u8, 136u8, 4u8, 195u8, 205u8,
                            218u8, 10u8, 130u8, 131u8, 168u8, 243u8, 207u8, 249u8, 58u8, 195u8,
                            177u8, 119u8, 110u8, 243u8, 241u8, 3u8, 245u8, 56u8, 157u8, 5u8, 68u8,
                            60u8,
                        ],
                    )
                }
                /// How late the current block is compared to its parent.
                ///
                /// This entry is populated as part of block execution and is cleaned up
                /// on block finalization. Querying this storage entry outside of block
                /// execution context should always yield zero.
                pub fn lateness(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "Lateness",
                        vec![],
                        [
                            229u8, 230u8, 224u8, 89u8, 49u8, 213u8, 198u8, 236u8, 144u8, 56u8,
                            193u8, 234u8, 62u8, 242u8, 191u8, 199u8, 105u8, 131u8, 74u8, 63u8,
                            75u8, 1u8, 210u8, 49u8, 3u8, 128u8, 18u8, 77u8, 219u8, 146u8, 60u8,
                            88u8,
                        ],
                    )
                }
                /// The configuration for the current epoch. Should never be `None` as it is
                /// initialized in genesis.
                pub fn epoch_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_babe::BabeEpochConfiguration,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "EpochConfig",
                        vec![],
                        [
                            41u8, 118u8, 141u8, 244u8, 72u8, 17u8, 125u8, 203u8, 43u8, 153u8,
                            203u8, 119u8, 117u8, 223u8, 123u8, 133u8, 73u8, 235u8, 130u8, 21u8,
                            160u8, 167u8, 16u8, 173u8, 177u8, 35u8, 117u8, 97u8, 149u8, 49u8,
                            220u8, 24u8,
                        ],
                    )
                }
                /// The configuration for the next epoch, `None` if the config will not change
                /// (you can fallback to `EpochConfig` instead in that case).
                pub fn next_epoch_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_babe::BabeEpochConfiguration,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "NextEpochConfig",
                        vec![],
                        [
                            111u8, 182u8, 144u8, 180u8, 92u8, 146u8, 102u8, 249u8, 196u8, 229u8,
                            226u8, 30u8, 25u8, 198u8, 133u8, 9u8, 136u8, 95u8, 11u8, 151u8, 139u8,
                            156u8, 105u8, 228u8, 181u8, 12u8, 175u8, 148u8, 174u8, 33u8, 233u8,
                            228u8,
                        ],
                    )
                }
                /// A list of the last 100 skipped epochs and the corresponding session index
                /// when the epoch was skipped.
                ///
                /// This is only used for validating equivocation proofs. An equivocation proof
                /// must contains a key-ownership proof for a given session, therefore we need a
                /// way to tie together sessions and epoch indices, i.e. we need to validate that
                /// a validator was the owner of a given key on a given session, and what the
                /// active epoch index was during that session.
                pub fn skipped_epochs(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u64,
                        ::core::primitive::u32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "SkippedEpochs",
                        vec![],
                        [
                            187u8, 66u8, 178u8, 110u8, 247u8, 41u8, 128u8, 194u8, 173u8, 197u8,
                            28u8, 219u8, 112u8, 75u8, 9u8, 184u8, 51u8, 12u8, 121u8, 117u8, 176u8,
                            213u8, 139u8, 144u8, 122u8, 72u8, 243u8, 105u8, 248u8, 63u8, 6u8, 87u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The amount of time, in slots, that each epoch should last.
                /// NOTE: Currently it is not possible to change the epoch duration after
                /// the chain has started. Attempting to do so will brick block production.
                pub fn epoch_duration(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Babe",
                        "EpochDuration",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                /// The expected average block time at which BABE should be creating
                /// blocks. Since BABE is probabilistic it is not trivial to figure out
                /// what the expected average block time should be based on the slot
                /// duration and the security parameter `c` (where `1 - c` represents
                /// the probability of a slot being empty).
                pub fn expected_block_time(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Babe",
                        "ExpectedBlockTime",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                /// Max number of authorities allowed
                pub fn max_authorities(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Babe",
                        "MaxAuthorities",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Set {
                #[codec(compact)]
                pub now: ::core::primitive::u64,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Set the current time.
                ///
                ///This call should be invoked exactly once per block. It will panic at the
                /// finalization phase, if this call hasn't been invoked by that
                /// time.
                ///
                ///The timestamp should be greater than the previous one by the amount specified by
                ///`MinimumPeriod`.
                ///
                ///The dispatch origin for this call must be `Inherent`.
                ///
                ///## Complexity
                /// - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)
                /// - 1 storage read and 1 storage mutation (codec `O(1)`). (because of
                ///   `DidUpdate::take` in
                ///  `on_finalize`)
                /// - 1 event handler `on_timestamp_set`. Must be `O(1)`.
                pub fn set(&self, now: ::core::primitive::u64) -> ::subxt::tx::Payload<Set> {
                    ::subxt::tx::Payload::new_static(
                        "Timestamp",
                        "set",
                        Set { now },
                        [
                            6u8, 97u8, 172u8, 236u8, 118u8, 238u8, 228u8, 114u8, 15u8, 115u8,
                            102u8, 85u8, 66u8, 151u8, 16u8, 33u8, 187u8, 17u8, 166u8, 88u8, 127u8,
                            214u8, 182u8, 51u8, 168u8, 88u8, 43u8, 101u8, 185u8, 8u8, 1u8, 28u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Current time for the current block.
                pub fn now(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "Now",
                        vec![],
                        [
                            148u8, 53u8, 50u8, 54u8, 13u8, 161u8, 57u8, 150u8, 16u8, 83u8, 144u8,
                            221u8, 59u8, 75u8, 158u8, 130u8, 39u8, 123u8, 106u8, 134u8, 202u8,
                            185u8, 83u8, 85u8, 60u8, 41u8, 120u8, 96u8, 210u8, 34u8, 2u8, 250u8,
                        ],
                    )
                }
                /// Did the timestamp get updated in this block?
                pub fn did_update(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "DidUpdate",
                        vec![],
                        [
                            70u8, 13u8, 92u8, 186u8, 80u8, 151u8, 167u8, 90u8, 158u8, 232u8, 175u8,
                            13u8, 103u8, 135u8, 2u8, 78u8, 16u8, 6u8, 39u8, 158u8, 167u8, 85u8,
                            27u8, 47u8, 122u8, 73u8, 127u8, 26u8, 35u8, 168u8, 72u8, 204u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The minimum period between blocks. Beware that this is different to the
                /// *expected* period that the block production apparatus provides.
                /// Your chosen consensus system will generally work with this to
                /// determine a sensible block time. e.g. For Aura, it will be
                /// double this period on default settings.
                pub fn minimum_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod indices {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Claim {
                pub index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Transfer {
                pub new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Free {
                pub index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceTransfer {
                pub new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub index: ::core::primitive::u32,
                pub freeze: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Freeze {
                pub index: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Assign an previously unassigned index.
                ///
                ///Payment: `Deposit` is reserved from the sender account.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `index`: the index to be claimed. This must not be in use.
                ///
                ///Emits `IndexAssigned` if successful.
                ///
                ///## Complexity
                /// - `O(1)`.
                pub fn claim(&self, index: ::core::primitive::u32) -> ::subxt::tx::Payload<Claim> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "claim",
                        Claim { index },
                        [
                            5u8, 24u8, 11u8, 173u8, 226u8, 170u8, 0u8, 30u8, 193u8, 102u8, 214u8,
                            59u8, 252u8, 32u8, 221u8, 88u8, 196u8, 189u8, 244u8, 18u8, 233u8, 37u8,
                            228u8, 248u8, 76u8, 175u8, 212u8, 233u8, 238u8, 203u8, 162u8, 68u8,
                        ],
                    )
                }
                ///Assign an index already owned by the sender to another account. The balance
                /// reservation is effectively transferred to the new account.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `index`: the index to be re-assigned. This must be owned by the sender.
                /// - `new`: the new owner of the index. This function is a no-op if it is equal to
                ///   sender.
                ///
                ///Emits `IndexAssigned` if successful.
                ///
                ///## Complexity
                /// - `O(1)`.
                pub fn transfer(
                    &self,
                    new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "transfer",
                        Transfer { new, index },
                        [
                            154u8, 191u8, 183u8, 50u8, 185u8, 69u8, 126u8, 132u8, 12u8, 77u8,
                            146u8, 189u8, 254u8, 7u8, 72u8, 191u8, 118u8, 102u8, 180u8, 2u8, 161u8,
                            151u8, 68u8, 93u8, 79u8, 45u8, 97u8, 202u8, 131u8, 103u8, 174u8, 189u8,
                        ],
                    )
                }
                ///Free up an index owned by the sender.
                ///
                ///Payment: Any previous deposit placed for the index is unreserved in the sender
                /// account.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must own the
                /// index.
                ///
                /// - `index`: the index to be freed. This must be owned by the sender.
                ///
                ///Emits `IndexFreed` if successful.
                ///
                ///## Complexity
                /// - `O(1)`.
                pub fn free(&self, index: ::core::primitive::u32) -> ::subxt::tx::Payload<Free> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "free",
                        Free { index },
                        [
                            133u8, 202u8, 225u8, 127u8, 69u8, 145u8, 43u8, 13u8, 160u8, 248u8,
                            215u8, 243u8, 232u8, 166u8, 74u8, 203u8, 235u8, 138u8, 255u8, 27u8,
                            163u8, 71u8, 254u8, 217u8, 6u8, 208u8, 202u8, 204u8, 238u8, 70u8,
                            126u8, 252u8,
                        ],
                    )
                }
                ///Force an index to an account. This doesn't require a deposit. If the index is
                /// already held, then any deposit is reimbursed to its current
                /// owner.
                ///
                ///The dispatch origin for this call must be _Root_.
                ///
                /// - `index`: the index to be (re-)assigned.
                /// - `new`: the new owner of the index. This function is a no-op if it is equal to
                ///   sender.
                /// - `freeze`: if set to `true`, will freeze the index so it cannot be transferred.
                ///
                ///Emits `IndexAssigned` if successful.
                ///
                ///## Complexity
                /// - `O(1)`.
                pub fn force_transfer(
                    &self,
                    new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    index: ::core::primitive::u32,
                    freeze: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "force_transfer",
                        ForceTransfer { new, index, freeze },
                        [
                            37u8, 220u8, 91u8, 118u8, 222u8, 81u8, 225u8, 131u8, 101u8, 203u8,
                            60u8, 149u8, 102u8, 92u8, 58u8, 91u8, 227u8, 64u8, 229u8, 62u8, 201u8,
                            57u8, 168u8, 11u8, 51u8, 149u8, 146u8, 156u8, 209u8, 226u8, 11u8,
                            181u8,
                        ],
                    )
                }
                ///Freeze an index so it will always point to the sender account. This consumes the
                ///deposit.
                ///
                ///The dispatch origin for this call must be _Signed_ and the signing account must
                /// have a non-frozen account `index`.
                ///
                /// - `index`: the index to be frozen in place.
                ///
                ///Emits `IndexFrozen` if successful.
                ///
                ///## Complexity
                /// - `O(1)`.
                pub fn freeze(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Freeze> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "freeze",
                        Freeze { index },
                        [
                            121u8, 45u8, 118u8, 2u8, 72u8, 48u8, 38u8, 7u8, 234u8, 204u8, 68u8,
                            20u8, 76u8, 251u8, 205u8, 246u8, 149u8, 31u8, 168u8, 186u8, 208u8,
                            90u8, 40u8, 47u8, 100u8, 228u8, 188u8, 33u8, 79u8, 220u8, 105u8, 209u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_indices::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A account index was assigned.
            pub struct IndexAssigned {
                pub who: ::subxt::utils::AccountId32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for IndexAssigned {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexAssigned";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A account index has been freed up (unassigned).
            pub struct IndexFreed {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for IndexFreed {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexFreed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A account index has been frozen to its current account ID.
            pub struct IndexFrozen {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for IndexFrozen {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexFrozen";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The lookup from index to account.
                pub fn accounts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::subxt::utils::AccountId32, ::core::primitive::u128, ::core::primitive::bool),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Indices",
                        "Accounts",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            211u8, 169u8, 54u8, 254u8, 88u8, 57u8, 22u8, 223u8, 108u8, 27u8, 38u8,
                            9u8, 202u8, 209u8, 111u8, 209u8, 144u8, 13u8, 211u8, 114u8, 239u8,
                            127u8, 75u8, 166u8, 234u8, 222u8, 225u8, 35u8, 160u8, 163u8, 112u8,
                            242u8,
                        ],
                    )
                }
                /// The lookup from index to account.
                pub fn accounts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::subxt::utils::AccountId32, ::core::primitive::u128, ::core::primitive::bool),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Indices",
                        "Accounts",
                        Vec::new(),
                        [
                            211u8, 169u8, 54u8, 254u8, 88u8, 57u8, 22u8, 223u8, 108u8, 27u8, 38u8,
                            9u8, 202u8, 209u8, 111u8, 209u8, 144u8, 13u8, 211u8, 114u8, 239u8,
                            127u8, 75u8, 166u8, 234u8, 222u8, 225u8, 35u8, 160u8, 163u8, 112u8,
                            242u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The deposit needed for reserving an index.
                pub fn deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Indices",
                        "Deposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod balances {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Transfer {
                pub dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetBalance {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub new_free: ::core::primitive::u128,
                #[codec(compact)]
                pub new_reserved: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceTransfer {
                pub source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransferKeepAlive {
                pub dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransferAll {
                pub dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceUnreserve {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub amount: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Transfer some liquid free balance to another account.
                ///
                ///`transfer` will set the `FreeBalance` of the sender and receiver.
                ///If the sender's account is below the existential deposit as a result
                ///of the transfer, the account will be reaped.
                ///
                ///The dispatch origin for this call must be `Signed` by the transactor.
                ///
                ///## Complexity
                /// - Dependent on arguments but not critical, given proper implementations for
                ///   input config
                ///  types. See related functions below.
                /// - It contains a limited number of reads and writes internally and no complex
                ///  computation.
                ///
                ///Related functions:
                ///
                ///  - `ensure_can_withdraw` is always called internally but has a bounded
                ///    complexity.
                ///  - Transferring balances to accounts that did not exist before will cause
                ///    `T::OnNewAccount::on_new_account` to be called.
                ///  - Removing enough funds from an account will trigger
                ///    `T::DustRemoval::on_unbalanced`.
                ///  - `transfer_keep_alive` works the same way as `transfer`, but has an additional
                ///    check that the transfer will not kill the origin account.
                pub fn transfer(
                    &self,
                    dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer",
                        Transfer { dest, value },
                        [
                            111u8, 222u8, 32u8, 56u8, 171u8, 77u8, 252u8, 29u8, 194u8, 155u8,
                            200u8, 192u8, 198u8, 81u8, 23u8, 115u8, 236u8, 91u8, 218u8, 114u8,
                            107u8, 141u8, 138u8, 100u8, 237u8, 21u8, 58u8, 172u8, 3u8, 20u8, 216u8,
                            38u8,
                        ],
                    )
                }
                ///Set the balances of a given account.
                ///
                ///This will alter `FreeBalance` and `ReservedBalance` in storage. it will
                ///also alter the total issuance of the system (`TotalIssuance`) appropriately.
                ///If the new free or reserved balance is below the existential deposit,
                ///it will reset the account nonce (`frame_system::AccountNonce`).
                ///
                ///The dispatch origin for this call is `root`.
                pub fn set_balance(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    new_free: ::core::primitive::u128,
                    new_reserved: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<SetBalance> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "set_balance",
                        SetBalance { who, new_free, new_reserved },
                        [
                            234u8, 215u8, 97u8, 98u8, 243u8, 199u8, 57u8, 76u8, 59u8, 161u8, 118u8,
                            207u8, 34u8, 197u8, 198u8, 61u8, 231u8, 210u8, 169u8, 235u8, 150u8,
                            137u8, 173u8, 49u8, 28u8, 77u8, 84u8, 149u8, 143u8, 210u8, 139u8,
                            193u8,
                        ],
                    )
                }
                ///Exactly as `transfer`, except the origin must be root and the source account may
                /// be specified.
                ///## Complexity
                /// - Same as transfer, but additional read and write because the source account is
                ///   not
                ///  assumed to be in the overlay.
                pub fn force_transfer(
                    &self,
                    source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_transfer",
                        ForceTransfer { source, dest, value },
                        [
                            79u8, 174u8, 212u8, 108u8, 184u8, 33u8, 170u8, 29u8, 232u8, 254u8,
                            195u8, 218u8, 221u8, 134u8, 57u8, 99u8, 6u8, 70u8, 181u8, 227u8, 56u8,
                            239u8, 243u8, 158u8, 157u8, 245u8, 36u8, 162u8, 11u8, 237u8, 147u8,
                            15u8,
                        ],
                    )
                }
                ///Same as the [`transfer`] call, but with a check that the transfer will not kill
                /// the origin account.
                ///
                ///99% of the time you want [`transfer`] instead.
                ///
                ///[`transfer`]: struct.Pallet.html#method.transfer
                pub fn transfer_keep_alive(
                    &self,
                    dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_keep_alive",
                        TransferKeepAlive { dest, value },
                        [
                            112u8, 179u8, 75u8, 168u8, 193u8, 221u8, 9u8, 82u8, 190u8, 113u8,
                            253u8, 13u8, 130u8, 134u8, 170u8, 216u8, 136u8, 111u8, 242u8, 220u8,
                            202u8, 112u8, 47u8, 79u8, 73u8, 244u8, 226u8, 59u8, 240u8, 188u8,
                            210u8, 208u8,
                        ],
                    )
                }
                ///Transfer the entire transferable balance from the caller account.
                ///
                ///NOTE: This function only attempts to transfer _transferable_ balances. This
                /// means that any locked, reserved, or existential deposits (when
                /// `keep_alive` is `true`), will not be transferred by this
                /// function. To ensure that this function results in a killed account,
                /// you might need to prepare the account by removing any reference counters,
                /// storage deposits, etc...
                ///
                ///The dispatch origin of this call must be Signed.
                ///
                /// - `dest`: The recipient of the transfer.
                /// - `keep_alive`: A boolean to determine if the `transfer_all` operation should
                ///   send all
                ///  of the funds the account has, causing the sender account to be killed (false),
                /// or  transfer everything except at least the existential deposit,
                /// which will guarantee to  keep the sender account alive (true).
                /// ## Complexity
                /// - O(1). Just like transfer, but reading the user's transferable balance first.
                pub fn transfer_all(
                    &self,
                    dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    keep_alive: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<TransferAll> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_all",
                        TransferAll { dest, keep_alive },
                        [
                            46u8, 129u8, 29u8, 177u8, 221u8, 107u8, 245u8, 69u8, 238u8, 126u8,
                            145u8, 26u8, 219u8, 208u8, 14u8, 80u8, 149u8, 1u8, 214u8, 63u8, 67u8,
                            201u8, 144u8, 45u8, 129u8, 145u8, 174u8, 71u8, 238u8, 113u8, 208u8,
                            34u8,
                        ],
                    )
                }
                ///Unreserve some balance from a user by force.
                ///
                ///Can only be called by ROOT.
                pub fn force_unreserve(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<ForceUnreserve> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_unreserve",
                        ForceUnreserve { who, amount },
                        [
                            160u8, 146u8, 137u8, 76u8, 157u8, 187u8, 66u8, 148u8, 207u8, 76u8,
                            32u8, 254u8, 82u8, 215u8, 35u8, 161u8, 213u8, 52u8, 32u8, 98u8, 102u8,
                            106u8, 234u8, 123u8, 6u8, 175u8, 184u8, 188u8, 174u8, 106u8, 176u8,
                            78u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An account was created with some free balance.
            pub struct Endowed {
                pub account: ::subxt::utils::AccountId32,
                pub free_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An account was removed whose balance was non-zero but below ExistentialDeposit,
            ///resulting in an outright loss.
            pub struct DustLost {
                pub account: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Transfer succeeded.
            pub struct Transfer {
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A balance was set by root.
            pub struct BalanceSet {
                pub who: ::subxt::utils::AccountId32,
                pub free: ::core::primitive::u128,
                pub reserved: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some balance was reserved (moved from free to reserved).
            pub struct Reserved {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some balance was unreserved (moved from reserved to free).
            pub struct Unreserved {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some balance was moved from the reserve of the first account to the second account.
            ///Final argument indicates the destination balance type.
            pub struct ReserveRepatriated {
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub destination_status:
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
            }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some amount was deposited (e.g. for transaction fees).
            pub struct Deposit {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some amount was withdrawn from the account (e.g. for transaction fees).
            pub struct Withdraw {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some amount was removed from the account (e.g. for misbehavior).
            pub struct Slashed {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The total units issued in the system.
                pub fn total_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "TotalIssuance",
                        vec![],
                        [
                            1u8, 206u8, 252u8, 237u8, 6u8, 30u8, 20u8, 232u8, 164u8, 115u8, 51u8,
                            156u8, 156u8, 206u8, 241u8, 187u8, 44u8, 84u8, 25u8, 164u8, 235u8,
                            20u8, 86u8, 242u8, 124u8, 23u8, 28u8, 140u8, 26u8, 73u8, 231u8, 51u8,
                        ],
                    )
                }
                /// The total units of outstanding deactivated balance in the system.
                pub fn inactive_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "InactiveIssuance",
                        vec![],
                        [
                            74u8, 203u8, 111u8, 142u8, 225u8, 104u8, 173u8, 51u8, 226u8, 12u8,
                            85u8, 135u8, 41u8, 206u8, 177u8, 238u8, 94u8, 246u8, 184u8, 250u8,
                            140u8, 213u8, 91u8, 118u8, 163u8, 111u8, 211u8, 46u8, 204u8, 160u8,
                            154u8, 21u8,
                        ],
                    )
                }
                /// The Balances pallet example of storing the balance of an account.
                ///
                /// # Example
                ///
                /// ```nocompile
                ///  impl pallet_balances::Config for Runtime {
                ///    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
                ///  }
                /// ```
                ///
                /// You can also store the balance of an account in the `System` pallet.
                ///
                /// # Example
                ///
                /// ```nocompile
                ///  impl pallet_balances::Config for Runtime {
                ///   type AccountStore = System
                ///  }
                /// ```
                ///
                /// But this comes with tradeoffs, storing account balances in the system pallet
                /// stores `frame_system` data alongside the account data contrary
                /// to storing account balances in the `Balances` pallet, which uses
                /// a `StorageMap` to store balances data only. NOTE: This is only
                /// used in the case that this pallet is used to store balances.
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
                            40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
                            217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
                        ],
                    )
                }
                /// The Balances pallet example of storing the balance of an account.
                ///
                /// # Example
                ///
                /// ```nocompile
                ///  impl pallet_balances::Config for Runtime {
                ///    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
                ///  }
                /// ```
                ///
                /// You can also store the balance of an account in the `System` pallet.
                ///
                /// # Example
                ///
                /// ```nocompile
                ///  impl pallet_balances::Config for Runtime {
                ///   type AccountStore = System
                ///  }
                /// ```
                ///
                /// But this comes with tradeoffs, storing account balances in the system pallet
                /// stores `frame_system` data alongside the account data contrary
                /// to storing account balances in the `Balances` pallet, which uses
                /// a `StorageMap` to store balances data only. NOTE: This is only
                /// used in the case that this pallet is used to store balances.
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        Vec::new(),
                        [
                            246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
                            40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
                            217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
                        ],
                    )
                }
                /// Any liquidity locks on some account balances.
                /// NOTE: Should only be accessed when setting, changing and freeing a lock.
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
                            58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
                            136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
                        ],
                    )
                }
                /// Any liquidity locks on some account balances.
                /// NOTE: Should only be accessed when setting, changing and freeing a lock.
                pub fn locks_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        Vec::new(),
                        [
                            216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
                            58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
                            136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
                        ],
                    )
                }
                /// Named reserves on some account balances.
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
                            167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
                            183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
                        ],
                    )
                }
                /// Named reserves on some account balances.
                pub fn reserves_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        Vec::new(),
                        [
                            17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
                            167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
                            183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The minimum amount required to keep an account open.
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The maximum number of locks that should exist on an account.
                /// Not strictly enforced, but used for weight estimation.
                pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of named reserves that can exist on an account.
                pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::{root_mod, runtime_types};
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion
            /// fee, has been paid by `who`.
            pub struct TransactionFeePaid {
                pub who: ::subxt::utils::AccountId32,
                pub actual_fee: ::core::primitive::u128,
                pub tip: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        vec![],
                        [
                            210u8, 0u8, 206u8, 165u8, 183u8, 10u8, 206u8, 52u8, 14u8, 90u8, 218u8,
                            197u8, 189u8, 125u8, 113u8, 216u8, 52u8, 161u8, 45u8, 24u8, 245u8,
                            237u8, 121u8, 41u8, 106u8, 29u8, 45u8, 129u8, 250u8, 203u8, 206u8,
                            180u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_transaction_payment::Releases,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "StorageVersion",
                        vec![],
                        [
                            219u8, 243u8, 82u8, 176u8, 65u8, 5u8, 132u8, 114u8, 8u8, 82u8, 176u8,
                            200u8, 97u8, 150u8, 177u8, 164u8, 166u8, 11u8, 34u8, 12u8, 12u8, 198u8,
                            58u8, 191u8, 186u8, 221u8, 221u8, 119u8, 181u8, 253u8, 154u8, 228u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// A fee mulitplier for `Operational` extrinsics to compute "virtual tip" to boost
                /// their `priority`
                ///
                /// This value is multipled by the `final_fee` to obtain a "virtual tip" that is
                /// later added to a tip component in regular `priority`
                /// calculations. It means that a `Normal` transaction can front-run
                /// a similarly-sized `Operational` extrinsic (with no tip), by
                /// including a tip value greater than the virtual tip.
                ///
                /// ```rust,ignore
                /// // For `Normal`
                /// let priority = priority_calc(tip);
                ///
                /// // For `Operational`
                /// let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;
                /// let priority = priority_calc(tip + virtual_tip);
                /// ```
                ///
                /// Note that since we use `final_fee` the multiplier applies also to the regular
                /// `tip` sent with the transaction. So, not only does the
                /// transaction get a priority bump based on the `inclusion_fee`,
                /// but we also amplify the impact of tips applied to `Operational`
                /// transactions.
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u8> {
                    ::subxt::constants::Address::new_static(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authorship {
        use super::{root_mod, runtime_types};
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Author of current block.
                pub fn author(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Authorship",
                        "Author",
                        vec![],
                        [
                            149u8, 42u8, 33u8, 147u8, 190u8, 207u8, 174u8, 227u8, 190u8, 110u8,
                            25u8, 131u8, 5u8, 167u8, 237u8, 188u8, 188u8, 33u8, 177u8, 126u8,
                            181u8, 49u8, 126u8, 118u8, 46u8, 128u8, 154u8, 95u8, 15u8, 91u8, 103u8,
                            113u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod offences {
        use super::{root_mod, runtime_types};
        ///Events type.
        pub type Event = runtime_types::pallet_offences::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///There is an offence reported of the given `kind` happened at the `session_index` and
            ///(kind-specific) time slot. This event is not deposited for duplicate slashes.
            ///\[kind, timeslot\].
            pub struct Offence {
                pub kind: [::core::primitive::u8; 16usize],
                pub timeslot: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for Offence {
                const PALLET: &'static str = "Offences";
                const EVENT: &'static str = "Offence";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The primary structure that holds all offence records keyed by report
                /// identifiers.
                pub fn reports(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_staking::offence::OffenceDetails<
                        ::subxt::utils::AccountId32,
                        (::subxt::utils::AccountId32, ()),
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "Reports",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            168u8, 5u8, 232u8, 75u8, 28u8, 231u8, 107u8, 52u8, 186u8, 140u8, 79u8,
                            242u8, 15u8, 201u8, 83u8, 78u8, 146u8, 109u8, 192u8, 106u8, 253u8,
                            106u8, 91u8, 67u8, 224u8, 69u8, 176u8, 189u8, 243u8, 46u8, 12u8, 211u8,
                        ],
                    )
                }
                /// The primary structure that holds all offence records keyed by report
                /// identifiers.
                pub fn reports_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_staking::offence::OffenceDetails<
                        ::subxt::utils::AccountId32,
                        (::subxt::utils::AccountId32, ()),
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "Reports",
                        Vec::new(),
                        [
                            168u8, 5u8, 232u8, 75u8, 28u8, 231u8, 107u8, 52u8, 186u8, 140u8, 79u8,
                            242u8, 15u8, 201u8, 83u8, 78u8, 146u8, 109u8, 192u8, 106u8, 253u8,
                            106u8, 91u8, 67u8, 224u8, 69u8, 176u8, 189u8, 243u8, 46u8, 12u8, 211u8,
                        ],
                    )
                }
                /// A vector of reports of the same kind that happened at the same time slot.
                pub fn concurrent_reports_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8; 16usize]>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::H256>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "ConcurrentReportsIndex",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            106u8, 21u8, 104u8, 5u8, 4u8, 66u8, 28u8, 70u8, 161u8, 195u8, 238u8,
                            28u8, 69u8, 241u8, 221u8, 113u8, 140u8, 103u8, 181u8, 143u8, 60u8,
                            177u8, 13u8, 129u8, 224u8, 149u8, 77u8, 32u8, 75u8, 74u8, 101u8, 65u8,
                        ],
                    )
                }
                /// A vector of reports of the same kind that happened at the same time slot.
                pub fn concurrent_reports_index_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::H256>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "ConcurrentReportsIndex",
                        Vec::new(),
                        [
                            106u8, 21u8, 104u8, 5u8, 4u8, 66u8, 28u8, 70u8, 161u8, 195u8, 238u8,
                            28u8, 69u8, 241u8, 221u8, 113u8, 140u8, 103u8, 181u8, 143u8, 60u8,
                            177u8, 13u8, 129u8, 224u8, 149u8, 77u8, 32u8, 75u8, 74u8, 101u8, 65u8,
                        ],
                    )
                }
                /// Enumerates all reports of a kind along with the time they happened.
                ///
                /// All reports are sorted by the time of offence.
                ///
                /// Note that the actual type of this mapping is `Vec<u8>`, this is because values
                /// of different types are not supported at the moment so we are
                /// doing the manual serialization.
                pub fn reports_by_kind_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8; 16usize]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "ReportsByKindIndex",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            162u8, 66u8, 131u8, 48u8, 250u8, 237u8, 179u8, 214u8, 36u8, 137u8,
                            226u8, 136u8, 120u8, 61u8, 215u8, 43u8, 164u8, 50u8, 91u8, 164u8, 20u8,
                            96u8, 189u8, 100u8, 242u8, 106u8, 21u8, 136u8, 98u8, 215u8, 180u8,
                            145u8,
                        ],
                    )
                }
                /// Enumerates all reports of a kind along with the time they happened.
                ///
                /// All reports are sorted by the time of offence.
                ///
                /// Note that the actual type of this mapping is `Vec<u8>`, this is because values
                /// of different types are not supported at the moment so we are
                /// doing the manual serialization.
                pub fn reports_by_kind_index_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "ReportsByKindIndex",
                        Vec::new(),
                        [
                            162u8, 66u8, 131u8, 48u8, 250u8, 237u8, 179u8, 214u8, 36u8, 137u8,
                            226u8, 136u8, 120u8, 61u8, 215u8, 43u8, 164u8, 50u8, 91u8, 164u8, 20u8,
                            96u8, 189u8, 100u8, 242u8, 106u8, 21u8, 136u8, 98u8, 215u8, 180u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod historical {
        use super::{root_mod, runtime_types};
    }
    pub mod mmr {
        use super::{root_mod, runtime_types};
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Latest MMR Root hash.
                pub fn root_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Mmr",
                        "RootHash",
                        vec![],
                        [
                            182u8, 163u8, 37u8, 44u8, 2u8, 163u8, 57u8, 184u8, 97u8, 55u8, 1u8,
                            116u8, 55u8, 169u8, 23u8, 221u8, 182u8, 5u8, 174u8, 217u8, 111u8, 55u8,
                            180u8, 161u8, 69u8, 120u8, 212u8, 73u8, 2u8, 1u8, 39u8, 224u8,
                        ],
                    )
                }
                /// Current size of the MMR (number of leaves).
                pub fn number_of_leaves(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Mmr",
                        "NumberOfLeaves",
                        vec![],
                        [
                            138u8, 124u8, 23u8, 186u8, 255u8, 231u8, 187u8, 122u8, 213u8, 160u8,
                            29u8, 24u8, 88u8, 98u8, 171u8, 36u8, 195u8, 216u8, 27u8, 190u8, 192u8,
                            152u8, 8u8, 13u8, 210u8, 232u8, 45u8, 184u8, 240u8, 255u8, 156u8,
                            204u8,
                        ],
                    )
                }
                /// Hashes of the nodes in the MMR.
                ///
                /// Note this collection only contains MMR peaks, the inner nodes (and leaves)
                /// are pruned and only stored in the Offchain DB.
                pub fn nodes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Mmr",
                        "Nodes",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            188u8, 148u8, 126u8, 226u8, 142u8, 91u8, 61u8, 52u8, 213u8, 36u8,
                            120u8, 232u8, 20u8, 11u8, 61u8, 1u8, 130u8, 155u8, 81u8, 34u8, 153u8,
                            149u8, 210u8, 232u8, 113u8, 242u8, 249u8, 8u8, 61u8, 51u8, 148u8, 98u8,
                        ],
                    )
                }
                /// Hashes of the nodes in the MMR.
                ///
                /// Note this collection only contains MMR peaks, the inner nodes (and leaves)
                /// are pruned and only stored in the Offchain DB.
                pub fn nodes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Mmr",
                        "Nodes",
                        Vec::new(),
                        [
                            188u8, 148u8, 126u8, 226u8, 142u8, 91u8, 61u8, 52u8, 213u8, 36u8,
                            120u8, 232u8, 20u8, 11u8, 61u8, 1u8, 130u8, 155u8, 81u8, 34u8, 153u8,
                            149u8, 210u8, 232u8, 113u8, 242u8, 249u8, 8u8, 61u8, 51u8, 148u8, 98u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod session {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetKeys {
                pub keys: runtime_types::rococo_runtime::SessionKeys,
                pub proof: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PurgeKeys;
            pub struct TransactionApi;
            impl TransactionApi {
                ///Sets the session key(s) of the function caller to `keys`.
                ///Allows an account to set its session key prior to becoming a validator.
                ///This doesn't take effect until the next session.
                ///
                ///The dispatch origin of this function must be signed.
                ///
                ///## Complexity
                /// - `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()`
                ///   which is
                ///  fixed.
                pub fn set_keys(
                    &self,
                    keys: runtime_types::rococo_runtime::SessionKeys,
                    proof: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<SetKeys> {
                    ::subxt::tx::Payload::new_static(
                        "Session",
                        "set_keys",
                        SetKeys { keys, proof },
                        [
                            82u8, 210u8, 196u8, 56u8, 158u8, 100u8, 232u8, 40u8, 165u8, 92u8, 61u8,
                            41u8, 8u8, 132u8, 75u8, 74u8, 60u8, 2u8, 2u8, 118u8, 120u8, 226u8,
                            246u8, 94u8, 224u8, 113u8, 205u8, 206u8, 194u8, 141u8, 81u8, 107u8,
                        ],
                    )
                }
                ///Removes any session key(s) of the function caller.
                ///
                ///This doesn't take effect until the next session.
                ///
                ///The dispatch origin of this function must be Signed and the account must be
                /// either be convertible to a validator ID using the chain's
                /// typical addressing system (this usually means being a controller
                /// account) or directly convertible into a validator ID (which
                /// usually means being a stash account).
                ///
                ///## Complexity
                /// - `O(1)` in number of key types. Actual cost depends on the number of length of
                ///  `T::Keys::key_ids()` which is fixed.
                pub fn purge_keys(&self) -> ::subxt::tx::Payload<PurgeKeys> {
                    ::subxt::tx::Payload::new_static(
                        "Session",
                        "purge_keys",
                        PurgeKeys {},
                        [
                            200u8, 255u8, 4u8, 213u8, 188u8, 92u8, 99u8, 116u8, 163u8, 152u8, 29u8,
                            35u8, 133u8, 119u8, 246u8, 44u8, 91u8, 31u8, 145u8, 23u8, 213u8, 64u8,
                            71u8, 242u8, 207u8, 239u8, 231u8, 37u8, 61u8, 63u8, 190u8, 35u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_session::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///New session has happened. Note that the argument is the session index, not the
            ///block number as the type might suggest.
            pub struct NewSession {
                pub session_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NewSession {
                const PALLET: &'static str = "Session";
                const EVENT: &'static str = "NewSession";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The current set of validators.
                pub fn validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "Validators",
                        vec![],
                        [
                            144u8, 235u8, 200u8, 43u8, 151u8, 57u8, 147u8, 172u8, 201u8, 202u8,
                            242u8, 96u8, 57u8, 76u8, 124u8, 77u8, 42u8, 113u8, 218u8, 220u8, 230u8,
                            32u8, 151u8, 152u8, 172u8, 106u8, 60u8, 227u8, 122u8, 118u8, 137u8,
                            68u8,
                        ],
                    )
                }
                /// Current index of the session.
                pub fn current_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "CurrentIndex",
                        vec![],
                        [
                            148u8, 179u8, 159u8, 15u8, 197u8, 95u8, 214u8, 30u8, 209u8, 251u8,
                            183u8, 231u8, 91u8, 25u8, 181u8, 191u8, 143u8, 252u8, 227u8, 80u8,
                            159u8, 66u8, 194u8, 67u8, 113u8, 74u8, 111u8, 91u8, 218u8, 187u8,
                            130u8, 40u8,
                        ],
                    )
                }
                /// True if the underlying economic identities or weighting behind the validators
                /// has changed in the queued validator set.
                pub fn queued_changed(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "QueuedChanged",
                        vec![],
                        [
                            105u8, 140u8, 235u8, 218u8, 96u8, 100u8, 252u8, 10u8, 58u8, 221u8,
                            244u8, 251u8, 67u8, 91u8, 80u8, 202u8, 152u8, 42u8, 50u8, 113u8, 200u8,
                            247u8, 59u8, 213u8, 77u8, 195u8, 1u8, 150u8, 220u8, 18u8, 245u8, 46u8,
                        ],
                    )
                }
                /// The queued keys for the next session. When the next session begins, these keys
                /// will be used to determine the validator's session keys.
                pub fn queued_keys(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        runtime_types::rococo_runtime::SessionKeys,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "QueuedKeys",
                        vec![],
                        [
                            213u8, 10u8, 195u8, 77u8, 112u8, 45u8, 17u8, 136u8, 7u8, 229u8, 215u8,
                            96u8, 119u8, 171u8, 255u8, 104u8, 136u8, 61u8, 63u8, 2u8, 208u8, 203u8,
                            34u8, 50u8, 159u8, 176u8, 229u8, 2u8, 147u8, 232u8, 211u8, 198u8,
                        ],
                    )
                }
                /// Indices of disabled validators.
                ///
                /// The vec is always kept sorted so that we can find whether a given validator is
                /// disabled using binary search. It gets cleared when `on_session_ending` returns
                /// a new set of identities.
                pub fn disabled_validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "DisabledValidators",
                        vec![],
                        [
                            135u8, 22u8, 22u8, 97u8, 82u8, 217u8, 144u8, 141u8, 121u8, 240u8,
                            189u8, 16u8, 176u8, 88u8, 177u8, 31u8, 20u8, 242u8, 73u8, 104u8, 11u8,
                            110u8, 214u8, 34u8, 52u8, 217u8, 106u8, 33u8, 174u8, 174u8, 198u8,
                            84u8,
                        ],
                    )
                }
                /// The next session keys for a validator.
                pub fn next_keys(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::rococo_runtime::SessionKeys,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "NextKeys",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            126u8, 73u8, 196u8, 89u8, 165u8, 118u8, 39u8, 112u8, 201u8, 255u8,
                            82u8, 77u8, 139u8, 172u8, 158u8, 193u8, 53u8, 153u8, 133u8, 238u8,
                            255u8, 209u8, 222u8, 33u8, 194u8, 201u8, 94u8, 23u8, 197u8, 38u8,
                            145u8, 217u8,
                        ],
                    )
                }
                /// The next session keys for a validator.
                pub fn next_keys_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::rococo_runtime::SessionKeys,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "NextKeys",
                        Vec::new(),
                        [
                            126u8, 73u8, 196u8, 89u8, 165u8, 118u8, 39u8, 112u8, 201u8, 255u8,
                            82u8, 77u8, 139u8, 172u8, 158u8, 193u8, 53u8, 153u8, 133u8, 238u8,
                            255u8, 209u8, 222u8, 33u8, 194u8, 201u8, 94u8, 23u8, 197u8, 38u8,
                            145u8, 217u8,
                        ],
                    )
                }
                /// The owner of a key. The key is the `KeyTypeId` + the encoded key.
                pub fn key_owner(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::sp_core::crypto::KeyTypeId>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            4u8, 91u8, 25u8, 84u8, 250u8, 201u8, 174u8, 129u8, 201u8, 58u8, 197u8,
                            199u8, 137u8, 240u8, 118u8, 33u8, 99u8, 2u8, 195u8, 57u8, 53u8, 172u8,
                            0u8, 148u8, 203u8, 144u8, 149u8, 64u8, 135u8, 254u8, 242u8, 215u8,
                        ],
                    )
                }
                /// The owner of a key. The key is the `KeyTypeId` + the encoded key.
                pub fn key_owner_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        Vec::new(),
                        [
                            4u8, 91u8, 25u8, 84u8, 250u8, 201u8, 174u8, 129u8, 201u8, 58u8, 197u8,
                            199u8, 137u8, 240u8, 118u8, 33u8, 99u8, 2u8, 195u8, 57u8, 53u8, 172u8,
                            0u8, 148u8, 203u8, 144u8, 149u8, 64u8, 135u8, 254u8, 242u8, 215u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod grandpa {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReportEquivocation {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_grandpa::EquivocationProof<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReportEquivocationUnsigned {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_grandpa::EquivocationProof<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NoteStalled {
                pub delay: ::core::primitive::u32,
                pub best_finalized_block_number: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Report voter equivocation/misbehavior. This method will verify the
                ///equivocation proof and validate the given key ownership proof
                ///against the extracted offender. If both are valid, the offence
                ///will be reported.
                pub fn report_equivocation(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_grandpa::EquivocationProof<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<ReportEquivocation> {
                    ::subxt::tx::Payload::new_static(
                        "Grandpa",
                        "report_equivocation",
                        ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            156u8, 162u8, 189u8, 89u8, 60u8, 156u8, 129u8, 176u8, 62u8, 35u8,
                            214u8, 7u8, 68u8, 245u8, 130u8, 117u8, 30u8, 3u8, 73u8, 218u8, 142u8,
                            82u8, 13u8, 141u8, 124u8, 19u8, 53u8, 138u8, 70u8, 4u8, 40u8, 32u8,
                        ],
                    )
                }
                ///Report voter equivocation/misbehavior. This method will verify the
                ///equivocation proof and validate the given key ownership proof
                ///against the extracted offender. If both are valid, the offence
                ///will be reported.
                ///
                ///This extrinsic must be called unsigned and it is expected that only
                ///block authors will call it (validated in `ValidateUnsigned`), as such
                ///if the block author is defined it will be defined as the equivocation
                ///reporter.
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_grandpa::EquivocationProof<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<ReportEquivocationUnsigned> {
                    ::subxt::tx::Payload::new_static(
                        "Grandpa",
                        "report_equivocation_unsigned",
                        ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            166u8, 26u8, 217u8, 185u8, 215u8, 37u8, 174u8, 170u8, 137u8, 160u8,
                            151u8, 43u8, 246u8, 86u8, 58u8, 18u8, 248u8, 73u8, 99u8, 161u8, 158u8,
                            93u8, 212u8, 186u8, 224u8, 253u8, 234u8, 18u8, 151u8, 111u8, 227u8,
                            249u8,
                        ],
                    )
                }
                ///Note that the current authority set of the GRANDPA finality gadget has stalled.
                ///
                ///This will trigger a forced authority set change at the beginning of the next
                /// session, to be enacted `delay` blocks after that. The `delay`
                /// should be high enough to safely assume that the block signalling
                /// the forced change will not be re-orged e.g. 1000 blocks.
                /// The block production rate (which may be slowed down because of finality lagging)
                /// should be taken into account when choosing the `delay`. The
                /// GRANDPA voters based on the new authority will start voting on
                /// top of `best_finalized_block_number` for new finalized
                /// blocks. `best_finalized_block_number` should be the highest of the latest
                /// finalized block of all validators of the new authority set.
                ///
                ///Only callable by root.
                pub fn note_stalled(
                    &self,
                    delay: ::core::primitive::u32,
                    best_finalized_block_number: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<NoteStalled> {
                    ::subxt::tx::Payload::new_static(
                        "Grandpa",
                        "note_stalled",
                        NoteStalled { delay, best_finalized_block_number },
                        [
                            197u8, 236u8, 137u8, 32u8, 46u8, 200u8, 144u8, 13u8, 89u8, 181u8,
                            235u8, 73u8, 167u8, 131u8, 174u8, 93u8, 42u8, 136u8, 238u8, 59u8,
                            129u8, 60u8, 83u8, 100u8, 5u8, 182u8, 99u8, 250u8, 145u8, 180u8, 1u8,
                            199u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_grandpa::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///New authority set has been applied.
            pub struct NewAuthorities {
                pub authority_set: ::std::vec::Vec<(
                    runtime_types::sp_consensus_grandpa::app::Public,
                    ::core::primitive::u64,
                )>,
            }
            impl ::subxt::events::StaticEvent for NewAuthorities {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "NewAuthorities";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Current authority set has been paused.
            pub struct Paused;
            impl ::subxt::events::StaticEvent for Paused {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Paused";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Current authority set has been resumed.
            pub struct Resumed;
            impl ::subxt::events::StaticEvent for Resumed {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Resumed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// State of the current authority set.
                pub fn state(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "State",
                        vec![],
                        [
                            211u8, 149u8, 114u8, 217u8, 206u8, 194u8, 115u8, 67u8, 12u8, 218u8,
                            246u8, 213u8, 208u8, 29u8, 216u8, 104u8, 2u8, 39u8, 123u8, 172u8,
                            252u8, 210u8, 52u8, 129u8, 147u8, 237u8, 244u8, 68u8, 252u8, 169u8,
                            97u8, 148u8,
                        ],
                    )
                }
                /// Pending change: (signaled at, scheduled change).
                pub fn pending_change(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_grandpa::StoredPendingChange<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "PendingChange",
                        vec![],
                        [
                            178u8, 24u8, 140u8, 7u8, 8u8, 196u8, 18u8, 58u8, 3u8, 226u8, 181u8,
                            47u8, 155u8, 160u8, 70u8, 12u8, 75u8, 189u8, 38u8, 255u8, 104u8, 141u8,
                            64u8, 34u8, 134u8, 201u8, 102u8, 21u8, 75u8, 81u8, 218u8, 60u8,
                        ],
                    )
                }
                /// next block number where we can force a change.
                pub fn next_forced(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "NextForced",
                        vec![],
                        [
                            99u8, 43u8, 245u8, 201u8, 60u8, 9u8, 122u8, 99u8, 188u8, 29u8, 67u8,
                            6u8, 193u8, 133u8, 179u8, 67u8, 202u8, 208u8, 62u8, 179u8, 19u8, 169u8,
                            196u8, 119u8, 107u8, 75u8, 100u8, 3u8, 121u8, 18u8, 80u8, 156u8,
                        ],
                    )
                }
                /// `true` if we are currently stalled.
                pub fn stalled(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "Stalled",
                        vec![],
                        [
                            219u8, 8u8, 37u8, 78u8, 150u8, 55u8, 0u8, 57u8, 201u8, 170u8, 186u8,
                            189u8, 56u8, 161u8, 44u8, 15u8, 53u8, 178u8, 224u8, 208u8, 231u8,
                            109u8, 14u8, 209u8, 57u8, 205u8, 237u8, 153u8, 231u8, 156u8, 24u8,
                            185u8,
                        ],
                    )
                }
                /// The number of changes (both in terms of keys and underlying economic
                /// responsibilities) in the "set" of Grandpa validators from
                /// genesis.
                pub fn current_set_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "CurrentSetId",
                        vec![],
                        [
                            129u8, 7u8, 62u8, 101u8, 199u8, 60u8, 56u8, 33u8, 54u8, 158u8, 20u8,
                            178u8, 244u8, 145u8, 189u8, 197u8, 157u8, 163u8, 116u8, 36u8, 105u8,
                            52u8, 149u8, 244u8, 108u8, 94u8, 109u8, 111u8, 244u8, 137u8, 7u8,
                            108u8,
                        ],
                    )
                }
                /// A mapping from grandpa set ID to the index of the *most recent* session for
                /// which its members were responsible.
                ///
                /// This is only used for validating equivocation proofs. An equivocation proof must
                /// contains a key-ownership proof for a given session, therefore we need a way to
                /// tie together sessions and GRANDPA set ids, i.e. we need to
                /// validate that a validator was the owner of a given key on a
                /// given session, and what the active set ID was during that
                /// session.
                ///
                /// TWOX-NOTE: `SetId` is not under user control.
                pub fn set_id_session(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "SetIdSession",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
                            166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
                            108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8,
                            134u8,
                        ],
                    )
                }
                /// A mapping from grandpa set ID to the index of the *most recent* session for
                /// which its members were responsible.
                ///
                /// This is only used for validating equivocation proofs. An equivocation proof must
                /// contains a key-ownership proof for a given session, therefore we need a way to
                /// tie together sessions and GRANDPA set ids, i.e. we need to
                /// validate that a validator was the owner of a given key on a
                /// given session, and what the active set ID was during that
                /// session.
                ///
                /// TWOX-NOTE: `SetId` is not under user control.
                pub fn set_id_session_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "SetIdSession",
                        Vec::new(),
                        [
                            91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
                            166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
                            108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8,
                            134u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// Max Authorities in use
                pub fn max_authorities(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Grandpa",
                        "MaxAuthorities",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of entries to keep in the set id to session index mapping.
                ///
                /// Since the `SetIdSession` map is only used for validating equivocations this
                /// value should relate to the bonding duration of whatever staking system is
                /// being used (if any). If equivocation handling is not enabled then this value
                /// can be zero.
                pub fn max_set_id_session_entries(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Grandpa",
                        "MaxSetIdSessionEntries",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod im_online {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Heartbeat {
                pub heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
                pub signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///## Complexity:
                /// - `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is
                ///   length of
                ///  `heartbeat.network_state.external_address`
                ///  - `O(K)`: decoding of length `K`
                ///  - `O(E)`: decoding/encoding of length `E`
                pub fn heartbeat(
                    &self,
                    heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
                    signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
                ) -> ::subxt::tx::Payload<Heartbeat> {
                    ::subxt::tx::Payload::new_static(
                        "ImOnline",
                        "heartbeat",
                        Heartbeat { heartbeat, signature },
                        [
                            212u8, 23u8, 174u8, 246u8, 60u8, 220u8, 178u8, 137u8, 53u8, 146u8,
                            165u8, 225u8, 179u8, 209u8, 233u8, 152u8, 129u8, 210u8, 126u8, 32u8,
                            216u8, 22u8, 76u8, 196u8, 255u8, 128u8, 246u8, 161u8, 30u8, 186u8,
                            249u8, 34u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_im_online::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new heartbeat was received from `AuthorityId`.
            pub struct HeartbeatReceived {
                pub authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
            }
            impl ::subxt::events::StaticEvent for HeartbeatReceived {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "HeartbeatReceived";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///At the end of the session, no offence was committed.
            pub struct AllGood;
            impl ::subxt::events::StaticEvent for AllGood {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "AllGood";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///At the end of the session, at least one validator was found to be offline.
            pub struct SomeOffline {
                pub offline: ::std::vec::Vec<(::subxt::utils::AccountId32, ())>,
            }
            impl ::subxt::events::StaticEvent for SomeOffline {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "SomeOffline";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The block number after which it's ok to send heartbeats in the current
                /// session.
                ///
                /// At the beginning of each session we set this to a value that should fall
                /// roughly in the middle of the session duration. The idea is to first wait for
                /// the validators to produce a block in the current session, so that the
                /// heartbeat later on will not be necessary.
                ///
                /// This value will only be used as a fallback if we fail to get a proper session
                /// progress estimate from `NextSessionRotation`, as those estimates should be
                /// more accurate then the value we calculate for `HeartbeatAfter`.
                pub fn heartbeat_after(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "HeartbeatAfter",
                        vec![],
                        [
                            108u8, 100u8, 85u8, 198u8, 226u8, 122u8, 94u8, 225u8, 97u8, 154u8,
                            135u8, 95u8, 106u8, 28u8, 185u8, 78u8, 192u8, 196u8, 35u8, 191u8, 12u8,
                            19u8, 163u8, 46u8, 232u8, 235u8, 193u8, 81u8, 126u8, 204u8, 25u8,
                            228u8,
                        ],
                    )
                }
                /// The current set of keys that may issue a heartbeat.
                pub fn keys(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "Keys",
                        vec![],
                        [
                            6u8, 198u8, 221u8, 58u8, 14u8, 166u8, 245u8, 103u8, 191u8, 20u8, 69u8,
                            233u8, 147u8, 245u8, 24u8, 64u8, 207u8, 180u8, 39u8, 208u8, 252u8,
                            236u8, 247u8, 112u8, 187u8, 97u8, 70u8, 11u8, 248u8, 148u8, 208u8,
                            106u8,
                        ],
                    )
                }
                /// For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to
                /// `WrapperOpaque<BoundedOpaqueNetworkState>`.
                pub fn received_heartbeats(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_support::traits::misc::WrapperOpaque<
                        runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "ReceivedHeartbeats",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            233u8, 128u8, 140u8, 233u8, 55u8, 146u8, 172u8, 54u8, 54u8, 57u8,
                            141u8, 106u8, 168u8, 59u8, 147u8, 253u8, 119u8, 48u8, 50u8, 251u8,
                            242u8, 109u8, 251u8, 2u8, 136u8, 80u8, 146u8, 121u8, 180u8, 219u8,
                            245u8, 37u8,
                        ],
                    )
                }
                /// For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to
                /// `WrapperOpaque<BoundedOpaqueNetworkState>`.
                pub fn received_heartbeats_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_support::traits::misc::WrapperOpaque<
                        runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "ReceivedHeartbeats",
                        Vec::new(),
                        [
                            233u8, 128u8, 140u8, 233u8, 55u8, 146u8, 172u8, 54u8, 54u8, 57u8,
                            141u8, 106u8, 168u8, 59u8, 147u8, 253u8, 119u8, 48u8, 50u8, 251u8,
                            242u8, 109u8, 251u8, 2u8, 136u8, 80u8, 146u8, 121u8, 180u8, 219u8,
                            245u8, 37u8,
                        ],
                    )
                }
                /// For each session index, we keep a mapping of `ValidatorId<T>` to the
                /// number of blocks authored by the given authority.
                pub fn authored_blocks(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "AuthoredBlocks",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            50u8, 4u8, 242u8, 240u8, 247u8, 184u8, 114u8, 245u8, 233u8, 170u8,
                            24u8, 197u8, 18u8, 245u8, 8u8, 28u8, 33u8, 115u8, 166u8, 245u8, 221u8,
                            223u8, 56u8, 144u8, 33u8, 139u8, 10u8, 227u8, 228u8, 223u8, 103u8,
                            151u8,
                        ],
                    )
                }
                /// For each session index, we keep a mapping of `ValidatorId<T>` to the
                /// number of blocks authored by the given authority.
                pub fn authored_blocks_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "AuthoredBlocks",
                        Vec::new(),
                        [
                            50u8, 4u8, 242u8, 240u8, 247u8, 184u8, 114u8, 245u8, 233u8, 170u8,
                            24u8, 197u8, 18u8, 245u8, 8u8, 28u8, 33u8, 115u8, 166u8, 245u8, 221u8,
                            223u8, 56u8, 144u8, 33u8, 139u8, 10u8, 227u8, 228u8, 223u8, 103u8,
                            151u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// A configuration for base priority of unsigned transactions.
                ///
                /// This is exposed so that it can be tuned for particular runtime, when
                /// multiple pallets send unsigned transactions.
                pub fn unsigned_priority(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "ImOnline",
                        "UnsignedPriority",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authority_discovery {
        use super::{root_mod, runtime_types};
    }
    pub mod democracy {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Propose {
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::rococo_runtime::RuntimeCall,
                >,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Second {
                #[codec(compact)]
                pub proposal: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Vote {
                #[codec(compact)]
                pub ref_index: ::core::primitive::u32,
                pub vote:
                    runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EmergencyCancel {
                pub ref_index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExternalPropose {
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::rococo_runtime::RuntimeCall,
                >,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExternalProposeMajority {
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::rococo_runtime::RuntimeCall,
                >,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExternalProposeDefault {
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::rococo_runtime::RuntimeCall,
                >,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FastTrack {
                pub proposal_hash: ::subxt::utils::H256,
                pub voting_period: ::core::primitive::u32,
                pub delay: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VetoExternal {
                pub proposal_hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CancelReferendum {
                #[codec(compact)]
                pub ref_index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Delegate {
                pub to: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub conviction: runtime_types::pallet_democracy::conviction::Conviction,
                pub balance: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Undelegate;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ClearPublicProposals;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Unlock {
                pub target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveVote {
                pub index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveOtherVote {
                pub target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Blacklist {
                pub proposal_hash: ::subxt::utils::H256,
                pub maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CancelProposal {
                #[codec(compact)]
                pub prop_index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMetadata {
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub maybe_hash: ::core::option::Option<::subxt::utils::H256>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Propose a sensitive action to be taken.
                ///
                ///The dispatch origin of this call must be _Signed_ and the sender must
                ///have funds to cover the deposit.
                ///
                /// - `proposal_hash`: The hash of the proposal preimage.
                /// - `value`: The amount of deposit (must be at least `MinimumDeposit`).
                ///
                ///Emits `Proposed`.
                pub fn propose(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::rococo_runtime::RuntimeCall,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<Propose> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "propose",
                        Propose { proposal, value },
                        [
                            123u8, 3u8, 204u8, 140u8, 194u8, 195u8, 214u8, 39u8, 167u8, 126u8,
                            45u8, 4u8, 219u8, 17u8, 143u8, 185u8, 29u8, 224u8, 230u8, 68u8, 253u8,
                            15u8, 170u8, 90u8, 232u8, 123u8, 46u8, 255u8, 168u8, 39u8, 204u8, 63u8,
                        ],
                    )
                }
                ///Signals agreement with a particular proposal.
                ///
                ///The dispatch origin of this call must be _Signed_ and the sender
                ///must have funds to cover the deposit, equal to the original deposit.
                ///
                /// - `proposal`: The index of the proposal to second.
                pub fn second(
                    &self,
                    proposal: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Second> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "second",
                        Second { proposal },
                        [
                            59u8, 240u8, 183u8, 218u8, 61u8, 93u8, 184u8, 67u8, 10u8, 4u8, 138u8,
                            196u8, 168u8, 49u8, 42u8, 69u8, 154u8, 42u8, 90u8, 112u8, 179u8, 69u8,
                            51u8, 148u8, 159u8, 212u8, 221u8, 226u8, 132u8, 228u8, 51u8, 83u8,
                        ],
                    )
                }
                ///Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;
                ///otherwise it is a vote to keep the status quo.
                ///
                ///The dispatch origin of this call must be _Signed_.
                ///
                /// - `ref_index`: The index of the referendum to vote for.
                /// - `vote`: The vote configuration.
                pub fn vote(
                    &self,
                    ref_index: ::core::primitive::u32,
                    vote: runtime_types::pallet_democracy::vote::AccountVote<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::Payload<Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "vote",
                        Vote { ref_index, vote },
                        [
                            138u8, 213u8, 229u8, 111u8, 1u8, 191u8, 73u8, 3u8, 145u8, 28u8, 44u8,
                            88u8, 163u8, 188u8, 129u8, 188u8, 64u8, 15u8, 64u8, 103u8, 250u8, 97u8,
                            234u8, 188u8, 29u8, 205u8, 51u8, 6u8, 116u8, 58u8, 156u8, 201u8,
                        ],
                    )
                }
                ///Schedule an emergency cancellation of a referendum. Cannot happen twice to the
                /// same referendum.
                ///
                ///The dispatch origin of this call must be `CancellationOrigin`.
                ///
                ///-`ref_index`: The index of the referendum to cancel.
                ///
                ///Weight: `O(1)`.
                pub fn emergency_cancel(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<EmergencyCancel> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "emergency_cancel",
                        EmergencyCancel { ref_index },
                        [
                            139u8, 213u8, 133u8, 75u8, 34u8, 206u8, 124u8, 245u8, 35u8, 237u8,
                            132u8, 92u8, 49u8, 167u8, 117u8, 80u8, 188u8, 93u8, 198u8, 237u8,
                            132u8, 77u8, 195u8, 65u8, 29u8, 37u8, 86u8, 74u8, 214u8, 119u8, 71u8,
                            204u8,
                        ],
                    )
                }
                ///Schedule a referendum to be tabled once it is legal to schedule an external
                ///referendum.
                ///
                ///The dispatch origin of this call must be `ExternalOrigin`.
                ///
                /// - `proposal_hash`: The preimage hash of the proposal.
                pub fn external_propose(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::rococo_runtime::RuntimeCall,
                    >,
                ) -> ::subxt::tx::Payload<ExternalPropose> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "external_propose",
                        ExternalPropose { proposal },
                        [
                            164u8, 193u8, 14u8, 122u8, 105u8, 232u8, 20u8, 194u8, 99u8, 227u8,
                            36u8, 105u8, 218u8, 146u8, 16u8, 208u8, 56u8, 62u8, 100u8, 65u8, 35u8,
                            33u8, 51u8, 208u8, 17u8, 43u8, 223u8, 198u8, 202u8, 16u8, 56u8, 75u8,
                        ],
                    )
                }
                ///Schedule a majority-carries referendum to be tabled next once it is legal to
                /// schedule an external referendum.
                ///
                ///The dispatch of this call must be `ExternalMajorityOrigin`.
                ///
                /// - `proposal_hash`: The preimage hash of the proposal.
                ///
                ///Unlike `external_propose`, blacklisting has no effect on this and it may replace
                /// a pre-scheduled `external_propose` call.
                ///
                ///Weight: `O(1)`
                pub fn external_propose_majority(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::rococo_runtime::RuntimeCall,
                    >,
                ) -> ::subxt::tx::Payload<ExternalProposeMajority> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "external_propose_majority",
                        ExternalProposeMajority { proposal },
                        [
                            129u8, 124u8, 147u8, 253u8, 69u8, 115u8, 230u8, 186u8, 155u8, 4u8,
                            220u8, 103u8, 28u8, 132u8, 115u8, 153u8, 196u8, 88u8, 9u8, 130u8,
                            129u8, 234u8, 75u8, 96u8, 202u8, 216u8, 145u8, 189u8, 231u8, 101u8,
                            127u8, 11u8,
                        ],
                    )
                }
                ///Schedule a negative-turnout-bias referendum to be tabled next once it is legal
                /// to schedule an external referendum.
                ///
                ///The dispatch of this call must be `ExternalDefaultOrigin`.
                ///
                /// - `proposal_hash`: The preimage hash of the proposal.
                ///
                ///Unlike `external_propose`, blacklisting has no effect on this and it may replace
                /// a pre-scheduled `external_propose` call.
                ///
                ///Weight: `O(1)`
                pub fn external_propose_default(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::rococo_runtime::RuntimeCall,
                    >,
                ) -> ::subxt::tx::Payload<ExternalProposeDefault> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "external_propose_default",
                        ExternalProposeDefault { proposal },
                        [
                            96u8, 15u8, 108u8, 208u8, 141u8, 247u8, 4u8, 73u8, 2u8, 30u8, 231u8,
                            40u8, 184u8, 250u8, 42u8, 161u8, 248u8, 45u8, 217u8, 50u8, 53u8, 13u8,
                            181u8, 214u8, 136u8, 51u8, 93u8, 95u8, 165u8, 3u8, 83u8, 190u8,
                        ],
                    )
                }
                ///Schedule the currently externally-proposed majority-carries referendum to be
                /// tabled immediately. If there is no externally-proposed
                /// referendum currently, or if there is one but it is not a
                /// majority-carries referendum then it fails.
                ///
                ///The dispatch of this call must be `FastTrackOrigin`.
                ///
                /// - `proposal_hash`: The hash of the current external proposal.
                /// - `voting_period`: The period that is allowed for voting on this proposal.
                ///   Increased to
                ///	Must be always greater than zero.
                ///	For `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.
                /// - `delay`: The number of block after voting has ended in approval and this
                ///   should be
                ///  enacted. This doesn't have a minimum amount.
                ///
                ///Emits `Started`.
                ///
                ///Weight: `O(1)`
                pub fn fast_track(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    voting_period: ::core::primitive::u32,
                    delay: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<FastTrack> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "fast_track",
                        FastTrack { proposal_hash, voting_period, delay },
                        [
                            125u8, 209u8, 107u8, 120u8, 93u8, 205u8, 129u8, 147u8, 254u8, 126u8,
                            45u8, 126u8, 39u8, 0u8, 56u8, 14u8, 233u8, 49u8, 245u8, 220u8, 156u8,
                            10u8, 252u8, 31u8, 102u8, 90u8, 163u8, 236u8, 178u8, 85u8, 13u8, 24u8,
                        ],
                    )
                }
                ///Veto and blacklist the external proposal hash.
                ///
                ///The dispatch origin of this call must be `VetoOrigin`.
                ///
                /// - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.
                ///
                ///Emits `Vetoed`.
                ///
                ///Weight: `O(V + log(V))` where V is number of `existing vetoers`
                pub fn veto_external(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<VetoExternal> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "veto_external",
                        VetoExternal { proposal_hash },
                        [
                            209u8, 18u8, 18u8, 103u8, 186u8, 160u8, 214u8, 124u8, 150u8, 207u8,
                            112u8, 90u8, 84u8, 197u8, 95u8, 157u8, 165u8, 65u8, 109u8, 101u8, 75u8,
                            201u8, 41u8, 149u8, 75u8, 154u8, 37u8, 178u8, 239u8, 121u8, 124u8,
                            23u8,
                        ],
                    )
                }
                ///Remove a referendum.
                ///
                ///The dispatch origin of this call must be _Root_.
                ///
                /// - `ref_index`: The index of the referendum to cancel.
                ///
                ///# Weight: `O(1)`.
                pub fn cancel_referendum(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<CancelReferendum> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "cancel_referendum",
                        CancelReferendum { ref_index },
                        [
                            51u8, 25u8, 25u8, 251u8, 236u8, 115u8, 130u8, 230u8, 72u8, 186u8,
                            119u8, 71u8, 165u8, 137u8, 55u8, 167u8, 187u8, 128u8, 55u8, 8u8, 212u8,
                            139u8, 245u8, 232u8, 103u8, 136u8, 229u8, 113u8, 125u8, 36u8, 1u8,
                            149u8,
                        ],
                    )
                }
                ///Delegate the voting power (with some given conviction) of the sending account.
                ///
                ///The balance delegated is locked for as long as it's delegated, and thereafter
                /// for the time appropriate for the conviction's lock period.
                ///
                ///The dispatch origin of this call must be _Signed_, and the signing account must
                /// either:
                ///  - be delegating already; or
                ///  - have no voting activity (if there is, then it will need to be
                ///    removed/consolidated through `reap_vote` or `unvote`).
                ///
                /// - `to`: The account whose voting the `target` account's voting power will
                ///   follow.
                /// - `conviction`: The conviction that will be attached to the delegated votes.
                ///   When the
                ///  account is undelegated, the funds will be locked for the corresponding period.
                /// - `balance`: The amount of the account's balance to be used in delegating. This
                ///   must not
                ///  be more than the account's current balance.
                ///
                ///Emits `Delegated`.
                ///
                ///Weight: `O(R)` where R is the number of referendums the voter delegating to has
                ///  voted on. Weight is charged as if maximum votes.
                pub fn delegate(
                    &self,
                    to: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    conviction: runtime_types::pallet_democracy::conviction::Conviction,
                    balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<Delegate> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "delegate",
                        Delegate { to, conviction, balance },
                        [
                            22u8, 205u8, 202u8, 196u8, 63u8, 1u8, 196u8, 109u8, 4u8, 190u8, 38u8,
                            142u8, 248u8, 200u8, 136u8, 12u8, 194u8, 170u8, 237u8, 176u8, 70u8,
                            21u8, 112u8, 154u8, 93u8, 169u8, 211u8, 120u8, 156u8, 68u8, 14u8,
                            231u8,
                        ],
                    )
                }
                ///Undelegate the voting power of the sending account.
                ///
                ///Tokens may be unlocked following once an amount of time consistent with the lock
                /// period of the conviction with which the delegation was issued.
                ///
                ///The dispatch origin of this call must be _Signed_ and the signing account must
                /// be currently delegating.
                ///
                ///Emits `Undelegated`.
                ///
                ///Weight: `O(R)` where R is the number of referendums the voter delegating to has
                ///  voted on. Weight is charged as if maximum votes.
                pub fn undelegate(&self) -> ::subxt::tx::Payload<Undelegate> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "undelegate",
                        Undelegate {},
                        [
                            165u8, 40u8, 183u8, 209u8, 57u8, 153u8, 111u8, 29u8, 114u8, 109u8,
                            107u8, 235u8, 97u8, 61u8, 53u8, 155u8, 44u8, 245u8, 28u8, 220u8, 56u8,
                            134u8, 43u8, 122u8, 248u8, 156u8, 191u8, 154u8, 4u8, 121u8, 152u8,
                            153u8,
                        ],
                    )
                }
                ///Clears all public proposals.
                ///
                ///The dispatch origin of this call must be _Root_.
                ///
                ///Weight: `O(1)`.
                pub fn clear_public_proposals(&self) -> ::subxt::tx::Payload<ClearPublicProposals> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "clear_public_proposals",
                        ClearPublicProposals {},
                        [
                            59u8, 126u8, 254u8, 223u8, 252u8, 225u8, 75u8, 185u8, 188u8, 181u8,
                            42u8, 179u8, 211u8, 73u8, 12u8, 141u8, 243u8, 197u8, 46u8, 130u8,
                            215u8, 196u8, 225u8, 88u8, 48u8, 199u8, 231u8, 249u8, 195u8, 53u8,
                            184u8, 204u8,
                        ],
                    )
                }
                ///Unlock tokens that have an expired lock.
                ///
                ///The dispatch origin of this call must be _Signed_.
                ///
                /// - `target`: The account to remove the lock on.
                ///
                ///Weight: `O(R)` with R number of vote of target.
                pub fn unlock(
                    &self,
                    target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<Unlock> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "unlock",
                        Unlock { target },
                        [
                            126u8, 151u8, 230u8, 89u8, 49u8, 247u8, 242u8, 139u8, 190u8, 15u8,
                            47u8, 2u8, 132u8, 165u8, 48u8, 205u8, 196u8, 66u8, 230u8, 222u8, 164u8,
                            249u8, 152u8, 107u8, 0u8, 99u8, 238u8, 167u8, 72u8, 77u8, 145u8, 236u8,
                        ],
                    )
                }
                ///Remove a vote for a referendum.
                ///
                ///If:
                /// - the referendum was cancelled, or
                /// - the referendum is ongoing, or
                /// - the referendum has ended such that
                ///  - the vote of the account was in opposition to the result; or
                ///  - there was no conviction to the account's vote; or
                ///  - the account made a split vote
                ///...then the vote is removed cleanly and a following call to `unlock` may result
                /// in more funds being available.
                ///
                ///If, however, the referendum has ended and:
                /// - it finished corresponding to the vote of the account, and
                /// - the account made a standard vote with conviction, and
                /// - the lock period of the conviction is not over
                ///...then the lock will be aggregated into the overall account's lock, which may
                /// involve *overlocking* (where the two locks are combined into a
                /// single lock that is the maximum of both the amount locked and
                /// the time is it locked for).
                ///
                ///The dispatch origin of this call must be _Signed_, and the signer must have a
                /// vote registered for referendum `index`.
                ///
                /// - `index`: The index of referendum of the vote to be removed.
                ///
                ///Weight: `O(R + log R)` where R is the number of referenda that `target` has
                /// voted on.  Weight is calculated for the maximum number of vote.
                pub fn remove_vote(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<RemoveVote> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "remove_vote",
                        RemoveVote { index },
                        [
                            148u8, 120u8, 14u8, 172u8, 81u8, 152u8, 159u8, 178u8, 106u8, 244u8,
                            36u8, 98u8, 120u8, 189u8, 213u8, 93u8, 119u8, 156u8, 112u8, 34u8,
                            241u8, 72u8, 206u8, 113u8, 212u8, 161u8, 164u8, 126u8, 122u8, 82u8,
                            160u8, 74u8,
                        ],
                    )
                }
                ///Remove a vote for a referendum.
                ///
                ///If the `target` is equal to the signer, then this function is exactly equivalent
                /// to `remove_vote`. If not equal to the signer, then the vote must
                /// have expired, either because the referendum was cancelled,
                /// because the voter lost the referendum or because the conviction
                /// period is over.
                ///
                ///The dispatch origin of this call must be _Signed_.
                ///
                /// - `target`: The account of the vote to be removed; this account must have voted
                ///   for
                ///  referendum `index`.
                /// - `index`: The index of referendum of the vote to be removed.
                ///
                ///Weight: `O(R + log R)` where R is the number of referenda that `target` has
                /// voted on.  Weight is calculated for the maximum number of vote.
                pub fn remove_other_vote(
                    &self,
                    target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<RemoveOtherVote> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "remove_other_vote",
                        RemoveOtherVote { target, index },
                        [
                            151u8, 190u8, 115u8, 124u8, 185u8, 43u8, 70u8, 147u8, 98u8, 167u8,
                            120u8, 25u8, 231u8, 143u8, 214u8, 25u8, 240u8, 74u8, 35u8, 58u8, 206u8,
                            78u8, 121u8, 215u8, 190u8, 42u8, 2u8, 206u8, 241u8, 44u8, 92u8, 23u8,
                        ],
                    )
                }
                ///Permanently place a proposal into the blacklist. This prevents it from ever
                /// being proposed again.
                ///
                ///If called on a queued public or external proposal, then this will result in it
                /// being removed. If the `ref_index` supplied is an active
                /// referendum with the proposal hash, then it will be cancelled.
                ///
                ///The dispatch origin of this call must be `BlacklistOrigin`.
                ///
                /// - `proposal_hash`: The proposal hash to blacklist permanently.
                /// - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will
                ///   be
                ///cancelled.
                ///
                ///Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a
                ///  reasonable value).
                pub fn blacklist(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<Blacklist> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "blacklist",
                        Blacklist { proposal_hash, maybe_ref_index },
                        [
                            48u8, 144u8, 81u8, 164u8, 54u8, 111u8, 197u8, 134u8, 6u8, 98u8, 121u8,
                            179u8, 254u8, 191u8, 204u8, 212u8, 84u8, 255u8, 86u8, 110u8, 225u8,
                            130u8, 26u8, 65u8, 133u8, 56u8, 231u8, 15u8, 245u8, 137u8, 146u8,
                            242u8,
                        ],
                    )
                }
                ///Remove a proposal.
                ///
                ///The dispatch origin of this call must be `CancelProposalOrigin`.
                ///
                /// - `prop_index`: The index of the proposal to cancel.
                ///
                ///Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`
                pub fn cancel_proposal(
                    &self,
                    prop_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<CancelProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "cancel_proposal",
                        CancelProposal { prop_index },
                        [
                            179u8, 3u8, 198u8, 244u8, 241u8, 124u8, 205u8, 58u8, 100u8, 80u8,
                            177u8, 254u8, 98u8, 220u8, 189u8, 63u8, 229u8, 60u8, 157u8, 83u8,
                            142u8, 6u8, 236u8, 183u8, 193u8, 235u8, 253u8, 126u8, 153u8, 185u8,
                            74u8, 117u8,
                        ],
                    )
                }
                ///Set or clear a metadata of a proposal or a referendum.
                ///
                ///Parameters:
                /// - `origin`: Must correspond to the `MetadataOwner`.
                ///    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`
                ///      threshold.
                ///    - `ExternalDefaultOrigin` for an external proposal with the
                ///      `SuperMajorityAgainst` threshold.
                ///    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`
                ///      threshold.
                ///    - `Signed` by a creator for a public proposal.
                ///    - `Signed` to clear a metadata for a finished referendum.
                ///    - `Root` to set a metadata for an ongoing referendum.
                /// - `owner`: an identifier of a metadata owner.
                /// - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a
                ///   metadata.
                pub fn set_metadata(
                    &self,
                    owner: runtime_types::pallet_democracy::types::MetadataOwner,
                    maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                ) -> ::subxt::tx::Payload<SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "set_metadata",
                        SetMetadata { owner, maybe_hash },
                        [
                            182u8, 2u8, 168u8, 244u8, 247u8, 35u8, 65u8, 9u8, 39u8, 164u8, 30u8,
                            141u8, 69u8, 137u8, 75u8, 156u8, 158u8, 107u8, 67u8, 28u8, 145u8, 65u8,
                            175u8, 30u8, 254u8, 231u8, 4u8, 77u8, 207u8, 166u8, 157u8, 73u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_democracy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion has been proposed by a public account.
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A public proposal has been tabled for referendum vote.
            pub struct Tabled {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Tabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Tabled";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An external proposal has been tabled.
            pub struct ExternalTabled;
            impl ::subxt::events::StaticEvent for ExternalTabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ExternalTabled";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A referendum has begun.
            pub struct Started {
                pub ref_index: ::core::primitive::u32,
                pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
            }
            impl ::subxt::events::StaticEvent for Started {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Started";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proposal has been approved by referendum.
            pub struct Passed {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Passed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Passed";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proposal has been rejected by referendum.
            pub struct NotPassed {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NotPassed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "NotPassed";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A referendum has been cancelled.
            pub struct Cancelled {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Cancelled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Cancelled";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An account has delegated their vote to another account.
            pub struct Delegated {
                pub who: ::subxt::utils::AccountId32,
                pub target: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Delegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Delegated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An account has cancelled a previous delegation operation.
            pub struct Undelegated {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Undelegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Undelegated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An external proposal has been vetoed.
            pub struct Vetoed {
                pub who: ::subxt::utils::AccountId32,
                pub proposal_hash: ::subxt::utils::H256,
                pub until: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Vetoed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Vetoed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proposal_hash has been blacklisted permanently.
            pub struct Blacklisted {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Blacklisted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Blacklisted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An account has voted in a referendum
            pub struct Voted {
                pub voter: ::subxt::utils::AccountId32,
                pub ref_index: ::core::primitive::u32,
                pub vote:
                    runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An account has secconded a proposal
            pub struct Seconded {
                pub seconder: ::subxt::utils::AccountId32,
                pub prop_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Seconded {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Seconded";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proposal got canceled.
            pub struct ProposalCanceled {
                pub prop_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProposalCanceled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ProposalCanceled";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Metadata for a proposal or a referendum has been set.
            pub struct MetadataSet {
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Metadata for a proposal or a referendum has been cleared.
            pub struct MetadataCleared {
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Metadata has been transferred to new owner.
            pub struct MetadataTransferred {
                pub prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataTransferred {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataTransferred";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The number of (public) proposals that have been made so far.
                pub fn public_prop_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "PublicPropCount",
                        vec![],
                        [
                            91u8, 14u8, 171u8, 94u8, 37u8, 157u8, 46u8, 157u8, 254u8, 13u8, 68u8,
                            144u8, 23u8, 146u8, 128u8, 159u8, 9u8, 174u8, 74u8, 174u8, 218u8,
                            197u8, 23u8, 235u8, 152u8, 226u8, 216u8, 4u8, 120u8, 121u8, 27u8,
                            138u8,
                        ],
                    )
                }
                /// The public proposals. Unsorted. The second item is the proposal.
                pub fn public_props(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::rococo_runtime::RuntimeCall,
                        >,
                        ::subxt::utils::AccountId32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "PublicProps",
                        vec![],
                        [
                            63u8, 172u8, 211u8, 85u8, 27u8, 14u8, 86u8, 49u8, 133u8, 5u8, 132u8,
                            189u8, 138u8, 137u8, 219u8, 37u8, 209u8, 49u8, 172u8, 86u8, 240u8,
                            235u8, 42u8, 201u8, 203u8, 12u8, 122u8, 225u8, 0u8, 109u8, 205u8,
                            103u8,
                        ],
                    )
                }
                /// Those who have locked a deposit.
                ///
                /// TWOX-NOTE: Safe, as increasing integer keys are safe.
                pub fn deposit_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "DepositOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            9u8, 219u8, 11u8, 58u8, 17u8, 194u8, 248u8, 154u8, 135u8, 119u8, 123u8,
                            235u8, 252u8, 176u8, 190u8, 162u8, 236u8, 45u8, 237u8, 125u8, 98u8,
                            176u8, 184u8, 160u8, 8u8, 181u8, 213u8, 65u8, 14u8, 84u8, 200u8, 64u8,
                        ],
                    )
                }
                /// Those who have locked a deposit.
                ///
                /// TWOX-NOTE: Safe, as increasing integer keys are safe.
                pub fn deposit_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "DepositOf",
                        Vec::new(),
                        [
                            9u8, 219u8, 11u8, 58u8, 17u8, 194u8, 248u8, 154u8, 135u8, 119u8, 123u8,
                            235u8, 252u8, 176u8, 190u8, 162u8, 236u8, 45u8, 237u8, 125u8, 98u8,
                            176u8, 184u8, 160u8, 8u8, 181u8, 213u8, 65u8, 14u8, 84u8, 200u8, 64u8,
                        ],
                    )
                }
                /// The next free referendum index, aka the number of referenda started so far.
                pub fn referendum_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "ReferendumCount",
                        vec![],
                        [
                            153u8, 210u8, 106u8, 244u8, 156u8, 70u8, 124u8, 251u8, 123u8, 75u8,
                            7u8, 189u8, 199u8, 145u8, 95u8, 119u8, 137u8, 11u8, 240u8, 160u8,
                            151u8, 248u8, 229u8, 231u8, 89u8, 222u8, 18u8, 237u8, 144u8, 78u8,
                            99u8, 58u8,
                        ],
                    )
                }
                /// The lowest referendum index representing an unbaked referendum. Equal to
                /// `ReferendumCount` if there isn't a unbaked referendum.
                pub fn lowest_unbaked(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "LowestUnbaked",
                        vec![],
                        [
                            4u8, 51u8, 108u8, 11u8, 48u8, 165u8, 19u8, 251u8, 182u8, 76u8, 163u8,
                            73u8, 227u8, 2u8, 212u8, 74u8, 128u8, 27u8, 165u8, 164u8, 111u8, 22u8,
                            209u8, 190u8, 103u8, 7u8, 116u8, 16u8, 160u8, 144u8, 123u8, 64u8,
                        ],
                    )
                }
                /// Information concerning any given referendum.
                ///
                /// TWOX-NOTE: SAFE as indexes are not under an attacker’s control.
                pub fn referendum_info_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::types::ReferendumInfo<
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::rococo_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "ReferendumInfoOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            167u8, 58u8, 230u8, 197u8, 185u8, 56u8, 181u8, 32u8, 81u8, 150u8, 29u8,
                            138u8, 142u8, 38u8, 255u8, 216u8, 139u8, 93u8, 56u8, 148u8, 196u8,
                            169u8, 168u8, 144u8, 193u8, 200u8, 187u8, 5u8, 141u8, 201u8, 254u8,
                            248u8,
                        ],
                    )
                }
                /// Information concerning any given referendum.
                ///
                /// TWOX-NOTE: SAFE as indexes are not under an attacker’s control.
                pub fn referendum_info_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::types::ReferendumInfo<
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::rococo_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "ReferendumInfoOf",
                        Vec::new(),
                        [
                            167u8, 58u8, 230u8, 197u8, 185u8, 56u8, 181u8, 32u8, 81u8, 150u8, 29u8,
                            138u8, 142u8, 38u8, 255u8, 216u8, 139u8, 93u8, 56u8, 148u8, 196u8,
                            169u8, 168u8, 144u8, 193u8, 200u8, 187u8, 5u8, 141u8, 201u8, 254u8,
                            248u8,
                        ],
                    )
                }
                /// All votes for a particular voter. We store the balance for the number of votes
                /// that we have recorded. The second item is the total amount of
                /// delegations, that will be added.
                ///
                /// TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
                pub fn voting_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::vote::Voting<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "VotingOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            125u8, 121u8, 167u8, 170u8, 18u8, 194u8, 183u8, 38u8, 176u8, 48u8,
                            30u8, 88u8, 233u8, 196u8, 33u8, 119u8, 160u8, 201u8, 29u8, 183u8, 88u8,
                            67u8, 219u8, 137u8, 6u8, 195u8, 11u8, 63u8, 162u8, 181u8, 82u8, 243u8,
                        ],
                    )
                }
                /// All votes for a particular voter. We store the balance for the number of votes
                /// that we have recorded. The second item is the total amount of
                /// delegations, that will be added.
                ///
                /// TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
                pub fn voting_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::vote::Voting<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "VotingOf",
                        Vec::new(),
                        [
                            125u8, 121u8, 167u8, 170u8, 18u8, 194u8, 183u8, 38u8, 176u8, 48u8,
                            30u8, 88u8, 233u8, 196u8, 33u8, 119u8, 160u8, 201u8, 29u8, 183u8, 88u8,
                            67u8, 219u8, 137u8, 6u8, 195u8, 11u8, 63u8, 162u8, 181u8, 82u8, 243u8,
                        ],
                    )
                }
                /// True if the last referendum tabled was submitted externally. False if it was a
                /// public proposal.
                pub fn last_tabled_was_external(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "LastTabledWasExternal",
                        vec![],
                        [
                            3u8, 67u8, 106u8, 1u8, 89u8, 204u8, 4u8, 145u8, 121u8, 44u8, 34u8,
                            76u8, 18u8, 206u8, 65u8, 214u8, 222u8, 82u8, 31u8, 223u8, 144u8, 169u8,
                            17u8, 6u8, 138u8, 36u8, 113u8, 155u8, 241u8, 106u8, 189u8, 218u8,
                        ],
                    )
                }
                /// The referendum to be tabled whenever it would be valid to table an external
                /// proposal. This happens when a referendum needs to be tabled and
                /// one of two conditions are met:
                /// - `LastTabledWasExternal` is `false`; or
                /// - `PublicProps` is empty.
                pub fn next_external(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::rococo_runtime::RuntimeCall,
                        >,
                        runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "NextExternal",
                        vec![],
                        [
                            213u8, 36u8, 235u8, 75u8, 153u8, 33u8, 140u8, 121u8, 191u8, 197u8,
                            17u8, 57u8, 234u8, 67u8, 81u8, 55u8, 123u8, 179u8, 207u8, 124u8, 238u8,
                            147u8, 243u8, 126u8, 200u8, 2u8, 16u8, 143u8, 165u8, 143u8, 159u8,
                            93u8,
                        ],
                    )
                }
                /// A record of who vetoed what. Maps proposal hash to a possible existent block
                /// number (until when it may not be resubmitted) and who vetoed it.
                pub fn blacklist(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Blacklist",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            8u8, 227u8, 185u8, 179u8, 192u8, 92u8, 171u8, 125u8, 237u8, 224u8,
                            109u8, 207u8, 44u8, 181u8, 78u8, 17u8, 254u8, 183u8, 199u8, 241u8,
                            49u8, 90u8, 101u8, 168u8, 46u8, 89u8, 253u8, 155u8, 38u8, 183u8, 112u8,
                            35u8,
                        ],
                    )
                }
                /// A record of who vetoed what. Maps proposal hash to a possible existent block
                /// number (until when it may not be resubmitted) and who vetoed it.
                pub fn blacklist_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Blacklist",
                        Vec::new(),
                        [
                            8u8, 227u8, 185u8, 179u8, 192u8, 92u8, 171u8, 125u8, 237u8, 224u8,
                            109u8, 207u8, 44u8, 181u8, 78u8, 17u8, 254u8, 183u8, 199u8, 241u8,
                            49u8, 90u8, 101u8, 168u8, 46u8, 89u8, 253u8, 155u8, 38u8, 183u8, 112u8,
                            35u8,
                        ],
                    )
                }
                /// Record of all proposals that have been subject to emergency cancellation.
                pub fn cancellations(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Cancellations",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8, 173u8, 186u8,
                            166u8, 79u8, 35u8, 226u8, 94u8, 200u8, 67u8, 44u8, 47u8, 7u8, 17u8,
                            89u8, 169u8, 166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8, 177u8,
                            135u8,
                        ],
                    )
                }
                /// Record of all proposals that have been subject to emergency cancellation.
                pub fn cancellations_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Cancellations",
                        Vec::new(),
                        [
                            154u8, 36u8, 172u8, 46u8, 65u8, 218u8, 30u8, 151u8, 173u8, 186u8,
                            166u8, 79u8, 35u8, 226u8, 94u8, 200u8, 67u8, 44u8, 47u8, 7u8, 17u8,
                            89u8, 169u8, 166u8, 236u8, 101u8, 68u8, 54u8, 114u8, 141u8, 177u8,
                            135u8,
                        ],
                    )
                }
                /// General information concerning any proposal or referendum.
                /// The `PreimageHash` refers to the preimage of the `Preimages` provider which can
                /// be a JSON dump or IPFS hash of a JSON file.
                ///
                /// Consider a garbage collection for a metadata of finished referendums to
                /// `unrequest` (remove) large preimages.
                pub fn metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::pallet_democracy::types::MetadataOwner,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "MetadataOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            157u8, 252u8, 120u8, 151u8, 76u8, 82u8, 189u8, 77u8, 196u8, 65u8,
                            113u8, 138u8, 138u8, 57u8, 199u8, 136u8, 22u8, 35u8, 114u8, 144u8,
                            172u8, 42u8, 130u8, 19u8, 19u8, 245u8, 76u8, 177u8, 145u8, 146u8,
                            107u8, 23u8,
                        ],
                    )
                }
                /// General information concerning any proposal or referendum.
                /// The `PreimageHash` refers to the preimage of the `Preimages` provider which can
                /// be a JSON dump or IPFS hash of a JSON file.
                ///
                /// Consider a garbage collection for a metadata of finished referendums to
                /// `unrequest` (remove) large preimages.
                pub fn metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "MetadataOf",
                        Vec::new(),
                        [
                            157u8, 252u8, 120u8, 151u8, 76u8, 82u8, 189u8, 77u8, 196u8, 65u8,
                            113u8, 138u8, 138u8, 57u8, 199u8, 136u8, 22u8, 35u8, 114u8, 144u8,
                            172u8, 42u8, 130u8, 19u8, 19u8, 245u8, 76u8, 177u8, 145u8, 146u8,
                            107u8, 23u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The period between a proposal being approved and enacted.
                ///
                /// It should generally be a little more than the unstake period to ensure that
                /// voting stakers have an opportunity to remove themselves from the system in the
                /// case where they are on the losing side of a vote.
                pub fn enactment_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "EnactmentPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// How often (in blocks) new public referenda are launched.
                pub fn launch_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "LaunchPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// How often (in blocks) to check for new votes.
                pub fn voting_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "VotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The minimum period of vote locking.
                ///
                /// It should be no shorter than enactment period to ensure that in the case of an
                /// approval, those successful voters are locked into the
                /// consequences that their votes entail.
                pub fn vote_locking_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "VoteLockingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The minimum amount to be used as a deposit for a public referendum proposal.
                pub fn minimum_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MinimumDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// Indicator for whether an emergency origin is even allowed to happen. Some chains
                /// may want to set this permanently to `false`, others may want to
                /// condition it on things such as an upgrade having happened
                /// recently.
                pub fn instant_allowed(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::bool> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "InstantAllowed",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
                /// Minimum voting period allowed for a fast-track referendum.
                pub fn fast_track_voting_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "FastTrackVotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Period in blocks where an external proposal may not be re-submitted after being
                /// vetoed.
                pub fn cooloff_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "CooloffPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of votes for an account.
                ///
                /// Also used to compute weight, an overly big value can
                /// lead to extrinsic with very big weight: see `delegate` for instance.
                pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxVotes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of public proposals that can exist at any time.
                pub fn max_proposals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxProposals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of deposits a public proposal may have at any time.
                pub fn max_deposits(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxDeposits",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of items which can be blacklisted.
                pub fn max_blacklisted(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxBlacklisted",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod council {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMembers {
                pub new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                pub prime: ::core::option::Option<::subxt::utils::AccountId32>,
                pub old_count: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Execute {
                pub proposal: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Propose {
                #[codec(compact)]
                pub threshold: ::core::primitive::u32,
                pub proposal: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Vote {
                pub proposal: ::subxt::utils::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub approve: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CloseOldWeight {
                pub proposal_hash: ::subxt::utils::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                #[codec(compact)]
                pub proposal_weight_bound: runtime_types::sp_weights::OldWeight,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DisapproveProposal {
                pub proposal_hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Close {
                pub proposal_hash: ::subxt::utils::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Set the collective's membership.
                ///
                /// - `new_members`: The new member list. Be nice to the chain and provide it
                ///   sorted.
                /// - `prime`: The prime member whose vote sets the default.
                /// - `old_count`: The upper bound for the previous number of members in storage.
                ///   Used for
                ///  weight estimation.
                ///
                ///The dispatch of this call must be `SetMembersOrigin`.
                ///
                ///NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members,
                /// but      the weight estimations rely on it to estimate
                /// dispatchable weight.
                ///
                ///# WARNING:
                ///
                ///The `pallet-collective` can also be managed by logic outside of the pallet
                /// through the implementation of the trait [`ChangeMembers`].
                ///Any call to `set_members` must be careful that the member set doesn't get out of
                /// sync with other logic managing the member set.
                ///
                ///## Complexity:
                /// - `O(MP + N)` where:
                ///  - `M` old-members-count (code- and governance-bounded)
                ///  - `N` new-members-count (code- and governance-bounded)
                ///  - `P` proposals-count (code-bounded)
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    prime: ::core::option::Option<::subxt::utils::AccountId32>,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "set_members",
                        SetMembers { new_members, prime, old_count },
                        [
                            196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8, 37u8, 160u8, 114u8,
                            34u8, 136u8, 219u8, 84u8, 199u8, 94u8, 242u8, 20u8, 126u8, 126u8,
                            166u8, 190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8, 90u8, 1u8, 2u8,
                            234u8,
                        ],
                    )
                }
                ///Dispatch a proposal from a member using the `Member` origin.
                ///
                ///Origin must be a member of the collective.
                ///
                ///## Complexity:
                /// - `O(B + M + P)` where:
                /// - `B` is `proposal` size in bytes (length-fee-bounded)
                /// - `M` members-count (code-bounded)
                /// - `P` complexity of dispatching `proposal`
                pub fn execute(
                    &self,
                    proposal: runtime_types::rococo_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Execute> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "execute",
                        Execute { proposal: ::std::boxed::Box::new(proposal), length_bound },
                        [
                            231u8, 61u8, 172u8, 19u8, 211u8, 199u8, 207u8, 125u8, 187u8, 204u8,
                            168u8, 43u8, 224u8, 140u8, 132u8, 250u8, 149u8, 16u8, 181u8, 81u8,
                            96u8, 144u8, 24u8, 248u8, 0u8, 7u8, 80u8, 231u8, 64u8, 16u8, 8u8, 11u8,
                        ],
                    )
                }
                ///Add a new proposal to either be voted on or executed directly.
                ///
                ///Requires the sender to be member.
                ///
                ///`threshold` determines whether `proposal` is executed directly (`threshold < 2`)
                ///or put up for voting.
                ///
                ///## Complexity
                /// - `O(B + M + P1)` or `O(B + M + P2)` where:
                ///  - `B` is `proposal` size in bytes (length-fee-bounded)
                ///  - `M` is members-count (code- and governance-bounded)
                ///  - branching is influenced by `threshold` where:
                ///    - `P1` is proposal execution complexity (`threshold < 2`)
                ///    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::rococo_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Propose> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "propose",
                        Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            13u8, 206u8, 152u8, 195u8, 242u8, 24u8, 95u8, 53u8, 23u8, 144u8, 130u8,
                            36u8, 49u8, 219u8, 242u8, 42u8, 131u8, 173u8, 164u8, 249u8, 137u8,
                            221u8, 142u8, 105u8, 254u8, 139u8, 60u8, 13u8, 148u8, 128u8, 65u8, 4u8,
                        ],
                    )
                }
                ///Add an aye or nay vote for the sender to the given proposal.
                ///
                ///Requires the sender to be a member.
                ///
                ///Transaction fees will be waived if the member is voting on any particular
                /// proposal for the first time and the call is successful.
                /// Subsequent vote changes will charge a fee.
                ///## Complexity
                /// - `O(M)` where `M` is members-count (code- and governance-bounded)
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "vote",
                        Vote { proposal, index, approve },
                        [
                            108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
                            216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
                            42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
                        ],
                    )
                }
                ///Close a vote that is either approved, disapproved or whose voting period has
                /// ended.
                ///
                ///May be called by any signed account in order to finish voting and close the
                /// proposal.
                ///
                ///If called before the end of the voting period it will only close the vote if it
                /// is has enough votes to be approved or disapproved.
                ///
                ///If called after the end of the voting period abstentions are counted as
                /// rejections unless there is a prime member set and the prime
                /// member cast an approval.
                ///
                ///If the close operation completes successfully with disapproval, the transaction
                /// fee will be waived. Otherwise execution of the approved
                /// operation will be charged to the caller.
                ///
                ///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
                /// the closed proposal.
                ///+ `length_bound`: The upper bound for the length of the proposal in storage.
                /// Checked via `storage::read` so it is `size_of::<u32>() == 4`
                /// larger than the pure length.
                ///
                ///## Complexity
                /// - `O(B + M + P1 + P2)` where:
                ///  - `B` is `proposal` size in bytes (length-fee-bounded)
                ///  - `M` is members-count (code- and governance-bounded)
                ///  - `P1` is the complexity of `proposal` preimage.
                ///  - `P2` is proposal-count (code-bounded)
                pub fn close_old_weight(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::OldWeight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<CloseOldWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "close_old_weight",
                        CloseOldWeight {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            133u8, 219u8, 90u8, 40u8, 102u8, 95u8, 4u8, 199u8, 45u8, 234u8, 109u8,
                            17u8, 162u8, 63u8, 102u8, 186u8, 95u8, 182u8, 13u8, 123u8, 227u8, 20u8,
                            186u8, 207u8, 12u8, 47u8, 87u8, 252u8, 244u8, 172u8, 60u8, 206u8,
                        ],
                    )
                }
                ///Disapprove a proposal, close, and remove it from the system, regardless of its
                /// current state.
                ///
                ///Must be called by the Root origin.
                ///
                ///Parameters:
                /// * `proposal_hash`: The hash of the proposal that should be disapproved.
                ///
                ///## Complexity
                ///O(P) where P is the number of max proposals
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "disapprove_proposal",
                        DisapproveProposal { proposal_hash },
                        [
                            25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8, 37u8, 175u8, 224u8,
                            72u8, 155u8, 123u8, 109u8, 104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8,
                            225u8, 133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
                        ],
                    )
                }
                ///Close a vote that is either approved, disapproved or whose voting period has
                /// ended.
                ///
                ///May be called by any signed account in order to finish voting and close the
                /// proposal.
                ///
                ///If called before the end of the voting period it will only close the vote if it
                /// is has enough votes to be approved or disapproved.
                ///
                ///If called after the end of the voting period abstentions are counted as
                /// rejections unless there is a prime member set and the prime
                /// member cast an approval.
                ///
                ///If the close operation completes successfully with disapproval, the transaction
                /// fee will be waived. Otherwise execution of the approved
                /// operation will be charged to the caller.
                ///
                ///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
                /// the closed proposal.
                ///+ `length_bound`: The upper bound for the length of the proposal in storage.
                /// Checked via `storage::read` so it is `size_of::<u32>() == 4`
                /// larger than the pure length.
                ///
                ///## Complexity
                /// - `O(B + M + P1 + P2)` where:
                ///  - `B` is `proposal` size in bytes (length-fee-bounded)
                ///  - `M` is members-count (code- and governance-bounded)
                ///  - `P1` is the complexity of `proposal` preimage.
                ///  - `P2` is proposal-count (code-bounded)
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Close> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "close",
                        Close { proposal_hash, index, proposal_weight_bound, length_bound },
                        [
                            191u8, 138u8, 89u8, 247u8, 97u8, 51u8, 45u8, 193u8, 76u8, 16u8, 80u8,
                            225u8, 197u8, 83u8, 204u8, 133u8, 169u8, 16u8, 86u8, 32u8, 125u8, 16u8,
                            116u8, 185u8, 45u8, 20u8, 76u8, 148u8, 206u8, 163u8, 154u8, 30u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion (given hash) has been proposed (by given account) with a threshold (given
            ///`MemberCount`).
            pub struct Proposed {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::utils::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion (given hash) has been voted on by given account, leaving
            ///a tally (yes votes and no votes given respectively as `MemberCount`).
            pub struct Voted {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_hash: ::subxt::utils::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion was approved by the required threshold.
            pub struct Approved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion was not approved by the required threshold.
            pub struct Disapproved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion was executed; result will be `Ok` if it returned without error.
            pub struct Executed {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A single member did some action; result will be `Ok` if it returned without error.
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proposal was closed because its threshold was reached or after its duration was
            /// up.
            pub struct Closed {
                pub proposal_hash: ::subxt::utils::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The hashes of the active proposals.
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Proposals",
                        vec![],
                        [
                            10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8, 56u8, 96u8, 249u8,
                            148u8, 43u8, 57u8, 116u8, 43u8, 222u8, 243u8, 237u8, 231u8, 238u8,
                            60u8, 26u8, 225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8, 100u8,
                            27u8,
                        ],
                    )
                }
                /// Actual proposal for a given hash, if it's current.
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::rococo_runtime::RuntimeCall,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            35u8, 247u8, 167u8, 244u8, 12u8, 184u8, 148u8, 200u8, 101u8, 39u8,
                            72u8, 28u8, 250u8, 123u8, 228u8, 165u8, 44u8, 22u8, 184u8, 33u8, 106u8,
                            143u8, 210u8, 215u8, 196u8, 85u8, 70u8, 109u8, 177u8, 87u8, 173u8,
                            174u8,
                        ],
                    )
                }
                /// Actual proposal for a given hash, if it's current.
                pub fn proposal_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::rococo_runtime::RuntimeCall,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "ProposalOf",
                        Vec::new(),
                        [
                            35u8, 247u8, 167u8, 244u8, 12u8, 184u8, 148u8, 200u8, 101u8, 39u8,
                            72u8, 28u8, 250u8, 123u8, 228u8, 165u8, 44u8, 22u8, 184u8, 33u8, 106u8,
                            143u8, 210u8, 215u8, 196u8, 85u8, 70u8, 109u8, 177u8, 87u8, 173u8,
                            174u8,
                        ],
                    )
                }
                /// Votes on a given proposal, if it is ongoing.
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
                            168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
                            136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
                            221u8,
                        ],
                    )
                }
                /// Votes on a given proposal, if it is ongoing.
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Voting",
                        Vec::new(),
                        [
                            89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
                            168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
                            136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
                            221u8,
                        ],
                    )
                }
                /// Proposals so far.
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "ProposalCount",
                        vec![],
                        [
                            132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
                            140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
                            24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
                            70u8,
                        ],
                    )
                }
                /// The current members of the collective. This is stored sorted (just by value).
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Members",
                        vec![],
                        [
                            162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
                            206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
                            238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
                            222u8,
                        ],
                    )
                }
                /// The prime member that helps determine the default vote behavior in case of
                /// absentations.
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Prime",
                        vec![],
                        [
                            108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
                            157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
                            209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
                            158u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod technical_committee {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMembers {
                pub new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                pub prime: ::core::option::Option<::subxt::utils::AccountId32>,
                pub old_count: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Execute {
                pub proposal: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Propose {
                #[codec(compact)]
                pub threshold: ::core::primitive::u32,
                pub proposal: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Vote {
                pub proposal: ::subxt::utils::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub approve: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CloseOldWeight {
                pub proposal_hash: ::subxt::utils::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                #[codec(compact)]
                pub proposal_weight_bound: runtime_types::sp_weights::OldWeight,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DisapproveProposal {
                pub proposal_hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Close {
                pub proposal_hash: ::subxt::utils::H256,
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                #[codec(compact)]
                pub length_bound: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Set the collective's membership.
                ///
                /// - `new_members`: The new member list. Be nice to the chain and provide it
                ///   sorted.
                /// - `prime`: The prime member whose vote sets the default.
                /// - `old_count`: The upper bound for the previous number of members in storage.
                ///   Used for
                ///  weight estimation.
                ///
                ///The dispatch of this call must be `SetMembersOrigin`.
                ///
                ///NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members,
                /// but      the weight estimations rely on it to estimate
                /// dispatchable weight.
                ///
                ///# WARNING:
                ///
                ///The `pallet-collective` can also be managed by logic outside of the pallet
                /// through the implementation of the trait [`ChangeMembers`].
                ///Any call to `set_members` must be careful that the member set doesn't get out of
                /// sync with other logic managing the member set.
                ///
                ///## Complexity:
                /// - `O(MP + N)` where:
                ///  - `M` old-members-count (code- and governance-bounded)
                ///  - `N` new-members-count (code- and governance-bounded)
                ///  - `P` proposals-count (code-bounded)
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    prime: ::core::option::Option<::subxt::utils::AccountId32>,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "set_members",
                        SetMembers { new_members, prime, old_count },
                        [
                            196u8, 103u8, 123u8, 125u8, 226u8, 177u8, 126u8, 37u8, 160u8, 114u8,
                            34u8, 136u8, 219u8, 84u8, 199u8, 94u8, 242u8, 20u8, 126u8, 126u8,
                            166u8, 190u8, 198u8, 33u8, 162u8, 113u8, 237u8, 222u8, 90u8, 1u8, 2u8,
                            234u8,
                        ],
                    )
                }
                ///Dispatch a proposal from a member using the `Member` origin.
                ///
                ///Origin must be a member of the collective.
                ///
                ///## Complexity:
                /// - `O(B + M + P)` where:
                /// - `B` is `proposal` size in bytes (length-fee-bounded)
                /// - `M` members-count (code-bounded)
                /// - `P` complexity of dispatching `proposal`
                pub fn execute(
                    &self,
                    proposal: runtime_types::rococo_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Execute> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "execute",
                        Execute { proposal: ::std::boxed::Box::new(proposal), length_bound },
                        [
                            231u8, 61u8, 172u8, 19u8, 211u8, 199u8, 207u8, 125u8, 187u8, 204u8,
                            168u8, 43u8, 224u8, 140u8, 132u8, 250u8, 149u8, 16u8, 181u8, 81u8,
                            96u8, 144u8, 24u8, 248u8, 0u8, 7u8, 80u8, 231u8, 64u8, 16u8, 8u8, 11u8,
                        ],
                    )
                }
                ///Add a new proposal to either be voted on or executed directly.
                ///
                ///Requires the sender to be member.
                ///
                ///`threshold` determines whether `proposal` is executed directly (`threshold < 2`)
                ///or put up for voting.
                ///
                ///## Complexity
                /// - `O(B + M + P1)` or `O(B + M + P2)` where:
                ///  - `B` is `proposal` size in bytes (length-fee-bounded)
                ///  - `M` is members-count (code- and governance-bounded)
                ///  - branching is influenced by `threshold` where:
                ///    - `P1` is proposal execution complexity (`threshold < 2`)
                ///    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::rococo_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Propose> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "propose",
                        Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            13u8, 206u8, 152u8, 195u8, 242u8, 24u8, 95u8, 53u8, 23u8, 144u8, 130u8,
                            36u8, 49u8, 219u8, 242u8, 42u8, 131u8, 173u8, 164u8, 249u8, 137u8,
                            221u8, 142u8, 105u8, 254u8, 139u8, 60u8, 13u8, 148u8, 128u8, 65u8, 4u8,
                        ],
                    )
                }
                ///Add an aye or nay vote for the sender to the given proposal.
                ///
                ///Requires the sender to be a member.
                ///
                ///Transaction fees will be waived if the member is voting on any particular
                /// proposal for the first time and the call is successful.
                /// Subsequent vote changes will charge a fee.
                ///## Complexity
                /// - `O(M)` where `M` is members-count (code- and governance-bounded)
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<Vote> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "vote",
                        Vote { proposal, index, approve },
                        [
                            108u8, 46u8, 180u8, 148u8, 145u8, 24u8, 173u8, 56u8, 36u8, 100u8,
                            216u8, 43u8, 178u8, 202u8, 26u8, 136u8, 93u8, 84u8, 80u8, 134u8, 14u8,
                            42u8, 248u8, 205u8, 68u8, 92u8, 79u8, 11u8, 113u8, 115u8, 157u8, 100u8,
                        ],
                    )
                }
                ///Close a vote that is either approved, disapproved or whose voting period has
                /// ended.
                ///
                ///May be called by any signed account in order to finish voting and close the
                /// proposal.
                ///
                ///If called before the end of the voting period it will only close the vote if it
                /// is has enough votes to be approved or disapproved.
                ///
                ///If called after the end of the voting period abstentions are counted as
                /// rejections unless there is a prime member set and the prime
                /// member cast an approval.
                ///
                ///If the close operation completes successfully with disapproval, the transaction
                /// fee will be waived. Otherwise execution of the approved
                /// operation will be charged to the caller.
                ///
                ///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
                /// the closed proposal.
                ///+ `length_bound`: The upper bound for the length of the proposal in storage.
                /// Checked via `storage::read` so it is `size_of::<u32>() == 4`
                /// larger than the pure length.
                ///
                ///## Complexity
                /// - `O(B + M + P1 + P2)` where:
                ///  - `B` is `proposal` size in bytes (length-fee-bounded)
                ///  - `M` is members-count (code- and governance-bounded)
                ///  - `P1` is the complexity of `proposal` preimage.
                ///  - `P2` is proposal-count (code-bounded)
                pub fn close_old_weight(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::OldWeight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<CloseOldWeight> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "close_old_weight",
                        CloseOldWeight {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            133u8, 219u8, 90u8, 40u8, 102u8, 95u8, 4u8, 199u8, 45u8, 234u8, 109u8,
                            17u8, 162u8, 63u8, 102u8, 186u8, 95u8, 182u8, 13u8, 123u8, 227u8, 20u8,
                            186u8, 207u8, 12u8, 47u8, 87u8, 252u8, 244u8, 172u8, 60u8, 206u8,
                        ],
                    )
                }
                ///Disapprove a proposal, close, and remove it from the system, regardless of its
                /// current state.
                ///
                ///Must be called by the Root origin.
                ///
                ///Parameters:
                /// * `proposal_hash`: The hash of the proposal that should be disapproved.
                ///
                ///## Complexity
                ///O(P) where P is the number of max proposals
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "disapprove_proposal",
                        DisapproveProposal { proposal_hash },
                        [
                            25u8, 123u8, 1u8, 8u8, 74u8, 37u8, 3u8, 40u8, 97u8, 37u8, 175u8, 224u8,
                            72u8, 155u8, 123u8, 109u8, 104u8, 43u8, 91u8, 125u8, 199u8, 51u8, 17u8,
                            225u8, 133u8, 38u8, 120u8, 76u8, 164u8, 5u8, 194u8, 201u8,
                        ],
                    )
                }
                ///Close a vote that is either approved, disapproved or whose voting period has
                /// ended.
                ///
                ///May be called by any signed account in order to finish voting and close the
                /// proposal.
                ///
                ///If called before the end of the voting period it will only close the vote if it
                /// is has enough votes to be approved or disapproved.
                ///
                ///If called after the end of the voting period abstentions are counted as
                /// rejections unless there is a prime member set and the prime
                /// member cast an approval.
                ///
                ///If the close operation completes successfully with disapproval, the transaction
                /// fee will be waived. Otherwise execution of the approved
                /// operation will be charged to the caller.
                ///
                ///+ `proposal_weight_bound`: The maximum amount of weight consumed by executing
                /// the closed proposal.
                ///+ `length_bound`: The upper bound for the length of the proposal in storage.
                /// Checked via `storage::read` so it is `size_of::<u32>() == 4`
                /// larger than the pure length.
                ///
                ///## Complexity
                /// - `O(B + M + P1 + P2)` where:
                ///  - `B` is `proposal` size in bytes (length-fee-bounded)
                ///  - `M` is members-count (code- and governance-bounded)
                ///  - `P1` is the complexity of `proposal` preimage.
                ///  - `P2` is proposal-count (code-bounded)
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Close> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "close",
                        Close { proposal_hash, index, proposal_weight_bound, length_bound },
                        [
                            191u8, 138u8, 89u8, 247u8, 97u8, 51u8, 45u8, 193u8, 76u8, 16u8, 80u8,
                            225u8, 197u8, 83u8, 204u8, 133u8, 169u8, 16u8, 86u8, 32u8, 125u8, 16u8,
                            116u8, 185u8, 45u8, 20u8, 76u8, 148u8, 206u8, 163u8, 154u8, 30u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion (given hash) has been proposed (by given account) with a threshold (given
            ///`MemberCount`).
            pub struct Proposed {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::utils::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion (given hash) has been voted on by given account, leaving
            ///a tally (yes votes and no votes given respectively as `MemberCount`).
            pub struct Voted {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_hash: ::subxt::utils::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion was approved by the required threshold.
            pub struct Approved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion was not approved by the required threshold.
            pub struct Disapproved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A motion was executed; result will be `Ok` if it returned without error.
            pub struct Executed {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A single member did some action; result will be `Ok` if it returned without error.
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proposal was closed because its threshold was reached or after its duration was
            /// up.
            pub struct Closed {
                pub proposal_hash: ::subxt::utils::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The hashes of the active proposals.
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Proposals",
                        vec![],
                        [
                            10u8, 133u8, 82u8, 54u8, 193u8, 41u8, 253u8, 159u8, 56u8, 96u8, 249u8,
                            148u8, 43u8, 57u8, 116u8, 43u8, 222u8, 243u8, 237u8, 231u8, 238u8,
                            60u8, 26u8, 225u8, 19u8, 203u8, 213u8, 220u8, 114u8, 217u8, 100u8,
                            27u8,
                        ],
                    )
                }
                /// Actual proposal for a given hash, if it's current.
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::rococo_runtime::RuntimeCall,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            35u8, 247u8, 167u8, 244u8, 12u8, 184u8, 148u8, 200u8, 101u8, 39u8,
                            72u8, 28u8, 250u8, 123u8, 228u8, 165u8, 44u8, 22u8, 184u8, 33u8, 106u8,
                            143u8, 210u8, 215u8, 196u8, 85u8, 70u8, 109u8, 177u8, 87u8, 173u8,
                            174u8,
                        ],
                    )
                }
                /// Actual proposal for a given hash, if it's current.
                pub fn proposal_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::rococo_runtime::RuntimeCall,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "ProposalOf",
                        Vec::new(),
                        [
                            35u8, 247u8, 167u8, 244u8, 12u8, 184u8, 148u8, 200u8, 101u8, 39u8,
                            72u8, 28u8, 250u8, 123u8, 228u8, 165u8, 44u8, 22u8, 184u8, 33u8, 106u8,
                            143u8, 210u8, 215u8, 196u8, 85u8, 70u8, 109u8, 177u8, 87u8, 173u8,
                            174u8,
                        ],
                    )
                }
                /// Votes on a given proposal, if it is ongoing.
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
                            168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
                            136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
                            221u8,
                        ],
                    )
                }
                /// Votes on a given proposal, if it is ongoing.
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Voting",
                        Vec::new(),
                        [
                            89u8, 108u8, 65u8, 58u8, 60u8, 116u8, 54u8, 68u8, 179u8, 73u8, 161u8,
                            168u8, 78u8, 213u8, 208u8, 54u8, 244u8, 58u8, 70u8, 209u8, 170u8,
                            136u8, 215u8, 3u8, 2u8, 105u8, 229u8, 217u8, 240u8, 230u8, 107u8,
                            221u8,
                        ],
                    )
                }
                /// Proposals so far.
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "ProposalCount",
                        vec![],
                        [
                            132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
                            140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
                            24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
                            70u8,
                        ],
                    )
                }
                /// The current members of the collective. This is stored sorted (just by value).
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Members",
                        vec![],
                        [
                            162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
                            206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
                            238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
                            222u8,
                        ],
                    )
                }
                /// The prime member that helps determine the default vote behavior in case of
                /// absentations.
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Prime",
                        vec![],
                        [
                            108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
                            157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
                            209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
                            158u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod phragmen_election {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Vote {
                pub votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveVoter;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SubmitCandidacy {
                #[codec(compact)]
                pub candidate_count: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RenounceCandidacy {
                pub renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveMember {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub slash_bond: ::core::primitive::bool,
                pub rerun_election: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CleanDefunctVoters {
                pub num_voters: ::core::primitive::u32,
                pub num_defunct: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Vote for a set of candidates for the upcoming round of election. This can be
                /// called to set the initial votes, or update already existing
                /// votes.
                ///
                ///Upon initial voting, `value` units of `who`'s balance is locked and a deposit
                /// amount is reserved. The deposit is based on the number of votes
                /// and can be updated over time.
                ///
                ///The `votes` should:
                ///  - not be empty.
                ///  - be less than the number of possible candidates. Note that all current members
                ///    and runners-up are also automatically candidates for the next round.
                ///
                ///If `value` is more than `who`'s free balance, then the maximum of the two is
                /// used.
                ///
                ///The dispatch origin of this call must be signed.
                ///
                ///### Warning
                ///
                ///It is the responsibility of the caller to **NOT** place all of their balance
                /// into the lock and keep some for further operations.
                pub fn vote(
                    &self,
                    votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<Vote> {
                    ::subxt::tx::Payload::new_static(
                        "PhragmenElection",
                        "vote",
                        Vote { votes, value },
                        [
                            71u8, 90u8, 175u8, 225u8, 51u8, 202u8, 197u8, 252u8, 183u8, 92u8,
                            239u8, 83u8, 112u8, 144u8, 128u8, 211u8, 109u8, 33u8, 252u8, 6u8,
                            156u8, 15u8, 91u8, 88u8, 70u8, 19u8, 32u8, 29u8, 224u8, 255u8, 26u8,
                            145u8,
                        ],
                    )
                }
                ///Remove `origin` as a voter.
                ///
                ///This removes the lock and returns the deposit.
                ///
                ///The dispatch origin of this call must be signed and be a voter.
                pub fn remove_voter(&self) -> ::subxt::tx::Payload<RemoveVoter> {
                    ::subxt::tx::Payload::new_static(
                        "PhragmenElection",
                        "remove_voter",
                        RemoveVoter {},
                        [
                            254u8, 46u8, 140u8, 4u8, 218u8, 45u8, 150u8, 72u8, 67u8, 131u8, 108u8,
                            201u8, 46u8, 157u8, 104u8, 161u8, 53u8, 155u8, 130u8, 50u8, 88u8,
                            149u8, 255u8, 12u8, 17u8, 85u8, 95u8, 69u8, 153u8, 130u8, 221u8, 1u8,
                        ],
                    )
                }
                ///Submit oneself for candidacy. A fixed amount of deposit is recorded.
                ///
                ///All candidates are wiped at the end of the term. They either become a
                /// member/runner-up, or leave the system while their deposit is
                /// slashed.
                ///
                ///The dispatch origin of this call must be signed.
                ///
                ///### Warning
                ///
                ///Even if a candidate ends up being a member, they must call
                /// [`Call::renounce_candidacy`] to get their deposit back. Losing
                /// the spot in an election will always lead to a slash.
                ///
                ///The number of current candidates must be provided as witness data.
                ///## Complexity
                ///O(C + log(C)) where C is candidate_count.
                pub fn submit_candidacy(
                    &self,
                    candidate_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SubmitCandidacy> {
                    ::subxt::tx::Payload::new_static(
                        "PhragmenElection",
                        "submit_candidacy",
                        SubmitCandidacy { candidate_count },
                        [
                            228u8, 63u8, 217u8, 99u8, 128u8, 104u8, 175u8, 10u8, 30u8, 35u8, 47u8,
                            14u8, 254u8, 122u8, 146u8, 239u8, 61u8, 145u8, 82u8, 7u8, 181u8, 98u8,
                            238u8, 208u8, 23u8, 84u8, 48u8, 255u8, 177u8, 255u8, 84u8, 83u8,
                        ],
                    )
                }
                ///Renounce one's intention to be a candidate for the next election round. 3
                /// potential outcomes exist:
                ///
                /// - `origin` is a candidate and not elected in any set. In this case, the deposit
                ///   is
                ///  unreserved, returned and origin is removed as a candidate.
                /// - `origin` is a current runner-up. In this case, the deposit is unreserved,
                ///   returned and
                ///  origin is removed as a runner-up.
                /// - `origin` is a current member. In this case, the deposit is unreserved and
                ///   origin is
                ///  removed as a member, consequently not being a candidate for the next round
                /// anymore.  Similar to [`remove_member`](Self::remove_member), if
                /// replacement runners exists, they  are immediately used. If the
                /// prime is renouncing, then no prime will exist until the
                ///  next round.
                ///
                ///The dispatch origin of this call must be signed, and have one of the above
                /// roles. The type of renouncing must be provided as witness data.
                ///
                ///## Complexity
                ///  - Renouncing::Candidate(count): O(count + log(count))
                ///  - Renouncing::Member: O(1)
                ///  - Renouncing::RunnerUp: O(1)
                pub fn renounce_candidacy(
                    &self,
                    renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
                ) -> ::subxt::tx::Payload<RenounceCandidacy> {
                    ::subxt::tx::Payload::new_static(
                        "PhragmenElection",
                        "renounce_candidacy",
                        RenounceCandidacy { renouncing },
                        [
                            70u8, 72u8, 208u8, 36u8, 80u8, 245u8, 224u8, 75u8, 60u8, 142u8, 19u8,
                            49u8, 142u8, 90u8, 14u8, 69u8, 15u8, 61u8, 170u8, 235u8, 16u8, 252u8,
                            86u8, 200u8, 120u8, 127u8, 36u8, 42u8, 143u8, 130u8, 217u8, 128u8,
                        ],
                    )
                }
                ///Remove a particular member from the set. This is effective immediately and the
                /// bond of the outgoing member is slashed.
                ///
                ///If a runner-up is available, then the best runner-up will be removed and
                /// replaces the outgoing member. Otherwise, if `rerun_election` is
                /// `true`, a new phragmen election is started, else, nothing
                /// happens.
                ///
                ///If `slash_bond` is set to true, the bond of the member being removed is slashed.
                /// Else, it is returned.
                ///
                ///The dispatch origin of this call must be root.
                ///
                ///Note that this does not affect the designated block number of the next election.
                ///
                ///## Complexity
                /// - Check details of remove_and_replace_member() and do_phragmen().
                pub fn remove_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    slash_bond: ::core::primitive::bool,
                    rerun_election: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<RemoveMember> {
                    ::subxt::tx::Payload::new_static(
                        "PhragmenElection",
                        "remove_member",
                        RemoveMember { who, slash_bond, rerun_election },
                        [
                            45u8, 106u8, 9u8, 19u8, 133u8, 38u8, 20u8, 233u8, 12u8, 169u8, 216u8,
                            40u8, 23u8, 139u8, 184u8, 202u8, 2u8, 124u8, 202u8, 48u8, 205u8, 176u8,
                            161u8, 43u8, 66u8, 24u8, 189u8, 183u8, 233u8, 62u8, 102u8, 237u8,
                        ],
                    )
                }
                ///Clean all voters who are defunct (i.e. they do not serve any purpose at all).
                /// The deposit of the removed voters are returned.
                ///
                ///This is an root function to be used only for cleaning the state.
                ///
                ///The dispatch origin of this call must be root.
                ///
                ///## Complexity
                /// - Check is_defunct_voter() details.
                pub fn clean_defunct_voters(
                    &self,
                    num_voters: ::core::primitive::u32,
                    num_defunct: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<CleanDefunctVoters> {
                    ::subxt::tx::Payload::new_static(
                        "PhragmenElection",
                        "clean_defunct_voters",
                        CleanDefunctVoters { num_voters, num_defunct },
                        [
                            198u8, 162u8, 30u8, 249u8, 191u8, 38u8, 141u8, 123u8, 230u8, 90u8,
                            213u8, 103u8, 168u8, 28u8, 5u8, 215u8, 213u8, 152u8, 46u8, 189u8,
                            238u8, 209u8, 209u8, 142u8, 159u8, 222u8, 161u8, 26u8, 161u8, 250u8,
                            9u8, 100u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_elections_phragmen::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new term with new_members. This indicates that enough candidates existed to run
            ///the election, not that enough have has been elected. The inner value must be
            /// examined for this purpose. A `NewTerm(\[\])` indicates that some
            /// candidates got their bond slashed and none were elected, whilst
            /// `EmptyTerm` means that no candidates existed to begin with.
            pub struct NewTerm {
                pub new_members:
                    ::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
            }
            impl ::subxt::events::StaticEvent for NewTerm {
                const PALLET: &'static str = "PhragmenElection";
                const EVENT: &'static str = "NewTerm";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///No (or not enough) candidates existed for this round. This is different from
            ///`NewTerm(\[\])`. See the description of `NewTerm`.
            pub struct EmptyTerm;
            impl ::subxt::events::StaticEvent for EmptyTerm {
                const PALLET: &'static str = "PhragmenElection";
                const EVENT: &'static str = "EmptyTerm";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Internal error happened while trying to perform election.
            pub struct ElectionError;
            impl ::subxt::events::StaticEvent for ElectionError {
                const PALLET: &'static str = "PhragmenElection";
                const EVENT: &'static str = "ElectionError";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A member has been removed. This should always be followed by either `NewTerm` or
            ///`EmptyTerm`.
            pub struct MemberKicked {
                pub member: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for MemberKicked {
                const PALLET: &'static str = "PhragmenElection";
                const EVENT: &'static str = "MemberKicked";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Someone has renounced their candidacy.
            pub struct Renounced {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Renounced {
                const PALLET: &'static str = "PhragmenElection";
                const EVENT: &'static str = "Renounced";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A candidate was slashed by amount due to failing to obtain a seat as member or
            ///runner-up.
            ///
            ///Note that old members and runners-up are also candidates.
            pub struct CandidateSlashed {
                pub candidate: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for CandidateSlashed {
                const PALLET: &'static str = "PhragmenElection";
                const EVENT: &'static str = "CandidateSlashed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A seat holder was slashed by amount by being forcefully removed from the set.
            pub struct SeatHolderSlashed {
                pub seat_holder: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SeatHolderSlashed {
                const PALLET: &'static str = "PhragmenElection";
                const EVENT: &'static str = "SeatHolderSlashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The current elected members.
                ///
                /// Invariant: Always sorted based on account id.
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::pallet_elections_phragmen::SeatHolder<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PhragmenElection",
                        "Members",
                        vec![],
                        [
                            2u8, 182u8, 43u8, 180u8, 87u8, 185u8, 26u8, 79u8, 196u8, 55u8, 28u8,
                            26u8, 174u8, 133u8, 158u8, 221u8, 101u8, 161u8, 83u8, 9u8, 221u8,
                            175u8, 221u8, 220u8, 81u8, 80u8, 1u8, 236u8, 74u8, 121u8, 10u8, 82u8,
                        ],
                    )
                }
                /// The current reserved runners-up.
                ///
                /// Invariant: Always sorted based on rank (worse to best). Upon removal of a
                /// member, the last (i.e. _best_) runner-up will be replaced.
                pub fn runners_up(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::pallet_elections_phragmen::SeatHolder<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PhragmenElection",
                        "RunnersUp",
                        vec![],
                        [
                            248u8, 81u8, 190u8, 53u8, 121u8, 49u8, 55u8, 69u8, 116u8, 177u8, 46u8,
                            30u8, 131u8, 14u8, 32u8, 198u8, 10u8, 132u8, 73u8, 117u8, 2u8, 146u8,
                            188u8, 146u8, 214u8, 227u8, 97u8, 77u8, 7u8, 131u8, 208u8, 209u8,
                        ],
                    )
                }
                /// The present candidate list. A current member or runner-up can never enter this
                /// vector and is always implicitly assumed to be a candidate.
                ///
                /// Second element is the deposit.
                ///
                /// Invariant: Always sorted based on account id.
                pub fn candidates(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PhragmenElection",
                        "Candidates",
                        vec![],
                        [
                            224u8, 107u8, 141u8, 11u8, 54u8, 86u8, 117u8, 45u8, 195u8, 252u8,
                            152u8, 21u8, 165u8, 23u8, 198u8, 117u8, 5u8, 216u8, 183u8, 163u8,
                            243u8, 56u8, 11u8, 102u8, 85u8, 107u8, 219u8, 250u8, 45u8, 80u8, 108u8,
                            127u8,
                        ],
                    )
                }
                /// The total number of vote rounds that have happened, excluding the upcoming one.
                pub fn election_rounds(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PhragmenElection",
                        "ElectionRounds",
                        vec![],
                        [
                            144u8, 146u8, 10u8, 32u8, 149u8, 147u8, 59u8, 205u8, 61u8, 246u8, 28u8,
                            169u8, 130u8, 136u8, 143u8, 104u8, 253u8, 86u8, 228u8, 68u8, 19u8,
                            184u8, 166u8, 214u8, 58u8, 103u8, 176u8, 160u8, 240u8, 249u8, 117u8,
                            115u8,
                        ],
                    )
                }
                /// Votes and locked stake of a particular voter.
                ///
                /// TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_elections_phragmen::Voter<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PhragmenElection",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            9u8, 135u8, 76u8, 194u8, 240u8, 182u8, 111u8, 207u8, 102u8, 37u8,
                            126u8, 36u8, 84u8, 112u8, 26u8, 216u8, 175u8, 5u8, 14u8, 189u8, 83u8,
                            185u8, 136u8, 39u8, 171u8, 221u8, 147u8, 20u8, 168u8, 126u8, 111u8,
                            137u8,
                        ],
                    )
                }
                /// Votes and locked stake of a particular voter.
                ///
                /// TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_elections_phragmen::Voter<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PhragmenElection",
                        "Voting",
                        Vec::new(),
                        [
                            9u8, 135u8, 76u8, 194u8, 240u8, 182u8, 111u8, 207u8, 102u8, 37u8,
                            126u8, 36u8, 84u8, 112u8, 26u8, 216u8, 175u8, 5u8, 14u8, 189u8, 83u8,
                            185u8, 136u8, 39u8, 171u8, 221u8, 147u8, 20u8, 168u8, 126u8, 111u8,
                            137u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// Identifier for the elections-phragmen pallet's lock
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<[::core::primitive::u8; 8usize]> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "PalletId",
                        [
                            224u8, 197u8, 247u8, 125u8, 62u8, 180u8, 69u8, 91u8, 226u8, 36u8, 82u8,
                            148u8, 70u8, 147u8, 209u8, 40u8, 210u8, 229u8, 181u8, 191u8, 170u8,
                            205u8, 138u8, 97u8, 127u8, 59u8, 124u8, 244u8, 252u8, 30u8, 213u8,
                            179u8,
                        ],
                    )
                }
                /// How much should be locked up in order to submit one's candidacy.
                pub fn candidacy_bond(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "CandidacyBond",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// Base deposit associated with voting.
                ///
                /// This should be sensibly high to economically ensure the pallet cannot be
                /// attacked by creating a gigantic number of votes.
                pub fn voting_bond_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "VotingBondBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The amount of bond that need to be locked for each vote (32 bytes).
                pub fn voting_bond_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "VotingBondFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// Number of members to elect.
                pub fn desired_members(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "DesiredMembers",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Number of runners_up to keep.
                pub fn desired_runners_up(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "DesiredRunnersUp",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// How long each seat is kept. This defines the next block number at which an
                /// election round will happen. If set to zero, no elections are
                /// ever triggered and the module will be in passive mode.
                pub fn term_duration(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "TermDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of candidates in a phragmen election.
                ///
                /// Warning: This impacts the size of the election which is run onchain. Chose
                /// wisely, and consider how it will impact
                /// `T::WeightInfo::election_phragmen`.
                ///
                /// When this limit is reached no more candidates are accepted in the election.
                pub fn max_candidates(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "MaxCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of voters to allow in a phragmen election.
                ///
                /// Warning: This impacts the size of the election which is run onchain. Chose
                /// wisely, and consider how it will impact
                /// `T::WeightInfo::election_phragmen`.
                ///
                /// When the limit is reached the new voters are ignored.
                pub fn max_voters(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "MaxVoters",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Maximum numbers of votes per voter.
                ///
                /// Warning: This impacts the size of the election which is run onchain. Chose
                /// wisely, and consider how it will impact
                /// `T::WeightInfo::election_phragmen`.
                pub fn max_votes_per_voter(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "PhragmenElection",
                        "MaxVotesPerVoter",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod technical_membership {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AddMember {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveMember {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SwapMember {
                pub remove: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub add: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ResetMembers {
                pub members: ::std::vec::Vec<::subxt::utils::AccountId32>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChangeKey {
                pub new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetPrime {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ClearPrime;
            pub struct TransactionApi;
            impl TransactionApi {
                ///Add a member `who` to the set.
                ///
                ///May only be called from `T::AddOrigin`.
                pub fn add_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<AddMember> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "add_member",
                        AddMember { who },
                        [
                            165u8, 116u8, 123u8, 50u8, 236u8, 196u8, 108u8, 211u8, 112u8, 214u8,
                            121u8, 105u8, 7u8, 88u8, 125u8, 99u8, 24u8, 0u8, 168u8, 65u8, 158u8,
                            100u8, 42u8, 62u8, 101u8, 59u8, 30u8, 174u8, 170u8, 119u8, 141u8,
                            121u8,
                        ],
                    )
                }
                ///Remove a member `who` from the set.
                ///
                ///May only be called from `T::RemoveOrigin`.
                pub fn remove_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<RemoveMember> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "remove_member",
                        RemoveMember { who },
                        [
                            177u8, 18u8, 217u8, 235u8, 254u8, 40u8, 137u8, 79u8, 146u8, 5u8, 55u8,
                            187u8, 129u8, 28u8, 54u8, 132u8, 115u8, 220u8, 132u8, 139u8, 91u8,
                            81u8, 0u8, 110u8, 188u8, 248u8, 1u8, 135u8, 93u8, 153u8, 95u8, 193u8,
                        ],
                    )
                }
                ///Swap out one member `remove` for another `add`.
                ///
                ///May only be called from `T::SwapOrigin`.
                ///
                ///Prime membership is *not* passed from `remove` to `add`, if extant.
                pub fn swap_member(
                    &self,
                    remove: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    add: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<SwapMember> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "swap_member",
                        SwapMember { remove, add },
                        [
                            96u8, 248u8, 50u8, 206u8, 192u8, 242u8, 162u8, 62u8, 28u8, 91u8, 11u8,
                            208u8, 15u8, 84u8, 188u8, 234u8, 219u8, 233u8, 200u8, 215u8, 157u8,
                            155u8, 40u8, 220u8, 132u8, 182u8, 57u8, 210u8, 94u8, 240u8, 95u8,
                            252u8,
                        ],
                    )
                }
                ///Change the membership to a new set, disregarding the existing membership. Be
                /// nice and pass `members` pre-sorted.
                ///
                ///May only be called from `T::ResetOrigin`.
                pub fn reset_members(
                    &self,
                    members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                ) -> ::subxt::tx::Payload<ResetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "reset_members",
                        ResetMembers { members },
                        [
                            9u8, 35u8, 28u8, 59u8, 158u8, 232u8, 89u8, 78u8, 101u8, 53u8, 240u8,
                            98u8, 13u8, 104u8, 235u8, 161u8, 201u8, 150u8, 117u8, 32u8, 75u8,
                            209u8, 166u8, 252u8, 57u8, 131u8, 96u8, 215u8, 51u8, 81u8, 42u8, 123u8,
                        ],
                    )
                }
                ///Swap out the sending member for some other key `new`.
                ///
                ///May only be called from `Signed` origin of a current member.
                ///
                ///Prime membership is passed from the origin account to `new`, if extant.
                pub fn change_key(
                    &self,
                    new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<ChangeKey> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "change_key",
                        ChangeKey { new },
                        [
                            27u8, 236u8, 241u8, 168u8, 98u8, 39u8, 176u8, 220u8, 145u8, 48u8,
                            173u8, 25u8, 179u8, 103u8, 170u8, 13u8, 166u8, 181u8, 131u8, 160u8,
                            131u8, 219u8, 116u8, 34u8, 152u8, 152u8, 46u8, 100u8, 46u8, 5u8, 156u8,
                            195u8,
                        ],
                    )
                }
                ///Set the prime member. Must be a current member.
                ///
                ///May only be called from `T::PrimeOrigin`.
                pub fn set_prime(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<SetPrime> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "set_prime",
                        SetPrime { who },
                        [
                            0u8, 42u8, 111u8, 52u8, 151u8, 19u8, 239u8, 149u8, 183u8, 252u8, 87u8,
                            194u8, 145u8, 21u8, 245u8, 112u8, 221u8, 181u8, 87u8, 28u8, 48u8, 39u8,
                            210u8, 133u8, 241u8, 207u8, 255u8, 209u8, 139u8, 232u8, 119u8, 64u8,
                        ],
                    )
                }
                ///Remove the prime member if it exists.
                ///
                ///May only be called from `T::PrimeOrigin`.
                pub fn clear_prime(&self) -> ::subxt::tx::Payload<ClearPrime> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "clear_prime",
                        ClearPrime {},
                        [
                            186u8, 182u8, 225u8, 90u8, 71u8, 124u8, 69u8, 100u8, 234u8, 25u8, 53u8,
                            23u8, 182u8, 32u8, 176u8, 81u8, 54u8, 140u8, 235u8, 126u8, 247u8, 7u8,
                            155u8, 62u8, 35u8, 135u8, 48u8, 61u8, 88u8, 160u8, 183u8, 72u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_membership::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The given member was added; see the transaction for who.
            pub struct MemberAdded;
            impl ::subxt::events::StaticEvent for MemberAdded {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "MemberAdded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The given member was removed; see the transaction for who.
            pub struct MemberRemoved;
            impl ::subxt::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Two members were swapped; see the transaction for who.
            pub struct MembersSwapped;
            impl ::subxt::events::StaticEvent for MembersSwapped {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "MembersSwapped";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The membership was reset; see the transaction for who the new set is.
            pub struct MembersReset;
            impl ::subxt::events::StaticEvent for MembersReset {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "MembersReset";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///One of the members' keys changed.
            pub struct KeyChanged;
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Phantom member, never used.
            pub struct Dummy;
            impl ::subxt::events::StaticEvent for Dummy {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "Dummy";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The current membership, stored as an ordered Vec.
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalMembership",
                        "Members",
                        vec![],
                        [
                            56u8, 56u8, 29u8, 90u8, 26u8, 115u8, 252u8, 185u8, 37u8, 108u8, 16u8,
                            46u8, 136u8, 139u8, 30u8, 19u8, 235u8, 78u8, 176u8, 129u8, 180u8, 57u8,
                            178u8, 239u8, 211u8, 6u8, 64u8, 129u8, 195u8, 46u8, 178u8, 157u8,
                        ],
                    )
                }
                /// The current prime member, if one exists.
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalMembership",
                        "Prime",
                        vec![],
                        [
                            108u8, 118u8, 54u8, 193u8, 207u8, 227u8, 119u8, 97u8, 23u8, 239u8,
                            157u8, 69u8, 56u8, 142u8, 106u8, 17u8, 215u8, 159u8, 48u8, 42u8, 185u8,
                            209u8, 49u8, 159u8, 32u8, 168u8, 111u8, 158u8, 159u8, 217u8, 244u8,
                            158u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod treasury {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ProposeSpend {
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RejectProposal {
                #[codec(compact)]
                pub proposal_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ApproveProposal {
                #[codec(compact)]
                pub proposal_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Spend {
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveApproval {
                #[codec(compact)]
                pub proposal_id: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Put forward a suggestion for spending. A deposit proportional to the value
                ///is reserved and slashed if the proposal is rejected. It is returned once the
                ///proposal is awarded.
                ///
                ///## Complexity
                /// - O(1)
                pub fn propose_spend(
                    &self,
                    value: ::core::primitive::u128,
                    beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<ProposeSpend> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "propose_spend",
                        ProposeSpend { value, beneficiary },
                        [
                            109u8, 46u8, 8u8, 159u8, 127u8, 79u8, 27u8, 100u8, 92u8, 244u8, 78u8,
                            46u8, 105u8, 246u8, 169u8, 210u8, 149u8, 7u8, 108u8, 153u8, 203u8,
                            223u8, 8u8, 117u8, 126u8, 250u8, 255u8, 52u8, 245u8, 69u8, 45u8, 136u8,
                        ],
                    )
                }
                ///Reject a proposed spend. The original deposit will be slashed.
                ///
                ///May only be called from `T::RejectOrigin`.
                ///
                ///## Complexity
                /// - O(1)
                pub fn reject_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<RejectProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "reject_proposal",
                        RejectProposal { proposal_id },
                        [
                            106u8, 223u8, 97u8, 22u8, 111u8, 208u8, 128u8, 26u8, 198u8, 140u8,
                            118u8, 126u8, 187u8, 51u8, 193u8, 50u8, 193u8, 68u8, 143u8, 144u8,
                            34u8, 132u8, 44u8, 244u8, 105u8, 186u8, 223u8, 234u8, 17u8, 145u8,
                            209u8, 145u8,
                        ],
                    )
                }
                ///Approve a proposal. At a later time, the proposal will be allocated to the
                /// beneficiary and the original deposit will be returned.
                ///
                ///May only be called from `T::ApproveOrigin`.
                ///
                ///## Complexity
                /// - O(1).
                pub fn approve_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ApproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "approve_proposal",
                        ApproveProposal { proposal_id },
                        [
                            164u8, 229u8, 172u8, 98u8, 129u8, 62u8, 84u8, 128u8, 47u8, 108u8, 33u8,
                            120u8, 89u8, 79u8, 57u8, 121u8, 4u8, 197u8, 170u8, 153u8, 156u8, 17u8,
                            59u8, 164u8, 123u8, 227u8, 175u8, 195u8, 220u8, 160u8, 60u8, 186u8,
                        ],
                    )
                }
                ///Propose and approve a spend of treasury funds.
                ///
                /// - `origin`: Must be `SpendOrigin` with the `Success` value being at least
                ///   `amount`.
                /// - `amount`: The amount to be transferred from the treasury to the `beneficiary`.
                /// - `beneficiary`: The destination account for the transfer.
                ///
                ///NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to
                /// the beneficiary.
                pub fn spend(
                    &self,
                    amount: ::core::primitive::u128,
                    beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<Spend> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "spend",
                        Spend { amount, beneficiary },
                        [
                            177u8, 178u8, 242u8, 136u8, 135u8, 237u8, 114u8, 71u8, 233u8, 239u8,
                            7u8, 84u8, 14u8, 228u8, 58u8, 31u8, 158u8, 185u8, 25u8, 91u8, 70u8,
                            33u8, 19u8, 92u8, 100u8, 162u8, 5u8, 48u8, 20u8, 120u8, 9u8, 109u8,
                        ],
                    )
                }
                ///Force a previously approved proposal to be removed from the approval queue.
                ///The original deposit will no longer be returned.
                ///
                ///May only be called from `T::RejectOrigin`.
                /// - `proposal_id`: The index of a proposal
                ///
                ///## Complexity
                /// - O(A) where `A` is the number of approvals
                ///
                ///Errors:
                /// - `ProposalNotApproved`: The `proposal_id` supplied was not found in the
                ///   approval queue,
                ///i.e., the proposal has not been approved. This could also mean the proposal does
                /// not exist altogether, thus there is no way it would have been
                /// approved in the first place.
                pub fn remove_approval(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<RemoveApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "remove_approval",
                        RemoveApproval { proposal_id },
                        [
                            133u8, 126u8, 181u8, 47u8, 196u8, 243u8, 7u8, 46u8, 25u8, 251u8, 154u8,
                            125u8, 217u8, 77u8, 54u8, 245u8, 240u8, 180u8, 97u8, 34u8, 186u8, 53u8,
                            225u8, 144u8, 155u8, 107u8, 172u8, 54u8, 250u8, 184u8, 178u8, 86u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_treasury::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///New proposal.
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///We have ended a spend period and will now allocate funds.
            pub struct Spending {
                pub budget_remaining: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Spending {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Spending";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some funds have been allocated.
            pub struct Awarded {
                pub proposal_index: ::core::primitive::u32,
                pub award: ::core::primitive::u128,
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Awarded {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proposal was rejected; funds were slashed.
            pub struct Rejected {
                pub proposal_index: ::core::primitive::u32,
                pub slashed: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rejected {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some of our funds have been burnt.
            pub struct Burnt {
                pub burnt_funds: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burnt {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Burnt";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Spending has finished; this is the amount that rolls over until next spend.
            pub struct Rollover {
                pub rollover_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rollover {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rollover";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some funds have been deposited.
            pub struct Deposit {
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new spend proposal has been approved.
            pub struct SpendApproved {
                pub proposal_index: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for SpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendApproved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The inactive funds of the pallet have been updated.
            pub struct UpdatedInactive {
                pub reactivated: ::core::primitive::u128,
                pub deactivated: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for UpdatedInactive {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "UpdatedInactive";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Number of proposals that have been made.
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "ProposalCount",
                        vec![],
                        [
                            132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8,
                            140u8, 99u8, 124u8, 208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8,
                            24u8, 149u8, 109u8, 105u8, 30u8, 83u8, 39u8, 177u8, 127u8, 160u8, 34u8,
                            70u8,
                        ],
                    )
                }
                /// Proposals that have been made.
                pub fn proposals(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_treasury::Proposal<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Proposals",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            62u8, 223u8, 55u8, 209u8, 151u8, 134u8, 122u8, 65u8, 207u8, 38u8,
                            113u8, 213u8, 237u8, 48u8, 129u8, 32u8, 91u8, 228u8, 108u8, 91u8, 37u8,
                            49u8, 94u8, 4u8, 75u8, 122u8, 25u8, 34u8, 198u8, 224u8, 246u8, 160u8,
                        ],
                    )
                }
                /// Proposals that have been made.
                pub fn proposals_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_treasury::Proposal<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Proposals",
                        Vec::new(),
                        [
                            62u8, 223u8, 55u8, 209u8, 151u8, 134u8, 122u8, 65u8, 207u8, 38u8,
                            113u8, 213u8, 237u8, 48u8, 129u8, 32u8, 91u8, 228u8, 108u8, 91u8, 37u8,
                            49u8, 94u8, 4u8, 75u8, 122u8, 25u8, 34u8, 198u8, 224u8, 246u8, 160u8,
                        ],
                    )
                }
                /// The amount which has been reported as inactive to Currency.
                pub fn deactivated(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Deactivated",
                        vec![],
                        [
                            159u8, 57u8, 5u8, 85u8, 136u8, 128u8, 70u8, 43u8, 67u8, 76u8, 123u8,
                            206u8, 48u8, 253u8, 51u8, 40u8, 14u8, 35u8, 162u8, 173u8, 127u8, 79u8,
                            38u8, 235u8, 9u8, 141u8, 201u8, 37u8, 211u8, 176u8, 119u8, 106u8,
                        ],
                    )
                }
                /// Proposal indices that have been approved but not yet awarded.
                pub fn approvals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Approvals",
                        vec![],
                        [
                            202u8, 106u8, 189u8, 40u8, 127u8, 172u8, 108u8, 50u8, 193u8, 4u8,
                            248u8, 226u8, 176u8, 101u8, 212u8, 222u8, 64u8, 206u8, 244u8, 175u8,
                            111u8, 106u8, 86u8, 96u8, 19u8, 109u8, 218u8, 152u8, 30u8, 59u8, 96u8,
                            1u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// Fraction of a proposal's value that should be bonded in order to place the
                /// proposal. An accepted proposal gets these back. A rejected
                /// proposal does not.
                pub fn proposal_bond(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBond",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
                            80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
                        ],
                    )
                }
                /// Minimum amount of funds that should be placed in a deposit for making a
                /// proposal.
                pub fn proposal_bond_minimum(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBondMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// Maximum amount of funds that should be placed in a deposit for making a
                /// proposal.
                pub fn proposal_bond_maximum(
                    &self,
                ) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBondMaximum",
                        [
                            84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
                            205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
                            204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
                            216u8,
                        ],
                    )
                }
                /// Period between successive spends.
                pub fn spend_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "SpendPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Percentage of spare funds (if any) that are burnt per spend period.
                pub fn burn(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "Burn",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
                            80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
                        ],
                    )
                }
                /// The treasury's pallet id, used for deriving its sovereign account ID.
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                /// The maximum number of approvals that can wait in the spending queue.
                ///
                /// NOTE: This parameter is also used within the Bounties Pallet extension if
                /// enabled.
                pub fn max_approvals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "MaxApprovals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod claims {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Claim {
                pub dest: ::subxt::utils::AccountId32,
                pub ethereum_signature:
                    runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MintClaim {
                pub who: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                pub value: ::core::primitive::u128,
                pub vesting_schedule: ::core::option::Option<(
                    ::core::primitive::u128,
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                )>,
                pub statement: ::core::option::Option<
                    runtime_types::polkadot_runtime_common::claims::StatementKind,
                >,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ClaimAttest {
                pub dest: ::subxt::utils::AccountId32,
                pub ethereum_signature:
                    runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
                pub statement: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Attest {
                pub statement: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MoveClaim {
                pub old: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                pub new: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                pub maybe_preclaim: ::core::option::Option<::subxt::utils::AccountId32>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Make a claim to collect your DOTs.
                ///
                ///The dispatch origin for this call must be _None_.
                ///
                ///Unsigned Validation:
                ///A call to claim is deemed valid if the signature provided matches
                ///the expected signed message of:
                ///
                /// > Ethereum Signed Message:
                /// > (configured prefix string)(address)
                ///
                ///and `address` matches the `dest` account.
                ///
                ///Parameters:
                /// - `dest`: The destination account to payout the claim.
                /// - `ethereum_signature`: The signature of an ethereum signed message matching the
                ///   format described above.
                ///
                ///<weight>
                ///The weight of this call is invariant over the input parameters.
                ///Weight includes logic to validate unsigned `claim` call.
                ///
                ///Total Complexity: O(1)
                ///</weight>
                pub fn claim(
                    &self,
                    dest: ::subxt::utils::AccountId32,
                    ethereum_signature: runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
                ) -> ::subxt::tx::Payload<Claim> {
                    ::subxt::tx::Payload::new_static(
                        "Claims",
                        "claim",
                        Claim { dest, ethereum_signature },
                        [
                            33u8, 63u8, 71u8, 104u8, 200u8, 179u8, 248u8, 38u8, 193u8, 198u8,
                            250u8, 49u8, 106u8, 26u8, 109u8, 183u8, 33u8, 50u8, 217u8, 28u8, 50u8,
                            107u8, 249u8, 80u8, 199u8, 10u8, 192u8, 1u8, 54u8, 41u8, 146u8, 11u8,
                        ],
                    )
                }
                ///Mint a new claim to collect DOTs.
                ///
                ///The dispatch origin for this call must be _Root_.
                ///
                ///Parameters:
                /// - `who`: The Ethereum address allowed to collect this claim.
                /// - `value`: The number of DOTs that will be claimed.
                /// - `vesting_schedule`: An optional vesting schedule for these DOTs.
                ///
                ///<weight>
                ///The weight of this call is invariant over the input parameters.
                ///We assume worst case that both vesting and statement is being inserted.
                ///
                ///Total Complexity: O(1)
                ///</weight>
                pub fn mint_claim(
                    &self,
                    who: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                    value: ::core::primitive::u128,
                    vesting_schedule: ::core::option::Option<(
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    )>,
                    statement: ::core::option::Option<
                        runtime_types::polkadot_runtime_common::claims::StatementKind,
                    >,
                ) -> ::subxt::tx::Payload<MintClaim> {
                    ::subxt::tx::Payload::new_static(
                        "Claims",
                        "mint_claim",
                        MintClaim { who, value, vesting_schedule, statement },
                        [
                            213u8, 79u8, 204u8, 40u8, 104u8, 84u8, 82u8, 62u8, 193u8, 93u8, 246u8,
                            21u8, 37u8, 244u8, 166u8, 132u8, 208u8, 18u8, 86u8, 195u8, 156u8, 9u8,
                            220u8, 120u8, 40u8, 183u8, 28u8, 103u8, 84u8, 163u8, 153u8, 110u8,
                        ],
                    )
                }
                ///Make a claim to collect your DOTs by signing a statement.
                ///
                ///The dispatch origin for this call must be _None_.
                ///
                ///Unsigned Validation:
                ///A call to `claim_attest` is deemed valid if the signature provided matches
                ///the expected signed message of:
                ///
                /// > Ethereum Signed Message:
                /// > (configured prefix string)(address)(statement)
                ///
                ///and `address` matches the `dest` account; the `statement` must match that which
                /// is expected according to your purchase arrangement.
                ///
                ///Parameters:
                /// - `dest`: The destination account to payout the claim.
                /// - `ethereum_signature`: The signature of an ethereum signed message matching the
                ///   format described above.
                /// - `statement`: The identity of the statement which is being attested to in the
                ///   signature.
                ///
                ///<weight>
                ///The weight of this call is invariant over the input parameters.
                ///Weight includes logic to validate unsigned `claim_attest` call.
                ///
                ///Total Complexity: O(1)
                ///</weight>
                pub fn claim_attest(
                    &self,
                    dest: ::subxt::utils::AccountId32,
                    ethereum_signature: runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
                    statement: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<ClaimAttest> {
                    ::subxt::tx::Payload::new_static(
                        "Claims",
                        "claim_attest",
                        ClaimAttest { dest, ethereum_signature, statement },
                        [
                            255u8, 10u8, 87u8, 106u8, 101u8, 195u8, 249u8, 25u8, 109u8, 82u8,
                            213u8, 95u8, 203u8, 145u8, 224u8, 113u8, 92u8, 141u8, 31u8, 54u8,
                            218u8, 47u8, 218u8, 239u8, 211u8, 206u8, 77u8, 176u8, 19u8, 176u8,
                            175u8, 135u8,
                        ],
                    )
                }
                ///Attest to a statement, needed to finalize the claims process.
                ///
                ///WARNING: Insecure unless your chain includes `PrevalidateAttests` as a
                /// `SignedExtension`.
                ///
                ///Unsigned Validation:
                ///A call to attest is deemed valid if the sender has a `Preclaim` registered
                ///and provides a `statement` which is expected for the account.
                ///
                ///Parameters:
                /// - `statement`: The identity of the statement which is being attested to in the
                ///   signature.
                ///
                ///<weight>
                ///The weight of this call is invariant over the input parameters.
                ///Weight includes logic to do pre-validation on `attest` call.
                ///
                ///Total Complexity: O(1)
                ///</weight>
                pub fn attest(
                    &self,
                    statement: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<Attest> {
                    ::subxt::tx::Payload::new_static(
                        "Claims",
                        "attest",
                        Attest { statement },
                        [
                            8u8, 218u8, 97u8, 237u8, 185u8, 61u8, 55u8, 4u8, 134u8, 18u8, 244u8,
                            226u8, 40u8, 97u8, 222u8, 246u8, 221u8, 74u8, 253u8, 22u8, 52u8, 223u8,
                            224u8, 83u8, 21u8, 218u8, 248u8, 100u8, 107u8, 58u8, 247u8, 10u8,
                        ],
                    )
                }
                pub fn move_claim(
                    &self,
                    old: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                    new: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                    maybe_preclaim: ::core::option::Option<::subxt::utils::AccountId32>,
                ) -> ::subxt::tx::Payload<MoveClaim> {
                    ::subxt::tx::Payload::new_static(
                        "Claims",
                        "move_claim",
                        MoveClaim { old, new, maybe_preclaim },
                        [
                            63u8, 48u8, 217u8, 16u8, 161u8, 102u8, 165u8, 241u8, 57u8, 185u8,
                            230u8, 161u8, 202u8, 11u8, 223u8, 15u8, 57u8, 181u8, 34u8, 131u8,
                            235u8, 168u8, 227u8, 152u8, 157u8, 4u8, 192u8, 243u8, 194u8, 120u8,
                            130u8, 202u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_common::claims::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Someone claimed some DOTs.
            pub struct Claimed {
                pub who: ::subxt::utils::AccountId32,
                pub ethereum_address:
                    runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Claimed {
                const PALLET: &'static str = "Claims";
                const EVENT: &'static str = "Claimed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn claims(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Claims",
                        "Claims",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            36u8, 247u8, 169u8, 171u8, 103u8, 176u8, 70u8, 213u8, 255u8, 175u8,
                            97u8, 142u8, 231u8, 70u8, 90u8, 213u8, 128u8, 67u8, 50u8, 37u8, 51u8,
                            184u8, 72u8, 27u8, 193u8, 254u8, 12u8, 253u8, 91u8, 60u8, 88u8, 182u8,
                        ],
                    )
                }
                pub fn claims_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Claims",
                        "Claims",
                        Vec::new(),
                        [
                            36u8, 247u8, 169u8, 171u8, 103u8, 176u8, 70u8, 213u8, 255u8, 175u8,
                            97u8, 142u8, 231u8, 70u8, 90u8, 213u8, 128u8, 67u8, 50u8, 37u8, 51u8,
                            184u8, 72u8, 27u8, 193u8, 254u8, 12u8, 253u8, 91u8, 60u8, 88u8, 182u8,
                        ],
                    )
                }
                pub fn total(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Claims",
                        "Total",
                        vec![],
                        [
                            162u8, 59u8, 237u8, 63u8, 23u8, 44u8, 74u8, 169u8, 131u8, 166u8, 174u8,
                            61u8, 127u8, 165u8, 32u8, 115u8, 73u8, 171u8, 36u8, 10u8, 6u8, 23u8,
                            19u8, 202u8, 3u8, 189u8, 29u8, 169u8, 144u8, 187u8, 235u8, 77u8,
                        ],
                    )
                }
                /// Vesting schedule for a claim.
                /// First balance is the total amount that should be held for vesting.
                /// Second balance is how much should be unlocked per block.
                /// The block number is when the vesting should start.
                pub fn vesting(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u128, ::core::primitive::u128, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Claims",
                        "Vesting",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            112u8, 174u8, 151u8, 185u8, 225u8, 170u8, 63u8, 147u8, 100u8, 23u8,
                            102u8, 148u8, 244u8, 47u8, 87u8, 99u8, 28u8, 59u8, 48u8, 205u8, 43u8,
                            41u8, 87u8, 225u8, 191u8, 164u8, 31u8, 208u8, 80u8, 53u8, 25u8, 205u8,
                        ],
                    )
                }
                /// Vesting schedule for a claim.
                /// First balance is the total amount that should be held for vesting.
                /// Second balance is how much should be unlocked per block.
                /// The block number is when the vesting should start.
                pub fn vesting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u128, ::core::primitive::u128, ::core::primitive::u32),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Claims",
                        "Vesting",
                        Vec::new(),
                        [
                            112u8, 174u8, 151u8, 185u8, 225u8, 170u8, 63u8, 147u8, 100u8, 23u8,
                            102u8, 148u8, 244u8, 47u8, 87u8, 99u8, 28u8, 59u8, 48u8, 205u8, 43u8,
                            41u8, 87u8, 225u8, 191u8, 164u8, 31u8, 208u8, 80u8, 53u8, 25u8, 205u8,
                        ],
                    )
                }
                /// The statement kind that must be signed, if any.
                pub fn signing(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::claims::StatementKind,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Claims",
                        "Signing",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            51u8, 184u8, 211u8, 207u8, 13u8, 194u8, 181u8, 153u8, 25u8, 212u8,
                            106u8, 189u8, 149u8, 14u8, 19u8, 61u8, 210u8, 109u8, 23u8, 168u8,
                            191u8, 74u8, 112u8, 190u8, 242u8, 112u8, 183u8, 17u8, 30u8, 125u8,
                            85u8, 107u8,
                        ],
                    )
                }
                /// The statement kind that must be signed, if any.
                pub fn signing_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::claims::StatementKind,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Claims",
                        "Signing",
                        Vec::new(),
                        [
                            51u8, 184u8, 211u8, 207u8, 13u8, 194u8, 181u8, 153u8, 25u8, 212u8,
                            106u8, 189u8, 149u8, 14u8, 19u8, 61u8, 210u8, 109u8, 23u8, 168u8,
                            191u8, 74u8, 112u8, 190u8, 242u8, 112u8, 183u8, 17u8, 30u8, 125u8,
                            85u8, 107u8,
                        ],
                    )
                }
                /// Pre-claimed Ethereum accounts, by the Account ID that they are claimed to.
                pub fn preclaims(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Claims",
                        "Preclaims",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            149u8, 61u8, 170u8, 170u8, 60u8, 212u8, 29u8, 214u8, 141u8, 136u8,
                            207u8, 248u8, 51u8, 135u8, 242u8, 105u8, 121u8, 91u8, 186u8, 30u8, 0u8,
                            173u8, 154u8, 133u8, 20u8, 244u8, 58u8, 184u8, 133u8, 214u8, 67u8,
                            95u8,
                        ],
                    )
                }
                /// Pre-claimed Ethereum accounts, by the Account ID that they are claimed to.
                pub fn preclaims_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Claims",
                        "Preclaims",
                        Vec::new(),
                        [
                            149u8, 61u8, 170u8, 170u8, 60u8, 212u8, 29u8, 214u8, 141u8, 136u8,
                            207u8, 248u8, 51u8, 135u8, 242u8, 105u8, 121u8, 91u8, 186u8, 30u8, 0u8,
                            173u8, 154u8, 133u8, 20u8, 244u8, 58u8, 184u8, 133u8, 214u8, 67u8,
                            95u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn prefix(
                    &self,
                ) -> ::subxt::constants::Address<::std::vec::Vec<::core::primitive::u8>>
                {
                    ::subxt::constants::Address::new_static(
                        "Claims",
                        "Prefix",
                        [
                            106u8, 50u8, 57u8, 116u8, 43u8, 202u8, 37u8, 248u8, 102u8, 22u8, 62u8,
                            22u8, 242u8, 54u8, 152u8, 168u8, 107u8, 64u8, 72u8, 172u8, 124u8, 40u8,
                            42u8, 110u8, 104u8, 145u8, 31u8, 144u8, 242u8, 189u8, 145u8, 208u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod utility {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Batch {
                pub calls: ::std::vec::Vec<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AsDerivative {
                pub index: ::core::primitive::u16,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BatchAll {
                pub calls: ::std::vec::Vec<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DispatchAs {
                pub as_origin: ::std::boxed::Box<runtime_types::rococo_runtime::OriginCaller>,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceBatch {
                pub calls: ::std::vec::Vec<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WithWeight {
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                pub weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Send a batch of dispatch calls.
                ///
                ///May be called from any origin except `None`.
                ///
                /// - `calls`: The calls to be dispatched from the same origin. The number of call
                ///   must not
                ///  exceed the constant: `batched_calls_limit` (available in constant metadata).
                ///
                ///If origin is root then the calls are dispatched without checking origin filter.
                /// (This includes bypassing
                /// `frame_system::Config::BaseCallFilter`).
                ///
                ///## Complexity
                /// - O(C) where C is the number of calls to be batched.
                ///
                ///This will return `Ok` in all circumstances. To determine the success of the
                /// batch, an event is deposited. If a call failed and the batch was
                /// interrupted, then the `BatchInterrupted` event is deposited,
                /// along with the number of successful calls made and the error of
                /// the failed call. If all were successful, then the `BatchCompleted`
                /// event is deposited.
                pub fn batch(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::rococo_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<Batch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch",
                        Batch { calls },
                        [
                            215u8, 22u8, 233u8, 166u8, 187u8, 224u8, 207u8, 38u8, 8u8, 230u8,
                            154u8, 200u8, 86u8, 199u8, 123u8, 163u8, 131u8, 105u8, 197u8, 91u8,
                            78u8, 177u8, 219u8, 151u8, 231u8, 220u8, 196u8, 175u8, 3u8, 76u8,
                            234u8, 227u8,
                        ],
                    )
                }
                ///Send a call through an indexed pseudonym of the sender.
                ///
                ///Filter from origin are passed along. The call will be dispatched with an origin
                /// which use the same filter as the origin of this call.
                ///
                ///NOTE: If you need to ensure that any account-based filtering is not honored
                /// (i.e. because you expect `proxy` to have been used prior in the
                /// call stack and you do not want the call restrictions to apply to
                /// any sub-accounts), then use `as_multi_threshold_1`
                /// in the Multisig pallet instead.
                ///
                ///NOTE: Prior to version *12, this was called `as_limited_sub`.
                ///
                ///The dispatch origin for this call must be _Signed_.
                pub fn as_derivative(
                    &self,
                    index: ::core::primitive::u16,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<AsDerivative> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "as_derivative",
                        AsDerivative { index, call: ::std::boxed::Box::new(call) },
                        [
                            227u8, 221u8, 87u8, 23u8, 97u8, 68u8, 19u8, 115u8, 139u8, 81u8, 237u8,
                            92u8, 204u8, 4u8, 87u8, 212u8, 6u8, 231u8, 31u8, 117u8, 54u8, 223u8,
                            25u8, 190u8, 72u8, 142u8, 50u8, 62u8, 38u8, 59u8, 84u8, 250u8,
                        ],
                    )
                }
                ///Send a batch of dispatch calls and atomically execute them.
                ///The whole transaction will rollback and fail if any of the calls failed.
                ///
                ///May be called from any origin except `None`.
                ///
                /// - `calls`: The calls to be dispatched from the same origin. The number of call
                ///   must not
                ///  exceed the constant: `batched_calls_limit` (available in constant metadata).
                ///
                ///If origin is root then the calls are dispatched without checking origin filter.
                /// (This includes bypassing
                /// `frame_system::Config::BaseCallFilter`).
                ///
                ///## Complexity
                /// - O(C) where C is the number of calls to be batched.
                pub fn batch_all(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::rococo_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<BatchAll> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch_all",
                        BatchAll { calls },
                        [
                            82u8, 193u8, 214u8, 81u8, 102u8, 216u8, 223u8, 108u8, 202u8, 109u8,
                            217u8, 187u8, 255u8, 142u8, 152u8, 197u8, 20u8, 84u8, 77u8, 139u8,
                            50u8, 14u8, 6u8, 42u8, 247u8, 6u8, 27u8, 131u8, 191u8, 12u8, 183u8,
                            215u8,
                        ],
                    )
                }
                ///Dispatches a function call with a provided origin.
                ///
                ///The dispatch origin for this call must be _Root_.
                ///
                ///## Complexity
                /// - O(1).
                pub fn dispatch_as(
                    &self,
                    as_origin: runtime_types::rococo_runtime::OriginCaller,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<DispatchAs> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "dispatch_as",
                        DispatchAs {
                            as_origin: ::std::boxed::Box::new(as_origin),
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            92u8, 146u8, 242u8, 39u8, 234u8, 86u8, 186u8, 132u8, 146u8, 119u8,
                            144u8, 104u8, 39u8, 167u8, 199u8, 53u8, 242u8, 86u8, 73u8, 240u8, 73u8,
                            61u8, 28u8, 41u8, 56u8, 166u8, 44u8, 19u8, 201u8, 34u8, 41u8, 72u8,
                        ],
                    )
                }
                ///Send a batch of dispatch calls.
                ///Unlike `batch`, it allows errors and won't interrupt.
                ///
                ///May be called from any origin except `None`.
                ///
                /// - `calls`: The calls to be dispatched from the same origin. The number of call
                ///   must not
                ///  exceed the constant: `batched_calls_limit` (available in constant metadata).
                ///
                ///If origin is root then the calls are dispatch without checking origin filter.
                /// (This includes bypassing
                /// `frame_system::Config::BaseCallFilter`).
                ///
                ///## Complexity
                /// - O(C) where C is the number of calls to be batched.
                pub fn force_batch(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::rococo_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<ForceBatch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "force_batch",
                        ForceBatch { calls },
                        [
                            146u8, 98u8, 67u8, 243u8, 108u8, 246u8, 176u8, 19u8, 137u8, 183u8,
                            172u8, 188u8, 3u8, 109u8, 72u8, 114u8, 253u8, 161u8, 147u8, 28u8,
                            232u8, 55u8, 55u8, 211u8, 230u8, 15u8, 130u8, 75u8, 209u8, 18u8, 56u8,
                            127u8,
                        ],
                    )
                }
                ///Dispatch a function call with a specified weight.
                ///
                ///This function does not check the weight of the call, and instead allows the
                ///Root origin to specify the weight of the call.
                ///
                ///The dispatch origin for this call must be _Root_.
                pub fn with_weight(
                    &self,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                    weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<WithWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "with_weight",
                        WithWeight { call: ::std::boxed::Box::new(call), weight },
                        [
                            41u8, 218u8, 100u8, 181u8, 149u8, 237u8, 206u8, 39u8, 164u8, 28u8, 8u8,
                            169u8, 32u8, 128u8, 2u8, 72u8, 160u8, 208u8, 188u8, 34u8, 41u8, 47u8,
                            124u8, 138u8, 17u8, 234u8, 245u8, 109u8, 139u8, 17u8, 145u8, 44u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Batch of dispatches did not complete fully. Index of first failing dispatch given,
            /// as well as the error.
            pub struct BatchInterrupted {
                pub index: ::core::primitive::u32,
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Batch of dispatches completed fully with no error.
            pub struct BatchCompleted;
            impl ::subxt::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Batch of dispatches completed but has errors.
            pub struct BatchCompletedWithErrors;
            impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A single item within a Batch of dispatches has completed with no error.
            pub struct ItemCompleted;
            impl ::subxt::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A single item within a Batch of dispatches has completed with error.
            pub struct ItemFailed {
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A call was dispatched.
            pub struct DispatchedAs {
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The limit on the number of batched calls.
                pub fn batched_calls_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod identity {
        use super::{root_mod, runtime_types};
        ///Identity pallet declaration.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AddRegistrar {
                pub account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetIdentity {
                pub info: ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetSubs {
                pub subs: ::std::vec::Vec<(
                    ::subxt::utils::AccountId32,
                    runtime_types::pallet_identity::types::Data,
                )>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ClearIdentity;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RequestJudgement {
                #[codec(compact)]
                pub reg_index: ::core::primitive::u32,
                #[codec(compact)]
                pub max_fee: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CancelRequest {
                pub reg_index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetFee {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                #[codec(compact)]
                pub fee: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetAccountId {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetFields {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub fields: runtime_types::pallet_identity::types::BitFlags<
                    runtime_types::pallet_identity::types::IdentityField,
                >,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ProvideJudgement {
                #[codec(compact)]
                pub reg_index: ::core::primitive::u32,
                pub target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub judgement:
                    runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
                pub identity: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct KillIdentity {
                pub target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AddSub {
                pub sub: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub data: runtime_types::pallet_identity::types::Data,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RenameSub {
                pub sub: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub data: runtime_types::pallet_identity::types::Data,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveSub {
                pub sub: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct QuitSub;
            pub struct TransactionApi;
            impl TransactionApi {
                ///Add a registrar to the system.
                ///
                ///The dispatch origin for this call must be `T::RegistrarOrigin`.
                ///
                /// - `account`: the account of the registrar.
                ///
                ///Emits `RegistrarAdded` if successful.
                ///
                ///## Complexity
                /// - `O(R)` where `R` registrar-count (governance-bounded and code-bounded).
                pub fn add_registrar(
                    &self,
                    account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<AddRegistrar> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "add_registrar",
                        AddRegistrar { account },
                        [
                            157u8, 232u8, 252u8, 190u8, 203u8, 233u8, 127u8, 63u8, 111u8, 16u8,
                            118u8, 200u8, 31u8, 234u8, 144u8, 111u8, 161u8, 224u8, 217u8, 86u8,
                            179u8, 254u8, 162u8, 212u8, 248u8, 8u8, 125u8, 89u8, 23u8, 195u8, 4u8,
                            231u8,
                        ],
                    )
                }
                ///Set an account's identity information and reserve the appropriate deposit.
                ///
                ///If the account already has identity information, the deposit is taken as part
                /// payment for the new deposit.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `info`: The identity information.
                ///
                ///Emits `IdentitySet` if successful.
                ///
                ///## Complexity
                /// - `O(X + X' + R)`
                ///  - where `X` additional-field-count (deposit-bounded and code-bounded)
                ///  - where `R` judgements-count (registrar-count-bounded)
                pub fn set_identity(
                    &self,
                    info: runtime_types::pallet_identity::types::IdentityInfo,
                ) -> ::subxt::tx::Payload<SetIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_identity",
                        SetIdentity { info: ::std::boxed::Box::new(info) },
                        [
                            130u8, 89u8, 118u8, 6u8, 134u8, 166u8, 35u8, 192u8, 73u8, 6u8, 171u8,
                            20u8, 225u8, 255u8, 152u8, 142u8, 111u8, 8u8, 206u8, 200u8, 64u8, 52u8,
                            110u8, 123u8, 42u8, 101u8, 191u8, 242u8, 133u8, 139u8, 154u8, 205u8,
                        ],
                    )
                }
                ///Set the sub-accounts of the sender.
                ///
                ///Payment: Any aggregate balance reserved by previous `set_subs` calls will be
                /// returned and an amount `SubAccountDeposit` will be reserved for
                /// each item in `subs`.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must have a
                /// registered identity.
                ///
                /// - `subs`: The identity's (new) sub-accounts.
                ///
                ///## Complexity
                /// - `O(P + S)`
                ///  - where `P` old-subs-count (hard- and deposit-bounded).
                ///  - where `S` subs-count (hard- and deposit-bounded).
                pub fn set_subs(
                    &self,
                    subs: ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                ) -> ::subxt::tx::Payload<SetSubs> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_subs",
                        SetSubs { subs },
                        [
                            177u8, 219u8, 84u8, 183u8, 5u8, 32u8, 192u8, 82u8, 174u8, 68u8, 198u8,
                            224u8, 56u8, 85u8, 134u8, 171u8, 30u8, 132u8, 140u8, 236u8, 117u8,
                            24u8, 150u8, 218u8, 146u8, 194u8, 144u8, 92u8, 103u8, 206u8, 46u8,
                            90u8,
                        ],
                    )
                }
                ///Clear an account's identity info and all sub-accounts and return all deposits.
                ///
                ///Payment: All reserved balances on the account are returned.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must have a
                /// registered identity.
                ///
                ///Emits `IdentityCleared` if successful.
                ///
                ///## Complexity
                /// - `O(R + S + X)`
                ///  - where `R` registrar-count (governance-bounded).
                ///  - where `S` subs-count (hard- and deposit-bounded).
                ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                pub fn clear_identity(&self) -> ::subxt::tx::Payload<ClearIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "clear_identity",
                        ClearIdentity {},
                        [
                            75u8, 44u8, 74u8, 122u8, 149u8, 202u8, 114u8, 230u8, 0u8, 255u8, 140u8,
                            122u8, 14u8, 196u8, 205u8, 249u8, 220u8, 94u8, 216u8, 34u8, 63u8, 14u8,
                            8u8, 205u8, 74u8, 23u8, 181u8, 129u8, 252u8, 110u8, 231u8, 114u8,
                        ],
                    )
                }
                ///Request a judgement from a registrar.
                ///
                ///Payment: At most `max_fee` will be reserved for payment to the registrar if
                /// judgement given.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must have a
                ///registered identity.
                ///
                /// - `reg_index`: The index of the registrar whose judgement is requested.
                /// - `max_fee`: The maximum fee that may be paid. This should just be
                ///   auto-populated as:
                ///
                ///```nocompile
                /// Self::registrars().get(reg_index).unwrap().fee
                /// ```
                ///
                ///Emits `JudgementRequested` if successful.
                ///
                ///## Complexity
                /// - `O(R + X)`.
                ///  - where `R` registrar-count (governance-bounded).
                ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                pub fn request_judgement(
                    &self,
                    reg_index: ::core::primitive::u32,
                    max_fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<RequestJudgement> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "request_judgement",
                        RequestJudgement { reg_index, max_fee },
                        [
                            186u8, 149u8, 61u8, 54u8, 159u8, 194u8, 77u8, 161u8, 220u8, 157u8, 3u8,
                            216u8, 23u8, 105u8, 119u8, 76u8, 144u8, 198u8, 157u8, 45u8, 235u8,
                            139u8, 87u8, 82u8, 81u8, 12u8, 25u8, 134u8, 225u8, 92u8, 182u8, 101u8,
                        ],
                    )
                }
                ///Cancel a previous request.
                ///
                ///Payment: A previously reserved deposit is returned on success.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must have a
                ///registered identity.
                ///
                /// - `reg_index`: The index of the registrar whose judgement is no longer
                ///   requested.
                ///
                ///Emits `JudgementUnrequested` if successful.
                ///
                ///## Complexity
                /// - `O(R + X)`.
                ///  - where `R` registrar-count (governance-bounded).
                ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                pub fn cancel_request(
                    &self,
                    reg_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<CancelRequest> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "cancel_request",
                        CancelRequest { reg_index },
                        [
                            83u8, 180u8, 239u8, 126u8, 32u8, 51u8, 17u8, 20u8, 180u8, 3u8, 59u8,
                            96u8, 24u8, 32u8, 136u8, 92u8, 58u8, 254u8, 68u8, 70u8, 50u8, 11u8,
                            51u8, 91u8, 180u8, 79u8, 81u8, 84u8, 216u8, 138u8, 6u8, 215u8,
                        ],
                    )
                }
                ///Set the fee required for a judgement to be requested from a registrar.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must be the
                /// account of the registrar whose index is `index`.
                ///
                /// - `index`: the index of the registrar whose fee is to be set.
                /// - `fee`: the new fee.
                ///
                ///## Complexity
                /// - `O(R)`.
                ///  - where `R` registrar-count (governance-bounded).
                pub fn set_fee(
                    &self,
                    index: ::core::primitive::u32,
                    fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<SetFee> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_fee",
                        SetFee { index, fee },
                        [
                            21u8, 157u8, 123u8, 182u8, 160u8, 190u8, 117u8, 37u8, 136u8, 133u8,
                            104u8, 234u8, 31u8, 145u8, 115u8, 154u8, 125u8, 40u8, 2u8, 87u8, 118u8,
                            56u8, 247u8, 73u8, 89u8, 0u8, 251u8, 3u8, 58u8, 105u8, 239u8, 211u8,
                        ],
                    )
                }
                ///Change the account associated with a registrar.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must be the
                /// account of the registrar whose index is `index`.
                ///
                /// - `index`: the index of the registrar whose fee is to be set.
                /// - `new`: the new account ID.
                ///
                ///## Complexity
                /// - `O(R)`.
                ///  - where `R` registrar-count (governance-bounded).
                pub fn set_account_id(
                    &self,
                    index: ::core::primitive::u32,
                    new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<SetAccountId> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_account_id",
                        SetAccountId { index, new },
                        [
                            13u8, 91u8, 36u8, 7u8, 88u8, 64u8, 151u8, 104u8, 94u8, 174u8, 195u8,
                            99u8, 97u8, 181u8, 236u8, 251u8, 26u8, 236u8, 234u8, 40u8, 183u8, 38u8,
                            220u8, 216u8, 48u8, 115u8, 7u8, 230u8, 216u8, 28u8, 123u8, 11u8,
                        ],
                    )
                }
                ///Set the field information for a registrar.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must be the
                /// account of the registrar whose index is `index`.
                ///
                /// - `index`: the index of the registrar whose fee is to be set.
                /// - `fields`: the fields that the registrar concerns themselves with.
                ///
                ///## Complexity
                /// - `O(R)`.
                ///  - where `R` registrar-count (governance-bounded).
                pub fn set_fields(
                    &self,
                    index: ::core::primitive::u32,
                    fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                ) -> ::subxt::tx::Payload<SetFields> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_fields",
                        SetFields { index, fields },
                        [
                            50u8, 196u8, 179u8, 71u8, 66u8, 65u8, 235u8, 7u8, 51u8, 14u8, 81u8,
                            173u8, 201u8, 58u8, 6u8, 151u8, 174u8, 245u8, 102u8, 184u8, 28u8, 84u8,
                            125u8, 93u8, 126u8, 134u8, 92u8, 203u8, 200u8, 129u8, 240u8, 252u8,
                        ],
                    )
                }
                ///Provide a judgement for an account's identity.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must be the
                /// account of the registrar whose index is `reg_index`.
                ///
                /// - `reg_index`: the index of the registrar whose judgement is being made.
                /// - `target`: the account whose identity the judgement is upon. This must be an
                ///   account
                ///  with a registered identity.
                /// - `judgement`: the judgement of the registrar of index `reg_index` about
                ///   `target`.
                /// - `identity`: The hash of the [`IdentityInfo`] for that the judgement is
                ///   provided.
                ///
                ///Emits `JudgementGiven` if successful.
                ///
                ///## Complexity
                /// - `O(R + X)`.
                ///  - where `R` registrar-count (governance-bounded).
                ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                pub fn provide_judgement(
                    &self,
                    reg_index: ::core::primitive::u32,
                    target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    judgement: runtime_types::pallet_identity::types::Judgement<
                        ::core::primitive::u128,
                    >,
                    identity: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<ProvideJudgement> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "provide_judgement",
                        ProvideJudgement { reg_index, target, judgement, identity },
                        [
                            147u8, 66u8, 29u8, 90u8, 149u8, 65u8, 161u8, 115u8, 12u8, 254u8, 188u8,
                            248u8, 165u8, 115u8, 191u8, 2u8, 167u8, 223u8, 199u8, 169u8, 203u8,
                            64u8, 101u8, 217u8, 73u8, 185u8, 93u8, 109u8, 22u8, 184u8, 146u8, 73u8,
                        ],
                    )
                }
                ///Remove an account's identity and sub-account information and slash the deposits.
                ///
                ///Payment: Reserved balances from `set_subs` and `set_identity` are slashed and
                /// handled by `Slash`. Verification request deposits are not
                /// returned; they should be cancelled manually using
                /// `cancel_request`.
                ///
                ///The dispatch origin for this call must match `T::ForceOrigin`.
                ///
                /// - `target`: the account whose identity the judgement is upon. This must be an
                ///   account
                ///  with a registered identity.
                ///
                ///Emits `IdentityKilled` if successful.
                ///
                ///## Complexity
                /// - `O(R + S + X)`
                ///  - where `R` registrar-count (governance-bounded).
                ///  - where `S` subs-count (hard- and deposit-bounded).
                ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                pub fn kill_identity(
                    &self,
                    target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<KillIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "kill_identity",
                        KillIdentity { target },
                        [
                            76u8, 13u8, 158u8, 219u8, 221u8, 0u8, 151u8, 241u8, 137u8, 136u8,
                            179u8, 194u8, 188u8, 230u8, 56u8, 16u8, 254u8, 28u8, 127u8, 216u8,
                            205u8, 117u8, 224u8, 121u8, 240u8, 231u8, 126u8, 181u8, 230u8, 68u8,
                            13u8, 174u8,
                        ],
                    )
                }
                ///Add the given account to the sender's subs.
                ///
                ///Payment: Balance reserved by a previous `set_subs` call for one sub will be
                /// repatriated to the sender.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must have a
                /// registered sub identity of `sub`.
                pub fn add_sub(
                    &self,
                    sub: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    data: runtime_types::pallet_identity::types::Data,
                ) -> ::subxt::tx::Payload<AddSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "add_sub",
                        AddSub { sub, data },
                        [
                            122u8, 218u8, 25u8, 93u8, 33u8, 176u8, 191u8, 254u8, 223u8, 147u8,
                            100u8, 135u8, 86u8, 71u8, 47u8, 163u8, 105u8, 222u8, 162u8, 173u8,
                            207u8, 182u8, 130u8, 128u8, 214u8, 242u8, 101u8, 250u8, 242u8, 24u8,
                            17u8, 84u8,
                        ],
                    )
                }
                ///Alter the associated name of the given sub-account.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must have a
                /// registered sub identity of `sub`.
                pub fn rename_sub(
                    &self,
                    sub: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    data: runtime_types::pallet_identity::types::Data,
                ) -> ::subxt::tx::Payload<RenameSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "rename_sub",
                        RenameSub { sub, data },
                        [
                            166u8, 167u8, 49u8, 114u8, 199u8, 168u8, 187u8, 221u8, 100u8, 85u8,
                            147u8, 211u8, 157u8, 31u8, 109u8, 135u8, 194u8, 135u8, 15u8, 89u8,
                            59u8, 57u8, 252u8, 163u8, 9u8, 138u8, 216u8, 189u8, 177u8, 42u8, 96u8,
                            34u8,
                        ],
                    )
                }
                ///Remove the given account from the sender's subs.
                ///
                ///Payment: Balance reserved by a previous `set_subs` call for one sub will be
                /// repatriated to the sender.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must have a
                /// registered sub identity of `sub`.
                pub fn remove_sub(
                    &self,
                    sub: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<RemoveSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "remove_sub",
                        RemoveSub { sub },
                        [
                            106u8, 223u8, 210u8, 67u8, 54u8, 11u8, 144u8, 222u8, 42u8, 46u8, 157u8,
                            33u8, 13u8, 245u8, 166u8, 195u8, 227u8, 81u8, 224u8, 149u8, 154u8,
                            158u8, 187u8, 203u8, 215u8, 91u8, 43u8, 105u8, 69u8, 213u8, 141u8,
                            124u8,
                        ],
                    )
                }
                ///Remove the sender as a sub-account.
                ///
                ///Payment: Balance reserved by a previous `set_subs` call for one sub will be
                /// repatriated to the sender (*not* the original depositor).
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must have a
                /// registered super-identity.
                ///
                ///NOTE: This should not normally be used, but is provided in the case that the
                /// non- controller of an account is maliciously registered as a
                /// sub-account.
                pub fn quit_sub(&self) -> ::subxt::tx::Payload<QuitSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "quit_sub",
                        QuitSub {},
                        [
                            62u8, 57u8, 73u8, 72u8, 119u8, 216u8, 250u8, 155u8, 57u8, 169u8, 157u8,
                            44u8, 87u8, 51u8, 63u8, 231u8, 77u8, 7u8, 0u8, 119u8, 244u8, 42u8,
                            179u8, 51u8, 254u8, 240u8, 55u8, 25u8, 142u8, 38u8, 87u8, 44u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_identity::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A name was set or reset (which will remove all judgements).
            pub struct IdentitySet {
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for IdentitySet {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentitySet";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A name was cleared, and the given balance returned.
            pub struct IdentityCleared {
                pub who: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for IdentityCleared {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityCleared";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A name was removed and the given balance slashed.
            pub struct IdentityKilled {
                pub who: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for IdentityKilled {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityKilled";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A judgement was asked from a registrar.
            pub struct JudgementRequested {
                pub who: ::subxt::utils::AccountId32,
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for JudgementRequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementRequested";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A judgement request was retracted.
            pub struct JudgementUnrequested {
                pub who: ::subxt::utils::AccountId32,
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for JudgementUnrequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementUnrequested";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A judgement was given by a registrar.
            pub struct JudgementGiven {
                pub target: ::subxt::utils::AccountId32,
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for JudgementGiven {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementGiven";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A registrar was added.
            pub struct RegistrarAdded {
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for RegistrarAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "RegistrarAdded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A sub-identity was added to an identity and the deposit paid.
            pub struct SubIdentityAdded {
                pub sub: ::subxt::utils::AccountId32,
                pub main: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubIdentityAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityAdded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A sub-identity was removed from an identity and the deposit freed.
            pub struct SubIdentityRemoved {
                pub sub: ::subxt::utils::AccountId32,
                pub main: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubIdentityRemoved {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRemoved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A sub-identity was cleared, and the given deposit repatriated from the
            ///main identity account to the sub-identity account.
            pub struct SubIdentityRevoked {
                pub sub: ::subxt::utils::AccountId32,
                pub main: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubIdentityRevoked {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRevoked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Information that is pertinent to identify the entity behind an account.
                ///
                /// TWOX-NOTE: OK ― `AccountId` is a secure hash.
                pub fn identity_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_identity::types::Registration<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "IdentityOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            193u8, 195u8, 180u8, 188u8, 129u8, 250u8, 180u8, 219u8, 22u8, 95u8,
                            175u8, 170u8, 143u8, 188u8, 80u8, 124u8, 234u8, 228u8, 245u8, 39u8,
                            72u8, 153u8, 107u8, 199u8, 23u8, 75u8, 47u8, 247u8, 104u8, 208u8,
                            171u8, 82u8,
                        ],
                    )
                }
                /// Information that is pertinent to identify the entity behind an account.
                ///
                /// TWOX-NOTE: OK ― `AccountId` is a secure hash.
                pub fn identity_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_identity::types::Registration<::core::primitive::u128>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "IdentityOf",
                        Vec::new(),
                        [
                            193u8, 195u8, 180u8, 188u8, 129u8, 250u8, 180u8, 219u8, 22u8, 95u8,
                            175u8, 170u8, 143u8, 188u8, 80u8, 124u8, 234u8, 228u8, 245u8, 39u8,
                            72u8, 153u8, 107u8, 199u8, 23u8, 75u8, 47u8, 247u8, 104u8, 208u8,
                            171u8, 82u8,
                        ],
                    )
                }
                /// The super-identity of an alternative "sub" identity together with its name,
                /// within that context. If the account is not some other account's
                /// sub-identity, then just `None`.
                pub fn super_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::subxt::utils::AccountId32, runtime_types::pallet_identity::types::Data),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SuperOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            170u8, 249u8, 112u8, 249u8, 75u8, 176u8, 21u8, 29u8, 152u8, 149u8,
                            69u8, 113u8, 20u8, 92u8, 113u8, 130u8, 135u8, 62u8, 18u8, 204u8, 166u8,
                            193u8, 133u8, 167u8, 248u8, 117u8, 80u8, 137u8, 158u8, 111u8, 100u8,
                            137u8,
                        ],
                    )
                }
                /// The super-identity of an alternative "sub" identity together with its name,
                /// within that context. If the account is not some other account's
                /// sub-identity, then just `None`.
                pub fn super_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::subxt::utils::AccountId32, runtime_types::pallet_identity::types::Data),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SuperOf",
                        Vec::new(),
                        [
                            170u8, 249u8, 112u8, 249u8, 75u8, 176u8, 21u8, 29u8, 152u8, 149u8,
                            69u8, 113u8, 20u8, 92u8, 113u8, 130u8, 135u8, 62u8, 18u8, 204u8, 166u8,
                            193u8, 133u8, 167u8, 248u8, 117u8, 80u8, 137u8, 158u8, 111u8, 100u8,
                            137u8,
                        ],
                    )
                }
                /// Alternative "sub" identities of this account.
                ///
                /// The first item is the deposit, the second is a vector of the accounts.
                ///
                /// TWOX-NOTE: OK ― `AccountId` is a secure hash.
                pub fn subs_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SubsOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            128u8, 15u8, 175u8, 155u8, 216u8, 225u8, 200u8, 169u8, 215u8, 206u8,
                            110u8, 22u8, 204u8, 89u8, 212u8, 210u8, 159u8, 169u8, 53u8, 7u8, 44u8,
                            164u8, 91u8, 151u8, 7u8, 227u8, 38u8, 230u8, 175u8, 84u8, 6u8, 4u8,
                        ],
                    )
                }
                /// Alternative "sub" identities of this account.
                ///
                /// The first item is the deposit, the second is a vector of the accounts.
                ///
                /// TWOX-NOTE: OK ― `AccountId` is a secure hash.
                pub fn subs_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SubsOf",
                        Vec::new(),
                        [
                            128u8, 15u8, 175u8, 155u8, 216u8, 225u8, 200u8, 169u8, 215u8, 206u8,
                            110u8, 22u8, 204u8, 89u8, 212u8, 210u8, 159u8, 169u8, 53u8, 7u8, 44u8,
                            164u8, 91u8, 151u8, 7u8, 227u8, 38u8, 230u8, 175u8, 84u8, 6u8, 4u8,
                        ],
                    )
                }
                /// The set of registrars. Not expected to get very big as can only be added through
                /// a special origin (likely a council motion).
                ///
                /// The index into this can be cast to `RegistrarIndex` to get a valid value.
                pub fn registrars(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_identity::types::RegistrarInfo<
                                ::core::primitive::u128,
                                ::subxt::utils::AccountId32,
                            >,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "Registrars",
                        vec![],
                        [
                            157u8, 87u8, 39u8, 240u8, 154u8, 54u8, 241u8, 229u8, 76u8, 9u8, 62u8,
                            252u8, 40u8, 143u8, 186u8, 182u8, 233u8, 187u8, 251u8, 61u8, 236u8,
                            229u8, 19u8, 55u8, 42u8, 36u8, 82u8, 173u8, 215u8, 155u8, 229u8, 111u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The amount held on deposit for a registered identity
                pub fn basic_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "BasicDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The amount held on deposit per additional field for a registered identity.
                pub fn field_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "FieldDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The amount held on deposit for a registered subaccount. This should account for
                /// the fact that one storage item's value will increase by the size
                /// of an account ID, and there will be another trie item whose
                /// value is the size of an account ID plus 32 bytes.
                pub fn sub_account_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "SubAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The maximum number of sub-accounts allowed per identified account.
                pub fn max_sub_accounts(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "MaxSubAccounts",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Maximum number of additional fields that may be stored in an ID. Needed to bound
                /// the I/O required to access an identity, but can be pretty high.
                pub fn max_additional_fields(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "MaxAdditionalFields",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Maxmimum number of registrars allowed in the system. Needed to bound the
                /// complexity of, e.g., updating judgements.
                pub fn max_registrars(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "MaxRegistrars",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod society {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Bid {
                pub value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Unbid {
                pub pos: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Vouch {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub value: ::core::primitive::u128,
                pub tip: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Unvouch {
                pub pos: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Vote {
                pub candidate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub approve: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DefenderVote {
                pub approve: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Payout;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Found {
                pub founder: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub max_members: ::core::primitive::u32,
                pub rules: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Unfound;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct JudgeSuspendedMember {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub forgive: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct JudgeSuspendedCandidate {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub judgement: runtime_types::pallet_society::Judgement,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxMembers {
                pub max: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///A user outside of the society can make a bid for entry.
                ///
                ///Payment: `CandidateDeposit` will be reserved for making a bid. It is returned
                ///when the bid becomes a member, or if the bid calls `unbid`.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Parameters:
                /// - `value`: A one time payment the bid would like to receive when joining the
                ///   society.
                ///
                ///## Complexity
                /// - O(M + B + C + logM + logB + X)
                /// 	  - B (len of bids)
                ///  - C (len of candidates)
                ///  - M (len of members)
                ///  - X (balance reserve)
                pub fn bid(&self, value: ::core::primitive::u128) -> ::subxt::tx::Payload<Bid> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "bid",
                        Bid { value },
                        [
                            101u8, 242u8, 48u8, 240u8, 74u8, 51u8, 49u8, 61u8, 6u8, 7u8, 47u8,
                            200u8, 185u8, 217u8, 176u8, 139u8, 44u8, 167u8, 131u8, 23u8, 219u8,
                            69u8, 216u8, 213u8, 177u8, 50u8, 8u8, 213u8, 130u8, 90u8, 81u8, 4u8,
                        ],
                    )
                }
                ///A bidder can remove their bid for entry into society.
                ///By doing so, they will have their candidate deposit returned or
                ///they will unvouch their voucher.
                ///
                ///Payment: The bid deposit is unreserved if the user made a bid.
                ///
                ///The dispatch origin for this call must be _Signed_ and a bidder.
                ///
                ///Parameters:
                /// - `pos`: Position in the `Bids` vector of the bid who wants to unbid.
                ///
                ///## Complexity
                /// - O(B + X)
                ///  - B (len of bids)
                ///  - X (balance unreserve)
                pub fn unbid(&self, pos: ::core::primitive::u32) -> ::subxt::tx::Payload<Unbid> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "unbid",
                        Unbid { pos },
                        [
                            255u8, 165u8, 200u8, 241u8, 93u8, 213u8, 155u8, 12u8, 178u8, 108u8,
                            222u8, 14u8, 26u8, 226u8, 107u8, 129u8, 162u8, 151u8, 81u8, 83u8, 39u8,
                            106u8, 151u8, 149u8, 19u8, 85u8, 28u8, 222u8, 227u8, 9u8, 189u8, 39u8,
                        ],
                    )
                }
                ///As a member, vouch for someone to join society by placing a bid on their behalf.
                ///
                ///There is no deposit required to vouch for a new bid, but a member can only vouch
                /// for one bid at a time. If the bid becomes a suspended candidate
                /// and ultimately rejected by the suspension judgement origin, the
                /// member will be banned from vouching again.
                ///
                ///As a vouching member, you can claim a tip if the candidate is accepted. This tip
                /// will be paid as a portion of the reward the member will receive
                /// for joining the society.
                ///
                ///The dispatch origin for this call must be _Signed_ and a member.
                ///
                ///Parameters:
                /// - `who`: The user who you would like to vouch for.
                /// - `value`: The total reward to be paid between you and the candidate if they
                ///   become
                ///a member in the society.
                /// - `tip`: Your cut of the total `value` payout when the candidate is inducted
                ///   into
                ///the society. Tips larger than `value` will be saturated upon payout.
                ///
                ///## Complexity
                /// - O(M + B + C + logM + logB + X)
                ///  - B (len of bids)
                ///  - C (len of candidates)
                ///  - M (len of members)
                ///  - X (balance reserve)
                pub fn vouch(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    value: ::core::primitive::u128,
                    tip: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<Vouch> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "vouch",
                        Vouch { who, value, tip },
                        [
                            127u8, 128u8, 159u8, 190u8, 241u8, 100u8, 91u8, 190u8, 31u8, 60u8,
                            76u8, 143u8, 108u8, 225u8, 21u8, 170u8, 96u8, 23u8, 171u8, 0u8, 71u8,
                            29u8, 207u8, 66u8, 102u8, 132u8, 145u8, 94u8, 178u8, 12u8, 94u8, 199u8,
                        ],
                    )
                }
                ///As a vouching member, unvouch a bid. This only works while vouched user is
                ///only a bidder (and not a candidate).
                ///
                ///The dispatch origin for this call must be _Signed_ and a vouching member.
                ///
                ///Parameters:
                /// - `pos`: Position in the `Bids` vector of the bid who should be unvouched.
                ///
                ///## Complexity
                /// - O(B)
                ///  - B (len of bids)
                pub fn unvouch(
                    &self,
                    pos: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Unvouch> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "unvouch",
                        Unvouch { pos },
                        [
                            242u8, 181u8, 109u8, 170u8, 197u8, 53u8, 8u8, 241u8, 47u8, 28u8, 1u8,
                            209u8, 142u8, 106u8, 136u8, 163u8, 42u8, 169u8, 7u8, 1u8, 202u8, 38u8,
                            199u8, 232u8, 13u8, 111u8, 92u8, 69u8, 237u8, 90u8, 134u8, 84u8,
                        ],
                    )
                }
                ///As a member, vote on a candidate.
                ///
                ///The dispatch origin for this call must be _Signed_ and a member.
                ///
                ///Parameters:
                /// - `candidate`: The candidate that the member would like to bid on.
                /// - `approve`: A boolean which says if the candidate should be approved (`true`)
                ///   or
                ///  rejected (`false`).
                ///
                ///## Complexity
                /// - O(M + logM + C)
                ///  - C (len of candidates)
                ///  - M (len of members)
                pub fn vote(
                    &self,
                    candidate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "vote",
                        Vote { candidate, approve },
                        [
                            21u8, 51u8, 196u8, 128u8, 99u8, 32u8, 196u8, 78u8, 129u8, 161u8, 94u8,
                            208u8, 242u8, 249u8, 146u8, 62u8, 184u8, 75u8, 150u8, 114u8, 117u8,
                            17u8, 14u8, 9u8, 93u8, 61u8, 91u8, 170u8, 239u8, 21u8, 235u8, 154u8,
                        ],
                    )
                }
                ///As a member, vote on the defender.
                ///
                ///The dispatch origin for this call must be _Signed_ and a member.
                ///
                ///Parameters:
                /// - `approve`: A boolean which says if the candidate should be
                ///approved (`true`) or rejected (`false`).
                ///
                ///## Complexity
                /// - O(M + logM)
                ///  - M (len of members)
                pub fn defender_vote(
                    &self,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<DefenderVote> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "defender_vote",
                        DefenderVote { approve },
                        [
                            248u8, 232u8, 243u8, 44u8, 252u8, 68u8, 118u8, 143u8, 57u8, 34u8,
                            196u8, 4u8, 71u8, 14u8, 28u8, 164u8, 139u8, 184u8, 20u8, 71u8, 86u8,
                            227u8, 172u8, 84u8, 213u8, 221u8, 155u8, 198u8, 56u8, 93u8, 209u8,
                            211u8,
                        ],
                    )
                }
                ///Transfer the first matured payout for the sender and remove it from the records.
                ///
                ///NOTE: This extrinsic needs to be called multiple times to claim multiple matured
                ///payouts.
                ///
                ///Payment: The member will receive a payment equal to their first matured
                ///payout to their free balance.
                ///
                ///The dispatch origin for this call must be _Signed_ and a member with
                ///payouts remaining.
                ///
                ///## Complexity
                /// - O(M + logM + P + X)
                ///  - M (len of members)
                ///  - P (number of payouts for a particular member)
                ///  - X (currency transfer call)
                pub fn payout(&self) -> ::subxt::tx::Payload<Payout> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "payout",
                        Payout {},
                        [
                            255u8, 171u8, 227u8, 58u8, 244u8, 95u8, 239u8, 127u8, 129u8, 211u8,
                            131u8, 191u8, 154u8, 234u8, 85u8, 69u8, 173u8, 135u8, 179u8, 83u8,
                            17u8, 41u8, 34u8, 137u8, 174u8, 251u8, 127u8, 62u8, 74u8, 255u8, 19u8,
                            234u8,
                        ],
                    )
                }
                ///Found the society.
                ///
                ///This is done as a discrete action in order to allow for the
                ///pallet to be included into a running chain and can only be done once.
                ///
                ///The dispatch origin for this call must be from the _FounderSetOrigin_.
                ///
                ///Parameters:
                /// - `founder` - The first member and head of the newly founded society.
                /// - `max_members` - The initial max number of members for the society.
                /// - `rules` - The rules of this society concerning membership.
                ///
                ///## Complexity
                /// - O(1)
                pub fn found(
                    &self,
                    founder: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    max_members: ::core::primitive::u32,
                    rules: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<Found> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "found",
                        Found { founder, max_members, rules },
                        [
                            79u8, 100u8, 186u8, 186u8, 223u8, 218u8, 108u8, 0u8, 44u8, 143u8,
                            212u8, 248u8, 5u8, 11u8, 28u8, 12u8, 161u8, 22u8, 81u8, 168u8, 156u8,
                            240u8, 61u8, 26u8, 24u8, 194u8, 18u8, 200u8, 99u8, 253u8, 49u8, 171u8,
                        ],
                    )
                }
                ///Annul the founding of the society.
                ///
                ///The dispatch origin for this call must be Signed, and the signing account must
                /// be both the `Founder` and the `Head`. This implies that it may
                /// only be done when there is one member.
                ///
                ///## Complexity
                /// - O(1)
                pub fn unfound(&self) -> ::subxt::tx::Payload<Unfound> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "unfound",
                        Unfound {},
                        [
                            30u8, 120u8, 137u8, 175u8, 237u8, 121u8, 90u8, 9u8, 111u8, 75u8, 51u8,
                            85u8, 86u8, 182u8, 6u8, 249u8, 62u8, 246u8, 21u8, 150u8, 70u8, 148u8,
                            39u8, 14u8, 168u8, 250u8, 164u8, 235u8, 23u8, 18u8, 164u8, 97u8,
                        ],
                    )
                }
                ///Allow suspension judgement origin to make judgement on a suspended member.
                ///
                ///If a suspended member is forgiven, we simply add them back as a member, not
                /// affecting any of the existing storage items for that member.
                ///
                ///If a suspended member is rejected, remove all associated storage items,
                /// including their payouts, and remove any vouched bids they
                /// currently have.
                ///
                ///The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.
                ///
                ///Parameters:
                /// - `who` - The suspended member to be judged.
                /// - `forgive` - A boolean representing whether the suspension judgement origin
                ///   forgives
                ///  (`true`) or rejects (`false`) a suspended member.
                ///
                ///## Complexity
                /// - O(M + logM + B)
                ///  - B (len of bids)
                ///  - M (len of members)
                pub fn judge_suspended_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    forgive: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<JudgeSuspendedMember> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "judge_suspended_member",
                        JudgeSuspendedMember { who, forgive },
                        [
                            23u8, 217u8, 201u8, 122u8, 199u8, 25u8, 62u8, 96u8, 214u8, 34u8, 219u8,
                            200u8, 240u8, 234u8, 74u8, 211u8, 120u8, 119u8, 13u8, 132u8, 240u8,
                            58u8, 197u8, 18u8, 113u8, 209u8, 201u8, 232u8, 58u8, 246u8, 229u8,
                            249u8,
                        ],
                    )
                }
                ///Allow suspended judgement origin to make judgement on a suspended candidate.
                ///
                ///If the judgement is `Approve`, we add them to society as a member with the
                /// appropriate payment for joining society.
                ///
                ///If the judgement is `Reject`, we either slash the deposit of the bid, giving it
                /// back to the society treasury, or we ban the voucher from
                /// vouching again.
                ///
                ///If the judgement is `Rebid`, we put the candidate back in the bid pool and let
                /// them go through the induction process again.
                ///
                ///The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.
                ///
                ///Parameters:
                /// - `who` - The suspended candidate to be judged.
                /// - `judgement` - `Approve`, `Reject`, or `Rebid`.
                ///
                ///## Complexity
                /// - O(M + logM + B + X)
                ///  - B (len of bids)
                ///  - M (len of members)
                ///  - X (balance action)
                pub fn judge_suspended_candidate(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    judgement: runtime_types::pallet_society::Judgement,
                ) -> ::subxt::tx::Payload<JudgeSuspendedCandidate> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "judge_suspended_candidate",
                        JudgeSuspendedCandidate { who, judgement },
                        [
                            120u8, 138u8, 235u8, 220u8, 44u8, 46u8, 111u8, 229u8, 74u8, 169u8,
                            174u8, 63u8, 64u8, 113u8, 127u8, 194u8, 172u8, 34u8, 63u8, 202u8,
                            219u8, 82u8, 182u8, 34u8, 238u8, 107u8, 139u8, 244u8, 90u8, 83u8,
                            207u8, 43u8,
                        ],
                    )
                }
                ///Allows root origin to change the maximum number of members in society.
                ///Max membership count must be greater than 1.
                ///
                ///The dispatch origin for this call must be from _ROOT_.
                ///
                ///Parameters:
                /// - `max` - The maximum number of members for the society.
                ///
                ///## Complexity
                /// - O(1)
                pub fn set_max_members(
                    &self,
                    max: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMaxMembers> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "set_max_members",
                        SetMaxMembers { max },
                        [
                            4u8, 120u8, 194u8, 207u8, 5u8, 93u8, 40u8, 12u8, 1u8, 151u8, 127u8,
                            162u8, 218u8, 228u8, 1u8, 249u8, 148u8, 139u8, 124u8, 171u8, 94u8,
                            151u8, 40u8, 164u8, 171u8, 122u8, 65u8, 233u8, 27u8, 82u8, 74u8, 67u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_society::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The society is founded by the given identity.
            pub struct Founded {
                pub founder: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Founded {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Founded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A membership bid just happened. The given account is the candidate's ID and their
            /// offer is the second.
            pub struct Bid {
                pub candidate_id: ::subxt::utils::AccountId32,
                pub offer: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Bid {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Bid";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A membership bid just happened by vouching. The given account is the candidate's ID
            /// and their offer is the second. The vouching party is the third.
            pub struct Vouch {
                pub candidate_id: ::subxt::utils::AccountId32,
                pub offer: ::core::primitive::u128,
                pub vouching: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Vouch {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Vouch";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A candidate was dropped (due to an excess of bids in the system).
            pub struct AutoUnbid {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for AutoUnbid {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "AutoUnbid";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A candidate was dropped (by their request).
            pub struct Unbid {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Unbid {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Unbid";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A candidate was dropped (by request of who vouched for them).
            pub struct Unvouch {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Unvouch {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Unvouch";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A group of candidates have been inducted. The batch's primary is the first value,
            /// the batch in full is the second.
            pub struct Inducted {
                pub primary: ::subxt::utils::AccountId32,
                pub candidates: ::std::vec::Vec<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for Inducted {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Inducted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A suspended member has been judged.
            pub struct SuspendedMemberJudgement {
                pub who: ::subxt::utils::AccountId32,
                pub judged: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for SuspendedMemberJudgement {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "SuspendedMemberJudgement";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A candidate has been suspended
            pub struct CandidateSuspended {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for CandidateSuspended {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "CandidateSuspended";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A member has been suspended
            pub struct MemberSuspended {
                pub member: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for MemberSuspended {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "MemberSuspended";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A member has been challenged
            pub struct Challenged {
                pub member: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Challenged {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Challenged";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A vote has been placed
            pub struct Vote {
                pub candidate: ::subxt::utils::AccountId32,
                pub voter: ::subxt::utils::AccountId32,
                pub vote: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for Vote {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Vote";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A vote has been placed for a defending member
            pub struct DefenderVote {
                pub voter: ::subxt::utils::AccountId32,
                pub vote: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for DefenderVote {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "DefenderVote";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new \[max\] member count has been set
            pub struct NewMaxMembers {
                pub max: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NewMaxMembers {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "NewMaxMembers";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Society is unfounded.
            pub struct Unfounded {
                pub founder: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Unfounded {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Unfounded";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some funds were deposited into the society account.
            pub struct Deposit {
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A group of members has been choosen as Skeptics
            pub struct SkepticsChosen {
                pub skeptics: ::std::vec::Vec<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for SkepticsChosen {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "SkepticsChosen";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The first member.
                pub fn founder(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Founder",
                        vec![],
                        [
                            50u8, 222u8, 149u8, 14u8, 31u8, 163u8, 129u8, 123u8, 150u8, 220u8,
                            16u8, 136u8, 150u8, 245u8, 171u8, 231u8, 75u8, 203u8, 249u8, 123u8,
                            86u8, 43u8, 208u8, 65u8, 41u8, 111u8, 114u8, 254u8, 131u8, 13u8, 26u8,
                            43u8,
                        ],
                    )
                }
                /// A hash of the rules of this society concerning membership. Can only be set once
                /// and only by the founder.
                pub fn rules(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Rules",
                        vec![],
                        [
                            10u8, 206u8, 100u8, 24u8, 227u8, 138u8, 82u8, 125u8, 247u8, 160u8,
                            124u8, 121u8, 148u8, 98u8, 252u8, 214u8, 215u8, 232u8, 160u8, 204u8,
                            23u8, 95u8, 240u8, 16u8, 201u8, 245u8, 13u8, 178u8, 99u8, 61u8, 247u8,
                            137u8,
                        ],
                    )
                }
                /// The current set of candidates; bidders that are attempting to become members.
                pub fn candidates(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::pallet_society::Bid<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Candidates",
                        vec![],
                        [
                            88u8, 231u8, 247u8, 115u8, 122u8, 18u8, 106u8, 195u8, 238u8, 219u8,
                            174u8, 23u8, 179u8, 228u8, 82u8, 26u8, 141u8, 190u8, 206u8, 46u8,
                            177u8, 218u8, 123u8, 152u8, 208u8, 79u8, 57u8, 68u8, 3u8, 208u8, 174u8,
                            193u8,
                        ],
                    )
                }
                /// The set of suspended candidates.
                pub fn suspended_candidates(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        runtime_types::pallet_society::BidKind<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "SuspendedCandidates",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            35u8, 46u8, 78u8, 1u8, 132u8, 103u8, 152u8, 33u8, 86u8, 137u8, 125u8,
                            122u8, 63u8, 175u8, 197u8, 39u8, 255u8, 0u8, 49u8, 53u8, 154u8, 40u8,
                            196u8, 158u8, 133u8, 113u8, 159u8, 168u8, 148u8, 154u8, 57u8, 70u8,
                        ],
                    )
                }
                /// The set of suspended candidates.
                pub fn suspended_candidates_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        runtime_types::pallet_society::BidKind<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "SuspendedCandidates",
                        Vec::new(),
                        [
                            35u8, 46u8, 78u8, 1u8, 132u8, 103u8, 152u8, 33u8, 86u8, 137u8, 125u8,
                            122u8, 63u8, 175u8, 197u8, 39u8, 255u8, 0u8, 49u8, 53u8, 154u8, 40u8,
                            196u8, 158u8, 133u8, 113u8, 159u8, 168u8, 148u8, 154u8, 57u8, 70u8,
                        ],
                    )
                }
                /// Amount of our account balance that is specifically for the next round's bid(s).
                pub fn pot(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Pot",
                        vec![],
                        [
                            242u8, 124u8, 22u8, 252u8, 4u8, 178u8, 161u8, 120u8, 8u8, 185u8, 182u8,
                            177u8, 205u8, 205u8, 192u8, 248u8, 42u8, 8u8, 216u8, 92u8, 194u8,
                            219u8, 74u8, 248u8, 135u8, 105u8, 210u8, 207u8, 159u8, 24u8, 149u8,
                            190u8,
                        ],
                    )
                }
                /// The most primary from the most recently approved members.
                pub fn head(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Head",
                        vec![],
                        [
                            162u8, 185u8, 82u8, 237u8, 221u8, 60u8, 77u8, 96u8, 89u8, 41u8, 162u8,
                            7u8, 174u8, 251u8, 121u8, 247u8, 196u8, 118u8, 57u8, 24u8, 142u8,
                            129u8, 142u8, 106u8, 166u8, 7u8, 86u8, 54u8, 108u8, 110u8, 118u8, 75u8,
                        ],
                    )
                }
                /// The current set of members, ordered.
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Members",
                        vec![],
                        [
                            162u8, 72u8, 174u8, 204u8, 140u8, 105u8, 205u8, 176u8, 197u8, 117u8,
                            206u8, 134u8, 157u8, 110u8, 139u8, 54u8, 43u8, 233u8, 25u8, 51u8, 36u8,
                            238u8, 94u8, 124u8, 221u8, 52u8, 237u8, 71u8, 125u8, 56u8, 129u8,
                            222u8,
                        ],
                    )
                }
                /// The set of suspended members.
                pub fn suspended_members(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "SuspendedMembers",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            158u8, 26u8, 34u8, 152u8, 137u8, 151u8, 205u8, 19u8, 12u8, 138u8,
                            107u8, 21u8, 14u8, 162u8, 103u8, 25u8, 181u8, 13u8, 59u8, 3u8, 225u8,
                            23u8, 242u8, 184u8, 225u8, 122u8, 55u8, 53u8, 79u8, 163u8, 65u8, 57u8,
                        ],
                    )
                }
                /// The set of suspended members.
                pub fn suspended_members_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "SuspendedMembers",
                        Vec::new(),
                        [
                            158u8, 26u8, 34u8, 152u8, 137u8, 151u8, 205u8, 19u8, 12u8, 138u8,
                            107u8, 21u8, 14u8, 162u8, 103u8, 25u8, 181u8, 13u8, 59u8, 3u8, 225u8,
                            23u8, 242u8, 184u8, 225u8, 122u8, 55u8, 53u8, 79u8, 163u8, 65u8, 57u8,
                        ],
                    )
                }
                /// The current bids, stored ordered by the value of the bid.
                pub fn bids(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::pallet_society::Bid<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Bids",
                        vec![],
                        [
                            8u8, 152u8, 107u8, 47u8, 7u8, 45u8, 86u8, 149u8, 230u8, 81u8, 253u8,
                            110u8, 255u8, 83u8, 16u8, 168u8, 169u8, 70u8, 196u8, 167u8, 168u8,
                            98u8, 36u8, 122u8, 124u8, 77u8, 61u8, 245u8, 248u8, 48u8, 224u8, 125u8,
                        ],
                    )
                }
                /// Members currently vouching or banned from vouching again
                pub fn vouching(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::VouchingStatus,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Vouching",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            189u8, 212u8, 60u8, 171u8, 135u8, 82u8, 34u8, 93u8, 206u8, 206u8, 31u8,
                            99u8, 197u8, 0u8, 97u8, 228u8, 118u8, 200u8, 123u8, 81u8, 242u8, 93u8,
                            31u8, 1u8, 9u8, 121u8, 215u8, 223u8, 15u8, 56u8, 223u8, 96u8,
                        ],
                    )
                }
                /// Members currently vouching or banned from vouching again
                pub fn vouching_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::VouchingStatus,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Vouching",
                        Vec::new(),
                        [
                            189u8, 212u8, 60u8, 171u8, 135u8, 82u8, 34u8, 93u8, 206u8, 206u8, 31u8,
                            99u8, 197u8, 0u8, 97u8, 228u8, 118u8, 200u8, 123u8, 81u8, 242u8, 93u8,
                            31u8, 1u8, 9u8, 121u8, 215u8, 223u8, 15u8, 56u8, 223u8, 96u8,
                        ],
                    )
                }
                /// Pending payouts; ordered by block number, with the amount that should be paid
                /// out.
                pub fn payouts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u128)>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Payouts",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            88u8, 208u8, 72u8, 186u8, 175u8, 77u8, 18u8, 108u8, 69u8, 117u8, 227u8,
                            73u8, 126u8, 56u8, 32u8, 1u8, 198u8, 6u8, 231u8, 172u8, 3u8, 155u8,
                            72u8, 152u8, 68u8, 222u8, 19u8, 229u8, 69u8, 181u8, 196u8, 202u8,
                        ],
                    )
                }
                /// Pending payouts; ordered by block number, with the amount that should be paid
                /// out.
                pub fn payouts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u128)>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Payouts",
                        Vec::new(),
                        [
                            88u8, 208u8, 72u8, 186u8, 175u8, 77u8, 18u8, 108u8, 69u8, 117u8, 227u8,
                            73u8, 126u8, 56u8, 32u8, 1u8, 198u8, 6u8, 231u8, 172u8, 3u8, 155u8,
                            72u8, 152u8, 68u8, 222u8, 19u8, 229u8, 69u8, 181u8, 196u8, 202u8,
                        ],
                    )
                }
                /// The ongoing number of losing votes cast by the member.
                pub fn strikes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Strikes",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            120u8, 174u8, 185u8, 72u8, 167u8, 85u8, 204u8, 187u8, 139u8, 103u8,
                            124u8, 14u8, 65u8, 243u8, 40u8, 114u8, 231u8, 200u8, 174u8, 56u8,
                            159u8, 242u8, 102u8, 221u8, 26u8, 153u8, 154u8, 238u8, 109u8, 255u8,
                            64u8, 135u8,
                        ],
                    )
                }
                /// The ongoing number of losing votes cast by the member.
                pub fn strikes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Strikes",
                        Vec::new(),
                        [
                            120u8, 174u8, 185u8, 72u8, 167u8, 85u8, 204u8, 187u8, 139u8, 103u8,
                            124u8, 14u8, 65u8, 243u8, 40u8, 114u8, 231u8, 200u8, 174u8, 56u8,
                            159u8, 242u8, 102u8, 221u8, 26u8, 153u8, 154u8, 238u8, 109u8, 255u8,
                            64u8, 135u8,
                        ],
                    )
                }
                /// Double map from Candidate -> Voter -> (Maybe) Vote.
                pub fn votes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Vote,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Votes",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            82u8, 0u8, 111u8, 217u8, 223u8, 52u8, 99u8, 140u8, 145u8, 35u8, 207u8,
                            54u8, 69u8, 86u8, 133u8, 103u8, 122u8, 3u8, 153u8, 68u8, 233u8, 71u8,
                            62u8, 132u8, 218u8, 2u8, 126u8, 136u8, 245u8, 150u8, 102u8, 77u8,
                        ],
                    )
                }
                /// Double map from Candidate -> Voter -> (Maybe) Vote.
                pub fn votes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Vote,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Votes",
                        Vec::new(),
                        [
                            82u8, 0u8, 111u8, 217u8, 223u8, 52u8, 99u8, 140u8, 145u8, 35u8, 207u8,
                            54u8, 69u8, 86u8, 133u8, 103u8, 122u8, 3u8, 153u8, 68u8, 233u8, 71u8,
                            62u8, 132u8, 218u8, 2u8, 126u8, 136u8, 245u8, 150u8, 102u8, 77u8,
                        ],
                    )
                }
                /// The defending member currently being challenged.
                pub fn defender(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Defender",
                        vec![],
                        [
                            116u8, 251u8, 243u8, 93u8, 242u8, 69u8, 62u8, 163u8, 154u8, 55u8,
                            243u8, 204u8, 205u8, 210u8, 205u8, 5u8, 202u8, 177u8, 153u8, 199u8,
                            126u8, 142u8, 248u8, 65u8, 88u8, 226u8, 101u8, 116u8, 74u8, 170u8,
                            93u8, 146u8,
                        ],
                    )
                }
                /// Votes for the defender.
                pub fn defender_votes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Vote,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "DefenderVotes",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            90u8, 131u8, 201u8, 228u8, 138u8, 115u8, 75u8, 188u8, 29u8, 229u8,
                            221u8, 218u8, 154u8, 78u8, 152u8, 166u8, 184u8, 93u8, 156u8, 0u8,
                            110u8, 58u8, 135u8, 124u8, 179u8, 98u8, 5u8, 218u8, 47u8, 145u8, 163u8,
                            245u8,
                        ],
                    )
                }
                /// Votes for the defender.
                pub fn defender_votes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Vote,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "DefenderVotes",
                        Vec::new(),
                        [
                            90u8, 131u8, 201u8, 228u8, 138u8, 115u8, 75u8, 188u8, 29u8, 229u8,
                            221u8, 218u8, 154u8, 78u8, 152u8, 166u8, 184u8, 93u8, 156u8, 0u8,
                            110u8, 58u8, 135u8, 124u8, 179u8, 98u8, 5u8, 218u8, 47u8, 145u8, 163u8,
                            245u8,
                        ],
                    )
                }
                /// The max number of members for the society at one time.
                pub fn max_members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "MaxMembers",
                        vec![],
                        [
                            54u8, 113u8, 4u8, 248u8, 5u8, 42u8, 67u8, 237u8, 91u8, 159u8, 63u8,
                            239u8, 3u8, 196u8, 202u8, 135u8, 182u8, 137u8, 204u8, 58u8, 39u8, 11u8,
                            42u8, 79u8, 129u8, 85u8, 37u8, 154u8, 178u8, 189u8, 123u8, 184u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The societies's pallet id
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                /// The minimum amount of a deposit required for a bid to be made.
                pub fn candidate_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "CandidateDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The amount of the unpaid reward that gets deducted in the case that either a
                /// skeptic doesn't vote or someone votes in the wrong way.
                pub fn wrong_side_deduction(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "WrongSideDeduction",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The number of times a member may vote the wrong way (or not at all, when they
                /// are a skeptic) before they become suspended.
                pub fn max_strikes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "MaxStrikes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The amount of incentive paid within each period. Doesn't include VoterTip.
                pub fn period_spend(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "PeriodSpend",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The number of blocks between candidate/membership rotation periods.
                pub fn rotation_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "RotationPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum duration of the payout lock.
                pub fn max_lock_duration(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "MaxLockDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The number of blocks between membership challenges.
                pub fn challenge_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "ChallengePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of candidates that we accept per round.
                pub fn max_candidate_intake(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "MaxCandidateIntake",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod recovery {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AsRecovered {
                pub account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetRecovered {
                pub lost: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub rescuer: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CreateRecovery {
                pub friends: ::std::vec::Vec<::subxt::utils::AccountId32>,
                pub threshold: ::core::primitive::u16,
                pub delay_period: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InitiateRecovery {
                pub account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VouchRecovery {
                pub lost: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub rescuer: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ClaimRecovery {
                pub account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CloseRecovery {
                pub rescuer: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveRecovery;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CancelRecovered {
                pub account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Send a call through a recovered account.
                ///
                ///The dispatch origin for this call must be _Signed_ and registered to
                ///be able to make calls on behalf of the recovered account.
                ///
                ///Parameters:
                /// - `account`: The recovered account you want to make a call on-behalf-of.
                /// - `call`: The call you want to make with the recovered account.
                pub fn as_recovered(
                    &self,
                    account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<AsRecovered> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "as_recovered",
                        AsRecovered { account, call: ::std::boxed::Box::new(call) },
                        [
                            9u8, 130u8, 79u8, 189u8, 27u8, 113u8, 23u8, 223u8, 130u8, 144u8, 43u8,
                            146u8, 244u8, 159u8, 15u8, 71u8, 219u8, 140u8, 62u8, 95u8, 5u8, 21u8,
                            107u8, 162u8, 185u8, 9u8, 12u8, 104u8, 177u8, 192u8, 189u8, 102u8,
                        ],
                    )
                }
                ///Allow ROOT to bypass the recovery process and set an a rescuer account
                ///for a lost account directly.
                ///
                ///The dispatch origin for this call must be _ROOT_.
                ///
                ///Parameters:
                /// - `lost`: The "lost account" to be recovered.
                /// - `rescuer`: The "rescuer account" which can call as the lost account.
                pub fn set_recovered(
                    &self,
                    lost: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    rescuer: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<SetRecovered> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "set_recovered",
                        SetRecovered { lost, rescuer },
                        [
                            31u8, 116u8, 118u8, 177u8, 70u8, 236u8, 34u8, 160u8, 238u8, 28u8, 99u8,
                            67u8, 24u8, 87u8, 41u8, 141u8, 6u8, 133u8, 99u8, 74u8, 61u8, 85u8,
                            61u8, 108u8, 48u8, 250u8, 1u8, 249u8, 59u8, 240u8, 152u8, 22u8,
                        ],
                    )
                }
                ///Create a recovery configuration for your account. This makes your account
                /// recoverable.
                ///
                ///Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance
                ///will be reserved for storing the recovery configuration. This deposit is
                /// returned in full when the user calls `remove_recovery`.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Parameters:
                /// - `friends`: A list of friends you trust to vouch for recovery attempts. Should
                ///   be
                ///  ordered and contain no duplicate values.
                /// - `threshold`: The number of friends that must vouch for a recovery attempt
                ///   before the
                ///  account can be recovered. Should be less than or equal to the length of the
                /// list of  friends.
                /// - `delay_period`: The number of blocks after a recovery attempt is initialized
                ///   that
                ///  needs to pass before the account can be recovered.
                pub fn create_recovery(
                    &self,
                    friends: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    threshold: ::core::primitive::u16,
                    delay_period: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<CreateRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "create_recovery",
                        CreateRecovery { friends, threshold, delay_period },
                        [
                            80u8, 233u8, 68u8, 224u8, 181u8, 127u8, 8u8, 35u8, 135u8, 121u8, 73u8,
                            25u8, 255u8, 192u8, 177u8, 140u8, 67u8, 113u8, 112u8, 35u8, 63u8, 96u8,
                            1u8, 138u8, 93u8, 27u8, 219u8, 52u8, 74u8, 251u8, 65u8, 96u8,
                        ],
                    )
                }
                ///Initiate the process for recovering a recoverable account.
                ///
                ///Payment: `RecoveryDeposit` balance will be reserved for initiating the
                ///recovery process. This deposit will always be repatriated to the account
                ///trying to be recovered. See `close_recovery`.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Parameters:
                /// - `account`: The lost account that you want to recover. This account needs to be
                ///  recoverable (i.e. have a recovery configuration).
                pub fn initiate_recovery(
                    &self,
                    account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<InitiateRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "initiate_recovery",
                        InitiateRecovery { account },
                        [
                            47u8, 241u8, 59u8, 4u8, 2u8, 85u8, 8u8, 100u8, 57u8, 214u8, 22u8,
                            226u8, 223u8, 108u8, 52u8, 242u8, 58u8, 92u8, 62u8, 145u8, 108u8,
                            177u8, 81u8, 218u8, 7u8, 138u8, 202u8, 5u8, 183u8, 47u8, 160u8, 175u8,
                        ],
                    )
                }
                ///Allow a "friend" of a recoverable account to vouch for an active recovery
                ///process for that account.
                ///
                ///The dispatch origin for this call must be _Signed_ and must be a "friend"
                ///for the recoverable account.
                ///
                ///Parameters:
                /// - `lost`: The lost account that you want to recover.
                /// - `rescuer`: The account trying to rescue the lost account that you want to
                ///   vouch for.
                ///
                ///The combination of these two parameters must point to an active recovery
                ///process.
                pub fn vouch_recovery(
                    &self,
                    lost: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    rescuer: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<VouchRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "vouch_recovery",
                        VouchRecovery { lost, rescuer },
                        [
                            52u8, 10u8, 56u8, 169u8, 38u8, 131u8, 32u8, 180u8, 76u8, 28u8, 210u8,
                            19u8, 110u8, 223u8, 166u8, 143u8, 149u8, 161u8, 124u8, 173u8, 177u8,
                            147u8, 228u8, 220u8, 178u8, 42u8, 69u8, 218u8, 44u8, 67u8, 157u8,
                            192u8,
                        ],
                    )
                }
                ///Allow a successful rescuer to claim their recovered account.
                ///
                ///The dispatch origin for this call must be _Signed_ and must be a "rescuer"
                ///who has successfully completed the account recovery process: collected
                ///`threshold` or more vouches, waited `delay_period` blocks since initiation.
                ///
                ///Parameters:
                /// - `account`: The lost account that you want to claim has been successfully
                ///   recovered by
                ///  you.
                pub fn claim_recovery(
                    &self,
                    account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<ClaimRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "claim_recovery",
                        ClaimRecovery { account },
                        [
                            27u8, 150u8, 207u8, 128u8, 177u8, 207u8, 230u8, 217u8, 172u8, 254u8,
                            188u8, 65u8, 162u8, 75u8, 231u8, 218u8, 180u8, 6u8, 111u8, 252u8,
                            183u8, 110u8, 133u8, 79u8, 237u8, 118u8, 39u8, 24u8, 16u8, 226u8, 88u8,
                            68u8,
                        ],
                    )
                }
                ///As the controller of a recoverable account, close an active recovery
                ///process for your account.
                ///
                ///Payment: By calling this function, the recoverable account will receive
                ///the recovery deposit `RecoveryDeposit` placed by the rescuer.
                ///
                ///The dispatch origin for this call must be _Signed_ and must be a
                ///recoverable account with an active recovery process for it.
                ///
                ///Parameters:
                /// - `rescuer`: The account trying to rescue this recoverable account.
                pub fn close_recovery(
                    &self,
                    rescuer: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<CloseRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "close_recovery",
                        CloseRecovery { rescuer },
                        [
                            126u8, 106u8, 95u8, 179u8, 59u8, 61u8, 223u8, 221u8, 75u8, 127u8,
                            188u8, 126u8, 249u8, 194u8, 11u8, 81u8, 117u8, 217u8, 87u8, 204u8,
                            161u8, 180u8, 140u8, 56u8, 67u8, 76u8, 137u8, 67u8, 33u8, 249u8, 104u8,
                            71u8,
                        ],
                    )
                }
                ///Remove the recovery process for your account. Recovered accounts are still
                /// accessible.
                ///
                ///NOTE: The user must make sure to call `close_recovery` on all active
                ///recovery attempts before calling this function else it will fail.
                ///
                ///Payment: By calling this function the recoverable account will unreserve
                ///their recovery configuration deposit.
                ///(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)
                ///
                ///The dispatch origin for this call must be _Signed_ and must be a
                ///recoverable account (i.e. has a recovery configuration).
                pub fn remove_recovery(&self) -> ::subxt::tx::Payload<RemoveRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "remove_recovery",
                        RemoveRecovery {},
                        [
                            14u8, 1u8, 44u8, 24u8, 242u8, 16u8, 67u8, 192u8, 79u8, 206u8, 104u8,
                            233u8, 91u8, 202u8, 253u8, 100u8, 48u8, 78u8, 233u8, 24u8, 124u8,
                            176u8, 211u8, 87u8, 63u8, 110u8, 2u8, 7u8, 231u8, 53u8, 177u8, 196u8,
                        ],
                    )
                }
                ///Cancel the ability to use `as_recovered` for `account`.
                ///
                ///The dispatch origin for this call must be _Signed_ and registered to
                ///be able to make calls on behalf of the recovered account.
                ///
                ///Parameters:
                /// - `account`: The recovered account you are able to call on-behalf-of.
                pub fn cancel_recovered(
                    &self,
                    account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<CancelRecovered> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "cancel_recovered",
                        CancelRecovered { account },
                        [
                            240u8, 119u8, 115u8, 196u8, 216u8, 183u8, 44u8, 167u8, 48u8, 222u8,
                            237u8, 64u8, 6u8, 9u8, 80u8, 205u8, 1u8, 204u8, 116u8, 46u8, 106u8,
                            194u8, 83u8, 194u8, 217u8, 218u8, 110u8, 251u8, 226u8, 4u8, 3u8, 203u8,
                        ],
                    )
                }
            }
        }
        ///Events type.
        pub type Event = runtime_types::pallet_recovery::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A recovery process has been set up for an account.
            pub struct RecoveryCreated {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryCreated {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryCreated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A recovery process has been initiated for lost account by rescuer account.
            pub struct RecoveryInitiated {
                pub lost_account: ::subxt::utils::AccountId32,
                pub rescuer_account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryInitiated {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryInitiated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A recovery process for lost account by rescuer account has been vouched for by
            /// sender.
            pub struct RecoveryVouched {
                pub lost_account: ::subxt::utils::AccountId32,
                pub rescuer_account: ::subxt::utils::AccountId32,
                pub sender: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryVouched {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryVouched";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A recovery process for lost account by rescuer account has been closed.
            pub struct RecoveryClosed {
                pub lost_account: ::subxt::utils::AccountId32,
                pub rescuer_account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryClosed {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryClosed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Lost account has been successfully recovered by rescuer account.
            pub struct AccountRecovered {
                pub lost_account: ::subxt::utils::AccountId32,
                pub rescuer_account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for AccountRecovered {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "AccountRecovered";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A recovery process has been removed for an account.
            pub struct RecoveryRemoved {
                pub lost_account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryRemoved {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The set of recoverable accounts and their recovery configuration.
                pub fn recoverable(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_recovery::RecoveryConfig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "Recoverable",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            77u8, 165u8, 1u8, 120u8, 139u8, 195u8, 113u8, 101u8, 31u8, 182u8,
                            235u8, 20u8, 225u8, 108u8, 173u8, 70u8, 96u8, 14u8, 95u8, 36u8, 146u8,
                            171u8, 61u8, 209u8, 37u8, 154u8, 6u8, 197u8, 212u8, 20u8, 167u8, 142u8,
                        ],
                    )
                }
                /// The set of recoverable accounts and their recovery configuration.
                pub fn recoverable_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_recovery::RecoveryConfig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "Recoverable",
                        Vec::new(),
                        [
                            77u8, 165u8, 1u8, 120u8, 139u8, 195u8, 113u8, 101u8, 31u8, 182u8,
                            235u8, 20u8, 225u8, 108u8, 173u8, 70u8, 96u8, 14u8, 95u8, 36u8, 146u8,
                            171u8, 61u8, 209u8, 37u8, 154u8, 6u8, 197u8, 212u8, 20u8, 167u8, 142u8,
                        ],
                    )
                }
                /// Active recovery attempts.
                ///
                /// First account is the account to be recovered, and the second account
                /// is the user trying to recover the account.
                pub fn active_recoveries(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_recovery::ActiveRecovery<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "ActiveRecoveries",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            105u8, 72u8, 0u8, 48u8, 187u8, 107u8, 42u8, 95u8, 221u8, 206u8, 105u8,
                            207u8, 228u8, 150u8, 103u8, 62u8, 195u8, 177u8, 233u8, 97u8, 12u8,
                            17u8, 76u8, 204u8, 236u8, 29u8, 225u8, 60u8, 228u8, 44u8, 103u8, 39u8,
                        ],
                    )
                }
                /// Active recovery attempts.
                ///
                /// First account is the account to be recovered, and the second account
                /// is the user trying to recover the account.
                pub fn active_recoveries_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_recovery::ActiveRecovery<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "ActiveRecoveries",
                        Vec::new(),
                        [
                            105u8, 72u8, 0u8, 48u8, 187u8, 107u8, 42u8, 95u8, 221u8, 206u8, 105u8,
                            207u8, 228u8, 150u8, 103u8, 62u8, 195u8, 177u8, 233u8, 97u8, 12u8,
                            17u8, 76u8, 204u8, 236u8, 29u8, 225u8, 60u8, 228u8, 44u8, 103u8, 39u8,
                        ],
                    )
                }
                /// The list of allowed proxy accounts.
                ///
                /// Map from the user who can access it to the recovered account.
                pub fn proxy(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "Proxy",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            100u8, 137u8, 55u8, 32u8, 228u8, 27u8, 3u8, 84u8, 255u8, 68u8, 45u8,
                            4u8, 215u8, 84u8, 189u8, 81u8, 175u8, 61u8, 252u8, 254u8, 68u8, 179u8,
                            57u8, 134u8, 223u8, 49u8, 158u8, 165u8, 108u8, 172u8, 70u8, 108u8,
                        ],
                    )
                }
                /// The list of allowed proxy accounts.
                ///
                /// Map from the user who can access it to the recovered account.
                pub fn proxy_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "Proxy",
                        Vec::new(),
                        [
                            100u8, 137u8, 55u8, 32u8, 228u8, 27u8, 3u8, 84u8, 255u8, 68u8, 45u8,
                            4u8, 215u8, 84u8, 189u8, 81u8, 175u8, 61u8, 252u8, 254u8, 68u8, 179u8,
                            57u8, 134u8, 223u8, 49u8, 158u8, 165u8, 108u8, 172u8, 70u8, 108u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The base amount of currency needed to reserve for creating a recovery
                /// configuration.
                ///
                /// This is held for an additional storage item whose value size is
                /// `2 + sizeof(BlockNumber, Balance)` bytes.
                pub fn config_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Recovery",
                        "ConfigDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The amount of currency needed per additional user when creating a recovery
                /// configuration.
                ///
                /// This is held for adding `sizeof(AccountId)` bytes more into a pre-existing
                /// storage value.
                pub fn friend_deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Recovery",
                        "FriendDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The maximum amount of friends allowed in a recovery configuration.
                ///
                /// NOTE: The threshold programmed in this Pallet uses u16, so it does
                /// not really make sense to have a limit here greater than u16::MAX.
                /// But also, that is a lot more than you should probably set this value
                /// to anyway...
                pub fn max_friends(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Recovery",
                        "MaxFriends",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The base amount of currency needed to reserve for starting a recovery.
                ///
                /// This is primarily held for deterring malicious recovery attempts, and should
                /// have a value large enough that a bad actor would choose not to place this
                /// deposit. It also acts to fund additional storage item whose value size is
                /// `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable
                /// threshold.
                pub fn recovery_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Recovery",
                        "RecoveryDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod vesting {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Vest;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VestOther {
                pub target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VestedTransfer {
                pub target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceVestedTransfer {
                pub source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MergeSchedules {
                pub schedule1_index: ::core::primitive::u32,
                pub schedule2_index: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Unlock any vested funds of the sender account.
                ///
                ///The dispatch origin for this call must be _Signed_ and the sender must have
                /// funds still locked under this pallet.
                ///
                ///Emits either `VestingCompleted` or `VestingUpdated`.
                ///
                ///## Complexity
                /// - `O(1)`.
                pub fn vest(&self) -> ::subxt::tx::Payload<Vest> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "vest",
                        Vest {},
                        [
                            123u8, 54u8, 10u8, 208u8, 154u8, 24u8, 39u8, 166u8, 64u8, 27u8, 74u8,
                            29u8, 243u8, 97u8, 155u8, 5u8, 130u8, 155u8, 65u8, 181u8, 196u8, 125u8,
                            45u8, 133u8, 25u8, 33u8, 3u8, 34u8, 21u8, 167u8, 172u8, 54u8,
                        ],
                    )
                }
                ///Unlock any vested funds of a `target` account.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `target`: The account whose vested funds should be unlocked. Must have funds
                ///   still
                ///locked under this pallet.
                ///
                ///Emits either `VestingCompleted` or `VestingUpdated`.
                ///
                ///## Complexity
                /// - `O(1)`.
                pub fn vest_other(
                    &self,
                    target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<VestOther> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "vest_other",
                        VestOther { target },
                        [
                            164u8, 19u8, 93u8, 81u8, 235u8, 101u8, 18u8, 52u8, 187u8, 81u8, 243u8,
                            216u8, 116u8, 84u8, 188u8, 135u8, 1u8, 241u8, 128u8, 90u8, 117u8,
                            164u8, 111u8, 0u8, 251u8, 148u8, 250u8, 248u8, 102u8, 79u8, 165u8,
                            175u8,
                        ],
                    )
                }
                ///Create a vested transfer.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `target`: The account receiving the vested funds.
                /// - `schedule`: The vesting schedule attached to the transfer.
                ///
                ///Emits `VestingCreated`.
                ///
                ///NOTE: This will unlock all schedules through the current block.
                ///
                ///## Complexity
                /// - `O(1)`.
                pub fn vested_transfer(
                    &self,
                    target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<VestedTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "vested_transfer",
                        VestedTransfer { target, schedule },
                        [
                            135u8, 172u8, 56u8, 97u8, 45u8, 141u8, 93u8, 173u8, 111u8, 252u8, 75u8,
                            246u8, 92u8, 181u8, 138u8, 87u8, 145u8, 174u8, 71u8, 108u8, 126u8,
                            118u8, 49u8, 122u8, 249u8, 132u8, 19u8, 2u8, 132u8, 160u8, 247u8,
                            195u8,
                        ],
                    )
                }
                ///Force a vested transfer.
                ///
                ///The dispatch origin for this call must be _Root_.
                ///
                /// - `source`: The account whose funds should be transferred.
                /// - `target`: The account that should be transferred the vested funds.
                /// - `schedule`: The vesting schedule attached to the transfer.
                ///
                ///Emits `VestingCreated`.
                ///
                ///NOTE: This will unlock all schedules through the current block.
                ///
                ///## Complexity
                /// - `O(1)`.
                pub fn force_vested_transfer(
                    &self,
                    source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<ForceVestedTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "force_vested_transfer",
                        ForceVestedTransfer { source, target, schedule },
                        [
                            110u8, 142u8, 63u8, 148u8, 90u8, 229u8, 237u8, 183u8, 240u8, 237u8,
                            242u8, 32u8, 88u8, 48u8, 220u8, 101u8, 210u8, 212u8, 27u8, 7u8, 186u8,
                            98u8, 28u8, 197u8, 148u8, 140u8, 77u8, 59u8, 202u8, 166u8, 63u8, 97u8,
                        ],
                    )
                }
                ///Merge two vesting schedules together, creating a new vesting schedule that
                /// unlocks over the highest possible start and end blocks. If both
                /// schedules have already started the current block will be used as
                /// the schedule start; with the caveat that if one schedule
                /// is finished by the current block, the other will be treated as the new merged
                /// schedule, unmodified.
                ///
                ///NOTE: If `schedule1_index == schedule2_index` this is a no-op.
                ///NOTE: This will unlock all schedules through the current block prior to merging.
                ///NOTE: If both schedules have ended by the current block, no new schedule will be
                /// created and both will be removed.
                ///
                ///Merged schedule attributes:
                /// - `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,
                ///  current_block)`.
                /// - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
                /// - `locked`: `schedule1.locked_at(current_block) +
                ///   schedule2.locked_at(current_block)`.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `schedule1_index`: index of the first schedule to merge.
                /// - `schedule2_index`: index of the second schedule to merge.
                pub fn merge_schedules(
                    &self,
                    schedule1_index: ::core::primitive::u32,
                    schedule2_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<MergeSchedules> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "merge_schedules",
                        MergeSchedules { schedule1_index, schedule2_index },
                        [
                            95u8, 255u8, 147u8, 12u8, 49u8, 25u8, 70u8, 112u8, 55u8, 154u8, 183u8,
                            97u8, 56u8, 244u8, 148u8, 61u8, 107u8, 163u8, 220u8, 31u8, 153u8, 25u8,
                            193u8, 251u8, 131u8, 26u8, 166u8, 157u8, 75u8, 4u8, 110u8, 125u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_vesting::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The amount vested has been updated. This could indicate a change in funds available.
            ///The balance given is the amount which is left unvested (and thus locked).
            pub struct VestingUpdated {
                pub account: ::subxt::utils::AccountId32,
                pub unvested: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for VestingUpdated {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingUpdated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An \[account\] has become fully vested.
            pub struct VestingCompleted {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for VestingCompleted {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingCompleted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Information regarding the vesting of a given account.
                pub fn vesting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Vesting",
                        "Vesting",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            23u8, 209u8, 233u8, 126u8, 89u8, 156u8, 193u8, 204u8, 100u8, 90u8,
                            14u8, 120u8, 36u8, 167u8, 148u8, 239u8, 179u8, 74u8, 207u8, 83u8, 54u8,
                            77u8, 27u8, 135u8, 74u8, 31u8, 33u8, 11u8, 168u8, 239u8, 212u8, 36u8,
                        ],
                    )
                }
                /// Information regarding the vesting of a given account.
                pub fn vesting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Vesting",
                        "Vesting",
                        Vec::new(),
                        [
                            23u8, 209u8, 233u8, 126u8, 89u8, 156u8, 193u8, 204u8, 100u8, 90u8,
                            14u8, 120u8, 36u8, 167u8, 148u8, 239u8, 179u8, 74u8, 207u8, 83u8, 54u8,
                            77u8, 27u8, 135u8, 74u8, 31u8, 33u8, 11u8, 168u8, 239u8, 212u8, 36u8,
                        ],
                    )
                }
                /// Storage version of the pallet.
                ///
                /// New networks start with latest version, as determined by the genesis build.
                pub fn storage_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_vesting::Releases,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Vesting",
                        "StorageVersion",
                        vec![],
                        [
                            50u8, 143u8, 26u8, 88u8, 129u8, 31u8, 61u8, 118u8, 19u8, 202u8, 119u8,
                            160u8, 34u8, 219u8, 60u8, 57u8, 189u8, 66u8, 93u8, 239u8, 121u8, 114u8,
                            241u8, 116u8, 0u8, 122u8, 232u8, 94u8, 189u8, 23u8, 45u8, 191u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The minimum amount transferred to call `vested_transfer`.
                pub fn min_vested_transfer(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Vesting",
                        "MinVestedTransfer",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn max_vesting_schedules(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Vesting",
                        "MaxVestingSchedules",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod scheduler {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Schedule {
                pub when: ::core::primitive::u32,
                pub maybe_periodic:
                    ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Cancel {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ScheduleNamed {
                pub id: [::core::primitive::u8; 32usize],
                pub when: ::core::primitive::u32,
                pub maybe_periodic:
                    ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CancelNamed {
                pub id: [::core::primitive::u8; 32usize],
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ScheduleAfter {
                pub after: ::core::primitive::u32,
                pub maybe_periodic:
                    ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ScheduleNamedAfter {
                pub id: [::core::primitive::u8; 32usize],
                pub after: ::core::primitive::u32,
                pub maybe_periodic:
                    ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                pub priority: ::core::primitive::u8,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Anonymously schedule a task.
                pub fn schedule(
                    &self,
                    when: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<Schedule> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule",
                        Schedule {
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            209u8, 76u8, 126u8, 233u8, 165u8, 22u8, 247u8, 134u8, 203u8, 57u8,
                            87u8, 154u8, 150u8, 122u8, 79u8, 158u8, 127u8, 37u8, 17u8, 58u8, 179u8,
                            15u8, 151u8, 12u8, 247u8, 73u8, 202u8, 155u8, 25u8, 227u8, 152u8, 48u8,
                        ],
                    )
                }
                ///Cancel an anonymously scheduled task.
                pub fn cancel(
                    &self,
                    when: ::core::primitive::u32,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Cancel> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "cancel",
                        Cancel { when, index },
                        [
                            81u8, 251u8, 234u8, 17u8, 214u8, 75u8, 19u8, 59u8, 19u8, 30u8, 89u8,
                            74u8, 6u8, 216u8, 238u8, 165u8, 7u8, 19u8, 153u8, 253u8, 161u8, 103u8,
                            178u8, 227u8, 152u8, 180u8, 80u8, 156u8, 82u8, 126u8, 132u8, 120u8,
                        ],
                    )
                }
                ///Schedule a named task.
                pub fn schedule_named(
                    &self,
                    id: [::core::primitive::u8; 32usize],
                    when: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<ScheduleNamed> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_named",
                        ScheduleNamed {
                            id,
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            53u8, 38u8, 187u8, 218u8, 116u8, 109u8, 219u8, 83u8, 248u8, 31u8,
                            180u8, 183u8, 19u8, 79u8, 177u8, 162u8, 203u8, 27u8, 16u8, 38u8, 25u8,
                            65u8, 152u8, 194u8, 81u8, 114u8, 210u8, 178u8, 74u8, 186u8, 201u8,
                            57u8,
                        ],
                    )
                }
                ///Cancel a named scheduled task.
                pub fn cancel_named(
                    &self,
                    id: [::core::primitive::u8; 32usize],
                ) -> ::subxt::tx::Payload<CancelNamed> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "cancel_named",
                        CancelNamed { id },
                        [
                            51u8, 3u8, 140u8, 50u8, 214u8, 211u8, 50u8, 4u8, 19u8, 43u8, 230u8,
                            114u8, 18u8, 108u8, 138u8, 67u8, 99u8, 24u8, 255u8, 11u8, 246u8, 37u8,
                            192u8, 207u8, 90u8, 157u8, 171u8, 93u8, 233u8, 189u8, 64u8, 180u8,
                        ],
                    )
                }
                ///Anonymously schedule a task after a delay.
                pub fn schedule_after(
                    &self,
                    after: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<ScheduleAfter> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_after",
                        ScheduleAfter {
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            206u8, 201u8, 36u8, 159u8, 59u8, 29u8, 91u8, 167u8, 174u8, 51u8, 253u8,
                            143u8, 193u8, 60u8, 159u8, 102u8, 220u8, 74u8, 72u8, 143u8, 17u8, 46u8,
                            240u8, 174u8, 120u8, 142u8, 129u8, 82u8, 250u8, 148u8, 111u8, 169u8,
                        ],
                    )
                }
                ///Schedule a named task after a delay.
                pub fn schedule_named_after(
                    &self,
                    id: [::core::primitive::u8; 32usize],
                    after: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<ScheduleNamedAfter> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_named_after",
                        ScheduleNamedAfter {
                            id,
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            75u8, 208u8, 37u8, 158u8, 70u8, 232u8, 121u8, 81u8, 32u8, 103u8, 61u8,
                            215u8, 38u8, 125u8, 3u8, 101u8, 130u8, 21u8, 100u8, 9u8, 211u8, 33u8,
                            69u8, 253u8, 199u8, 52u8, 150u8, 208u8, 75u8, 214u8, 160u8, 94u8,
                        ],
                    )
                }
            }
        }
        ///Events type.
        pub type Event = runtime_types::pallet_scheduler::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Scheduled some task.
            pub struct Scheduled {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Scheduled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Scheduled";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Canceled some task.
            pub struct Canceled {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Canceled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Canceled";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Dispatched some task.
            pub struct Dispatched {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Dispatched {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Dispatched";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The call for the provided hash was not found so the task has been aborted.
            pub struct CallUnavailable {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for CallUnavailable {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "CallUnavailable";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The given task was unable to be renewed since the agenda is full at that block.
            pub struct PeriodicFailed {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for PeriodicFailed {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PeriodicFailed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The given task can never be executed since it is overweight.
            pub struct PermanentlyOverweight {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for PermanentlyOverweight {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PermanentlyOverweight";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn incomplete_since(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "IncompleteSince",
                        vec![],
                        [
                            149u8, 66u8, 239u8, 67u8, 235u8, 219u8, 101u8, 182u8, 145u8, 56u8,
                            252u8, 150u8, 253u8, 221u8, 125u8, 57u8, 38u8, 152u8, 153u8, 31u8,
                            92u8, 238u8, 66u8, 246u8, 104u8, 163u8, 94u8, 73u8, 222u8, 168u8,
                            193u8, 227u8,
                        ],
                    )
                }
                /// Items to be executed, indexed by the block number that they should be executed
                /// on.
                pub fn agenda(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_scheduler::Scheduled<
                                [::core::primitive::u8; 32usize],
                                runtime_types::frame_support::traits::preimages::Bounded<
                                    runtime_types::rococo_runtime::RuntimeCall,
                                >,
                                ::core::primitive::u32,
                                runtime_types::rococo_runtime::OriginCaller,
                                ::subxt::utils::AccountId32,
                            >,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Agenda",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            108u8, 34u8, 241u8, 171u8, 182u8, 132u8, 188u8, 187u8, 241u8, 226u8,
                            20u8, 120u8, 164u8, 106u8, 118u8, 88u8, 5u8, 82u8, 25u8, 65u8, 15u8,
                            153u8, 97u8, 66u8, 17u8, 106u8, 47u8, 40u8, 113u8, 241u8, 85u8, 92u8,
                        ],
                    )
                }
                /// Items to be executed, indexed by the block number that they should be executed
                /// on.
                pub fn agenda_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_scheduler::Scheduled<
                                [::core::primitive::u8; 32usize],
                                runtime_types::frame_support::traits::preimages::Bounded<
                                    runtime_types::rococo_runtime::RuntimeCall,
                                >,
                                ::core::primitive::u32,
                                runtime_types::rococo_runtime::OriginCaller,
                                ::subxt::utils::AccountId32,
                            >,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Agenda",
                        Vec::new(),
                        [
                            108u8, 34u8, 241u8, 171u8, 182u8, 132u8, 188u8, 187u8, 241u8, 226u8,
                            20u8, 120u8, 164u8, 106u8, 118u8, 88u8, 5u8, 82u8, 25u8, 65u8, 15u8,
                            153u8, 97u8, 66u8, 17u8, 106u8, 47u8, 40u8, 113u8, 241u8, 85u8, 92u8,
                        ],
                    )
                }
                /// Lookup from a name to the block number and index of the task.
                ///
                /// For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form
                /// the v4 identities.
                pub fn lookup(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Lookup",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            82u8, 20u8, 178u8, 101u8, 108u8, 198u8, 71u8, 99u8, 16u8, 175u8, 15u8,
                            187u8, 229u8, 243u8, 140u8, 200u8, 99u8, 77u8, 248u8, 178u8, 45u8,
                            121u8, 193u8, 67u8, 165u8, 43u8, 234u8, 211u8, 158u8, 250u8, 103u8,
                            243u8,
                        ],
                    )
                }
                /// Lookup from a name to the block number and index of the task.
                ///
                /// For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form
                /// the v4 identities.
                pub fn lookup_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Lookup",
                        Vec::new(),
                        [
                            82u8, 20u8, 178u8, 101u8, 108u8, 198u8, 71u8, 99u8, 16u8, 175u8, 15u8,
                            187u8, 229u8, 243u8, 140u8, 200u8, 99u8, 77u8, 248u8, 178u8, 45u8,
                            121u8, 193u8, 67u8, 165u8, 43u8, 234u8, 211u8, 158u8, 250u8, 103u8,
                            243u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The maximum weight that may be scheduled per block for any dispatchables.
                pub fn maximum_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "Scheduler",
                        "MaximumWeight",
                        [
                            206u8, 61u8, 253u8, 247u8, 163u8, 40u8, 161u8, 52u8, 134u8, 140u8,
                            206u8, 83u8, 44u8, 166u8, 226u8, 115u8, 181u8, 14u8, 227u8, 130u8,
                            210u8, 32u8, 85u8, 29u8, 230u8, 97u8, 130u8, 165u8, 147u8, 134u8,
                            106u8, 76u8,
                        ],
                    )
                }
                /// The maximum number of scheduled calls in the queue for a single block.
                pub fn max_scheduled_per_block(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Scheduler",
                        "MaxScheduledPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod proxy {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Proxy {
                pub real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub force_proxy_type:
                    ::core::option::Option<runtime_types::rococo_runtime::ProxyType>,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AddProxy {
                pub delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub proxy_type: runtime_types::rococo_runtime::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveProxy {
                pub delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub proxy_type: runtime_types::rococo_runtime::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveProxies;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CreatePure {
                pub proxy_type: runtime_types::rococo_runtime::ProxyType,
                pub delay: ::core::primitive::u32,
                pub index: ::core::primitive::u16,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct KillPure {
                pub spawner: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub proxy_type: runtime_types::rococo_runtime::ProxyType,
                pub index: ::core::primitive::u16,
                #[codec(compact)]
                pub height: ::core::primitive::u32,
                #[codec(compact)]
                pub ext_index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Announce {
                pub real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub call_hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveAnnouncement {
                pub real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub call_hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RejectAnnouncement {
                pub delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub call_hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ProxyAnnounced {
                pub delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub force_proxy_type:
                    ::core::option::Option<runtime_types::rococo_runtime::ProxyType>,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Dispatch the given `call` from an account that the sender is authorised for
                /// through `add_proxy`.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Parameters:
                /// - `real`: The account that the proxy will make a call on behalf of.
                /// - `force_proxy_type`: Specify the exact proxy type to be used and checked for
                ///   this call.
                /// - `call`: The call to be made by the `real` account.
                pub fn proxy(
                    &self,
                    real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::rococo_runtime::ProxyType,
                    >,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<Proxy> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "proxy",
                        Proxy { real, force_proxy_type, call: ::std::boxed::Box::new(call) },
                        [
                            145u8, 74u8, 146u8, 74u8, 143u8, 54u8, 128u8, 126u8, 148u8, 81u8, 60u8,
                            222u8, 173u8, 0u8, 233u8, 247u8, 99u8, 47u8, 109u8, 46u8, 82u8, 244u8,
                            56u8, 176u8, 13u8, 249u8, 166u8, 78u8, 32u8, 40u8, 221u8, 116u8,
                        ],
                    )
                }
                ///Register a proxy account for the sender that is able to make calls on its
                /// behalf.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Parameters:
                /// - `proxy`: The account that the `caller` would like to make a proxy.
                /// - `proxy_type`: The permissions allowed for this proxy account.
                /// - `delay`: The announcement period required of the initial proxy. Will generally
                ///   be
                ///zero.
                pub fn add_proxy(
                    &self,
                    delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    proxy_type: runtime_types::rococo_runtime::ProxyType,
                    delay: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<AddProxy> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "add_proxy",
                        AddProxy { delegate, proxy_type, delay },
                        [
                            140u8, 211u8, 28u8, 189u8, 217u8, 153u8, 43u8, 87u8, 159u8, 234u8,
                            233u8, 125u8, 83u8, 213u8, 97u8, 204u8, 48u8, 208u8, 100u8, 9u8, 42u8,
                            90u8, 232u8, 108u8, 220u8, 147u8, 189u8, 148u8, 201u8, 115u8, 237u8,
                            212u8,
                        ],
                    )
                }
                ///Unregister a proxy account for the sender.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Parameters:
                /// - `proxy`: The account that the `caller` would like to remove as a proxy.
                /// - `proxy_type`: The permissions currently enabled for the removed proxy account.
                pub fn remove_proxy(
                    &self,
                    delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    proxy_type: runtime_types::rococo_runtime::ProxyType,
                    delay: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<RemoveProxy> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "remove_proxy",
                        RemoveProxy { delegate, proxy_type, delay },
                        [
                            63u8, 166u8, 4u8, 146u8, 143u8, 197u8, 230u8, 122u8, 219u8, 2u8, 157u8,
                            175u8, 253u8, 203u8, 43u8, 152u8, 234u8, 174u8, 181u8, 149u8, 57u8,
                            104u8, 35u8, 56u8, 194u8, 37u8, 201u8, 117u8, 216u8, 107u8, 131u8,
                            176u8,
                        ],
                    )
                }
                ///Unregister all proxy accounts for the sender.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///WARNING: This may be called on accounts created by `pure`, however if done, then
                ///the unreserved fees will be inaccessible. **All access to this account will be
                /// lost.**
                pub fn remove_proxies(&self) -> ::subxt::tx::Payload<RemoveProxies> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "remove_proxies",
                        RemoveProxies {},
                        [
                            15u8, 237u8, 27u8, 166u8, 254u8, 218u8, 92u8, 5u8, 213u8, 239u8, 99u8,
                            59u8, 1u8, 26u8, 73u8, 252u8, 81u8, 94u8, 214u8, 227u8, 169u8, 58u8,
                            40u8, 253u8, 187u8, 225u8, 192u8, 26u8, 19u8, 23u8, 121u8, 129u8,
                        ],
                    )
                }
                ///Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and
                ///initialize it with a proxy of `proxy_type` for `origin` sender.
                ///
                ///Requires a `Signed` origin.
                ///
                /// - `proxy_type`: The type of the proxy that the sender will be registered as over
                ///   the
                ///new account. This will almost always be the most permissive `ProxyType` possible
                /// to allow for maximum flexibility.
                /// - `index`: A disambiguation index, in case this is called multiple times in the
                ///   same
                ///transaction (e.g. with `utility::batch`). Unless you're using `batch` you
                /// probably just want to use `0`.
                /// - `delay`: The announcement period required of the initial proxy. Will generally
                ///   be
                ///zero.
                ///
                ///Fails with `Duplicate` if this has already been called in this transaction, from
                /// the same sender, with the same parameters.
                ///
                ///Fails if there are insufficient funds to pay for deposit.
                pub fn create_pure(
                    &self,
                    proxy_type: runtime_types::rococo_runtime::ProxyType,
                    delay: ::core::primitive::u32,
                    index: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<CreatePure> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "create_pure",
                        CreatePure { proxy_type, delay, index },
                        [
                            129u8, 58u8, 174u8, 253u8, 216u8, 52u8, 43u8, 91u8, 202u8, 84u8, 209u8,
                            114u8, 230u8, 244u8, 91u8, 187u8, 198u8, 168u8, 199u8, 113u8, 222u8,
                            125u8, 114u8, 111u8, 9u8, 192u8, 248u8, 188u8, 121u8, 238u8, 128u8,
                            105u8,
                        ],
                    )
                }
                ///Removes a previously spawned pure proxy.
                ///
                ///WARNING: **All access to this account will be lost.** Any funds held in it will
                /// be inaccessible.
                ///
                ///Requires a `Signed` origin, and the sender account must have been created by a
                /// call to `pure` with corresponding parameters.
                ///
                /// - `spawner`: The account that originally called `pure` to create this account.
                /// - `index`: The disambiguation index originally passed to `pure`. Probably `0`.
                /// - `proxy_type`: The proxy type originally passed to `pure`.
                /// - `height`: The height of the chain when the call to `pure` was processed.
                /// - `ext_index`: The extrinsic index in which the call to `pure` was processed.
                ///
                ///Fails with `NoPermission` in case the caller is not a previously created pure
                ///account whose `pure` call has corresponding parameters.
                pub fn kill_pure(
                    &self,
                    spawner: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    proxy_type: runtime_types::rococo_runtime::ProxyType,
                    index: ::core::primitive::u16,
                    height: ::core::primitive::u32,
                    ext_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<KillPure> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "kill_pure",
                        KillPure { spawner, proxy_type, index, height, ext_index },
                        [
                            223u8, 131u8, 204u8, 224u8, 28u8, 29u8, 195u8, 122u8, 12u8, 134u8,
                            197u8, 29u8, 132u8, 196u8, 160u8, 203u8, 254u8, 59u8, 66u8, 75u8,
                            192u8, 90u8, 134u8, 85u8, 165u8, 152u8, 164u8, 27u8, 89u8, 76u8, 69u8,
                            38u8,
                        ],
                    )
                }
                ///Publish the hash of a proxy-call that will be made in the future.
                ///
                ///This must be called some number of blocks before the corresponding `proxy` is
                /// attempted if the delay associated with the proxy relationship is
                /// greater than zero.
                ///
                ///No more than `MaxPending` announcements may be made at any one time.
                ///
                ///This will take a deposit of `AnnouncementDepositFactor` as well as
                ///`AnnouncementDepositBase` if there are no other pending announcements.
                ///
                ///The dispatch origin for this call must be _Signed_ and a proxy of `real`.
                ///
                ///Parameters:
                /// - `real`: The account that the proxy will make a call on behalf of.
                /// - `call_hash`: The hash of the call to be made by the `real` account.
                pub fn announce(
                    &self,
                    real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<Announce> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "announce",
                        Announce { real, call_hash },
                        [
                            235u8, 116u8, 208u8, 53u8, 128u8, 91u8, 100u8, 68u8, 255u8, 254u8,
                            119u8, 253u8, 108u8, 130u8, 88u8, 56u8, 113u8, 99u8, 105u8, 179u8,
                            16u8, 143u8, 131u8, 203u8, 234u8, 76u8, 199u8, 191u8, 35u8, 158u8,
                            130u8, 209u8,
                        ],
                    )
                }
                ///Remove a given announcement.
                ///
                ///May be called by a proxy account to remove a call they previously announced and
                /// return the deposit.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Parameters:
                /// - `real`: The account that the proxy will make a call on behalf of.
                /// - `call_hash`: The hash of the call to be made by the `real` account.
                pub fn remove_announcement(
                    &self,
                    real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<RemoveAnnouncement> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "remove_announcement",
                        RemoveAnnouncement { real, call_hash },
                        [
                            140u8, 186u8, 140u8, 129u8, 40u8, 124u8, 57u8, 61u8, 84u8, 247u8,
                            123u8, 241u8, 148u8, 15u8, 94u8, 146u8, 121u8, 78u8, 190u8, 68u8,
                            185u8, 125u8, 62u8, 49u8, 108u8, 131u8, 229u8, 82u8, 68u8, 37u8, 184u8,
                            223u8,
                        ],
                    )
                }
                ///Remove the given announcement of a delegate.
                ///
                ///May be called by a target (proxied) account to remove a call that one of their
                /// delegates (`delegate`) has announced they want to execute. The
                /// deposit is returned.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Parameters:
                /// - `delegate`: The account that previously announced the call.
                /// - `call_hash`: The hash of the call to be made.
                pub fn reject_announcement(
                    &self,
                    delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<RejectAnnouncement> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "reject_announcement",
                        RejectAnnouncement { delegate, call_hash },
                        [
                            225u8, 198u8, 31u8, 173u8, 157u8, 141u8, 121u8, 51u8, 226u8, 170u8,
                            219u8, 86u8, 14u8, 131u8, 122u8, 157u8, 161u8, 200u8, 157u8, 37u8,
                            43u8, 97u8, 143u8, 97u8, 46u8, 206u8, 204u8, 42u8, 78u8, 33u8, 85u8,
                            127u8,
                        ],
                    )
                }
                ///Dispatch the given `call` from an account that the sender is authorized for
                /// through `add_proxy`.
                ///
                ///Removes any corresponding announcement(s).
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Parameters:
                /// - `real`: The account that the proxy will make a call on behalf of.
                /// - `force_proxy_type`: Specify the exact proxy type to be used and checked for
                ///   this call.
                /// - `call`: The call to be made by the `real` account.
                pub fn proxy_announced(
                    &self,
                    delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::rococo_runtime::ProxyType,
                    >,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<ProxyAnnounced> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "proxy_announced",
                        ProxyAnnounced {
                            delegate,
                            real,
                            force_proxy_type,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            219u8, 131u8, 144u8, 200u8, 166u8, 194u8, 171u8, 223u8, 123u8, 131u8,
                            19u8, 248u8, 28u8, 208u8, 51u8, 153u8, 228u8, 1u8, 19u8, 229u8, 67u8,
                            37u8, 126u8, 25u8, 135u8, 214u8, 116u8, 59u8, 193u8, 251u8, 24u8, 84u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_proxy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proxy was executed correctly, with the given.
            pub struct ProxyExecuted {
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for ProxyExecuted {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyExecuted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A pure account has been created by new proxy with given
            ///disambiguation index and proxy type.
            pub struct PureCreated {
                pub pure: ::subxt::utils::AccountId32,
                pub who: ::subxt::utils::AccountId32,
                pub proxy_type: runtime_types::rococo_runtime::ProxyType,
                pub disambiguation_index: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for PureCreated {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "PureCreated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An announcement was placed to make a call in the future.
            pub struct Announced {
                pub real: ::subxt::utils::AccountId32,
                pub proxy: ::subxt::utils::AccountId32,
                pub call_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Announced {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "Announced";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proxy was added.
            pub struct ProxyAdded {
                pub delegator: ::subxt::utils::AccountId32,
                pub delegatee: ::subxt::utils::AccountId32,
                pub proxy_type: runtime_types::rococo_runtime::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProxyAdded {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyAdded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A proxy was removed.
            pub struct ProxyRemoved {
                pub delegator: ::subxt::utils::AccountId32,
                pub delegatee: ::subxt::utils::AccountId32,
                pub proxy_type: runtime_types::rococo_runtime::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProxyRemoved {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The set of account proxies. Maps the account which has delegated to the accounts
                /// which are being delegated to, together with the amount held on deposit.
                pub fn proxies(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::ProxyDefinition<
                                ::subxt::utils::AccountId32,
                                runtime_types::rococo_runtime::ProxyType,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Proxies",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            84u8, 148u8, 72u8, 197u8, 104u8, 135u8, 6u8, 51u8, 208u8, 153u8, 225u8,
                            216u8, 65u8, 98u8, 181u8, 216u8, 16u8, 251u8, 148u8, 245u8, 100u8,
                            169u8, 15u8, 126u8, 169u8, 50u8, 101u8, 134u8, 40u8, 152u8, 219u8,
                            60u8,
                        ],
                    )
                }
                /// The set of account proxies. Maps the account which has delegated to the accounts
                /// which are being delegated to, together with the amount held on deposit.
                pub fn proxies_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::ProxyDefinition<
                                ::subxt::utils::AccountId32,
                                runtime_types::rococo_runtime::ProxyType,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Proxies",
                        Vec::new(),
                        [
                            84u8, 148u8, 72u8, 197u8, 104u8, 135u8, 6u8, 51u8, 208u8, 153u8, 225u8,
                            216u8, 65u8, 98u8, 181u8, 216u8, 16u8, 251u8, 148u8, 245u8, 100u8,
                            169u8, 15u8, 126u8, 169u8, 50u8, 101u8, 134u8, 40u8, 152u8, 219u8,
                            60u8,
                        ],
                    )
                }
                /// The announcements made by the proxy (key).
                pub fn announcements(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                ::subxt::utils::AccountId32,
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Announcements",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            233u8, 38u8, 249u8, 89u8, 103u8, 87u8, 64u8, 52u8, 140u8, 228u8, 110u8,
                            37u8, 8u8, 92u8, 48u8, 7u8, 46u8, 99u8, 179u8, 83u8, 232u8, 171u8,
                            160u8, 45u8, 37u8, 23u8, 151u8, 198u8, 237u8, 103u8, 217u8, 53u8,
                        ],
                    )
                }
                /// The announcements made by the proxy (key).
                pub fn announcements_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                ::subxt::utils::AccountId32,
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Announcements",
                        Vec::new(),
                        [
                            233u8, 38u8, 249u8, 89u8, 103u8, 87u8, 64u8, 52u8, 140u8, 228u8, 110u8,
                            37u8, 8u8, 92u8, 48u8, 7u8, 46u8, 99u8, 179u8, 83u8, 232u8, 171u8,
                            160u8, 45u8, 37u8, 23u8, 151u8, 198u8, 237u8, 103u8, 217u8, 53u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The base amount of currency needed to reserve for creating a proxy.
                ///
                /// This is held for an additional storage item whose value size is
                /// `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes.
                pub fn proxy_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "ProxyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The amount of currency needed per proxy added.
                ///
                /// This is held for adding 32 bytes plus an instance of `ProxyType` more into a
                /// pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one
                /// should take into account `32 + proxy_type.encode().len()` bytes
                /// of data.
                pub fn proxy_deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "ProxyDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The maximum amount of proxies allowed for a single account.
                pub fn max_proxies(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "MaxProxies",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum amount of time-delayed announcements that are allowed to be pending.
                pub fn max_pending(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "MaxPending",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The base amount of currency needed to reserve for creating an announcement.
                ///
                /// This is held when a new storage item holding a `Balance` is created (typically
                /// 16 bytes).
                pub fn announcement_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "AnnouncementDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The amount of currency needed per announcement made.
                ///
                /// This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68
                /// bytes) into a pre-existing storage value.
                pub fn announcement_deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "AnnouncementDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod multisig {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AsMultiThreshold1 {
                pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                pub maybe_timepoint: ::core::option::Option<
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                >,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ApproveAsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                pub maybe_timepoint: ::core::option::Option<
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                >,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CancelAsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Immediately dispatch a multi-signature call using a single approval from the
                /// caller.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `other_signatories`: The accounts (other than the sender) who are part of the
                ///multi-signature, but do not participate in the approval process.
                /// - `call`: The call to be executed.
                ///
                ///Result is equivalent to the dispatched result.
                ///
                ///## Complexity
                ///O(Z + C) where Z is the length of the call and C its execution weight.
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<AsMultiThreshold1> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi_threshold_1",
                        AsMultiThreshold1 { other_signatories, call: ::std::boxed::Box::new(call) },
                        [
                            54u8, 39u8, 225u8, 56u8, 6u8, 122u8, 194u8, 79u8, 112u8, 235u8, 209u8,
                            117u8, 74u8, 111u8, 119u8, 77u8, 92u8, 177u8, 208u8, 51u8, 9u8, 151u8,
                            18u8, 95u8, 205u8, 232u8, 254u8, 134u8, 179u8, 24u8, 192u8, 239u8,
                        ],
                    )
                }
                ///Register approval for a dispatch to be made from a deterministic composite
                /// account if approved by a total of `threshold - 1` of
                /// `other_signatories`.
                ///
                ///If there are enough, then dispatch the call.
                ///
                ///Payment: `DepositBase` will be reserved if this is the first approval, plus
                ///`threshold` times `DepositFactor`. It is returned once this dispatch happens or
                ///is cancelled.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `threshold`: The total number of approvals for this dispatch before it is
                ///   executed.
                /// - `other_signatories`: The accounts (other than the sender) who can approve this
                ///dispatch. May not be empty.
                /// - `maybe_timepoint`: If this is the first approval, then this must be `None`. If
                ///   it is
                ///not the first approval, then it must be `Some`, with the timepoint (block number
                /// and transaction index) of the first approval transaction.
                /// - `call`: The call to be executed.
                ///
                ///NOTE: Unless this is the final approval, you will generally want to use
                ///`approve_as_multi` instead, since it only requires a hash of the call.
                ///
                ///Result is equivalent to the dispatched result if `threshold` is exactly `1`.
                /// Otherwise on success, result is `Ok` and the result from the
                /// interior call, if it was executed, may be found in the deposited
                /// `MultisigExecuted` event.
                ///
                ///## Complexity
                /// - `O(S + Z + Call)`.
                /// - Up to one balance-reserve or unreserve operation.
                /// - One passthrough operation, one insert, both `O(S)` where `S` is the number of
                ///  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
                /// - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
                /// - One encode & hash, both of complexity `O(S)`.
                /// - Up to one binary search and insert (`O(logS + S)`).
                /// - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
                /// - One event.
                /// - The weight of the `call`.
                /// - Storage: inserts one item, value size bounded by `MaxSignatories`, with a
                ///   deposit
                ///  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
                pub fn as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                    max_weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<AsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi",
                        AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call: ::std::boxed::Box::new(call),
                            max_weight,
                        },
                        [
                            14u8, 162u8, 16u8, 104u8, 171u8, 48u8, 151u8, 81u8, 239u8, 93u8, 110u8,
                            136u8, 147u8, 55u8, 147u8, 229u8, 116u8, 37u8, 204u8, 49u8, 102u8,
                            251u8, 43u8, 156u8, 212u8, 193u8, 13u8, 189u8, 154u8, 10u8, 12u8, 55u8,
                        ],
                    )
                }
                ///Register approval for a dispatch to be made from a deterministic composite
                /// account if approved by a total of `threshold - 1` of
                /// `other_signatories`.
                ///
                ///Payment: `DepositBase` will be reserved if this is the first approval, plus
                ///`threshold` times `DepositFactor`. It is returned once this dispatch happens or
                ///is cancelled.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `threshold`: The total number of approvals for this dispatch before it is
                ///   executed.
                /// - `other_signatories`: The accounts (other than the sender) who can approve this
                ///dispatch. May not be empty.
                /// - `maybe_timepoint`: If this is the first approval, then this must be `None`. If
                ///   it is
                ///not the first approval, then it must be `Some`, with the timepoint (block number
                /// and transaction index) of the first approval transaction.
                /// - `call_hash`: The hash of the call to be executed.
                ///
                ///NOTE: If this is the final approval, you will want to use `as_multi` instead.
                ///
                ///## Complexity
                /// - `O(S)`.
                /// - Up to one balance-reserve or unreserve operation.
                /// - One passthrough operation, one insert, both `O(S)` where `S` is the number of
                ///  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
                /// - One encode & hash, both of complexity `O(S)`.
                /// - Up to one binary search and insert (`O(logS + S)`).
                /// - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
                /// - One event.
                /// - Storage: inserts one item, value size bounded by `MaxSignatories`, with a
                ///   deposit
                ///  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
                pub fn approve_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call_hash: [::core::primitive::u8; 32usize],
                    max_weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<ApproveAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "approve_as_multi",
                        ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        },
                        [
                            133u8, 113u8, 121u8, 66u8, 218u8, 219u8, 48u8, 64u8, 211u8, 114u8,
                            163u8, 193u8, 164u8, 21u8, 140u8, 218u8, 253u8, 237u8, 240u8, 126u8,
                            200u8, 213u8, 184u8, 50u8, 187u8, 182u8, 30u8, 52u8, 142u8, 72u8,
                            210u8, 101u8,
                        ],
                    )
                }
                ///Cancel a pre-existing, on-going multisig transaction. Any deposit reserved
                /// previously for this operation will be unreserved on success.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                /// - `threshold`: The total number of approvals for this dispatch before it is
                ///   executed.
                /// - `other_signatories`: The accounts (other than the sender) who can approve this
                ///dispatch. May not be empty.
                /// - `timepoint`: The timepoint (block number and transaction index) of the first
                ///   approval
                ///transaction for this dispatch.
                /// - `call_hash`: The hash of the call to be executed.
                ///
                ///## Complexity
                /// - `O(S)`.
                /// - Up to one balance-reserve or unreserve operation.
                /// - One passthrough operation, one insert, both `O(S)` where `S` is the number of
                ///  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.
                /// - One encode & hash, both of complexity `O(S)`.
                /// - One event.
                /// - I/O: 1 read `O(S)`, one remove.
                /// - Storage: removes one item.
                pub fn cancel_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    call_hash: [::core::primitive::u8; 32usize],
                ) -> ::subxt::tx::Payload<CancelAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "cancel_as_multi",
                        CancelAsMulti { threshold, other_signatories, timepoint, call_hash },
                        [
                            30u8, 25u8, 186u8, 142u8, 168u8, 81u8, 235u8, 164u8, 82u8, 209u8, 66u8,
                            129u8, 209u8, 78u8, 172u8, 9u8, 163u8, 222u8, 125u8, 57u8, 2u8, 43u8,
                            169u8, 174u8, 159u8, 167u8, 25u8, 226u8, 254u8, 110u8, 80u8, 216u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new multisig operation has begun.
            pub struct NewMultisig {
                pub approving: ::subxt::utils::AccountId32,
                pub multisig: ::subxt::utils::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A multisig operation has been approved by someone.
            pub struct MultisigApproval {
                pub approving: ::subxt::utils::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: ::subxt::utils::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A multisig operation has been executed.
            pub struct MultisigExecuted {
                pub approving: ::subxt::utils::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: ::subxt::utils::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A multisig operation has been cancelled.
            pub struct MultisigCancelled {
                pub cancelling: ::subxt::utils::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: ::subxt::utils::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The set of open multisig operations.
                pub fn multisigs(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            69u8, 153u8, 186u8, 204u8, 117u8, 95u8, 119u8, 182u8, 220u8, 87u8, 8u8,
                            15u8, 123u8, 83u8, 5u8, 188u8, 115u8, 121u8, 163u8, 96u8, 218u8, 3u8,
                            106u8, 44u8, 44u8, 187u8, 46u8, 238u8, 80u8, 203u8, 175u8, 155u8,
                        ],
                    )
                }
                /// The set of open multisig operations.
                pub fn multisigs_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        Vec::new(),
                        [
                            69u8, 153u8, 186u8, 204u8, 117u8, 95u8, 119u8, 182u8, 220u8, 87u8, 8u8,
                            15u8, 123u8, 83u8, 5u8, 188u8, 115u8, 121u8, 163u8, 96u8, 218u8, 3u8,
                            106u8, 44u8, 44u8, 187u8, 46u8, 238u8, 80u8, 203u8, 175u8, 155u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The base amount of currency needed to reserve for creating a multisig execution
                /// or to store a dispatch call for later.
                ///
                /// This is held for an additional storage item whose value size is
                /// `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is
                /// `32 + sizeof(AccountId)` bytes.
                pub fn deposit_base(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The amount of currency needed per unit threshold when creating a multisig
                /// execution.
                ///
                /// This is held for adding 32 bytes more into a pre-existing storage value.
                pub fn deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The maximum amount of signatories allowed in the multisig.
                pub fn max_signatories(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "MaxSignatories",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod preimage {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NotePreimage {
                pub bytes: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnnotePreimage {
                pub hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RequestPreimage {
                pub hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnrequestPreimage {
                pub hash: ::subxt::utils::H256,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Register a preimage on-chain.
                ///
                ///If the preimage was previously requested, no fees or deposits are taken for
                /// providing the preimage. Otherwise, a deposit is taken
                /// proportional to the size of the preimage.
                pub fn note_preimage(
                    &self,
                    bytes: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<NotePreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "note_preimage",
                        NotePreimage { bytes },
                        [
                            77u8, 48u8, 104u8, 3u8, 254u8, 65u8, 106u8, 95u8, 204u8, 89u8, 149u8,
                            29u8, 144u8, 188u8, 99u8, 23u8, 146u8, 142u8, 35u8, 17u8, 125u8, 130u8,
                            31u8, 206u8, 106u8, 83u8, 163u8, 192u8, 81u8, 23u8, 232u8, 230u8,
                        ],
                    )
                }
                ///Clear an unrequested preimage from the runtime storage.
                ///
                ///If `len` is provided, then it will be a much cheaper operation.
                ///
                /// - `hash`: The hash of the preimage to be removed from the store.
                /// - `len`: The length of the preimage of `hash`.
                pub fn unnote_preimage(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<UnnotePreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "unnote_preimage",
                        UnnotePreimage { hash },
                        [
                            211u8, 204u8, 205u8, 58u8, 33u8, 179u8, 68u8, 74u8, 149u8, 138u8,
                            213u8, 45u8, 140u8, 27u8, 106u8, 81u8, 68u8, 212u8, 147u8, 116u8, 27u8,
                            130u8, 84u8, 34u8, 231u8, 197u8, 135u8, 8u8, 19u8, 242u8, 207u8, 17u8,
                        ],
                    )
                }
                ///Request a preimage be uploaded to the chain without paying any fees or deposits.
                ///
                ///If the preimage requests has already been provided on-chain, we unreserve any
                /// deposit a user may have paid, and take the control of the
                /// preimage out of their hands.
                pub fn request_preimage(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<RequestPreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "request_preimage",
                        RequestPreimage { hash },
                        [
                            195u8, 26u8, 146u8, 255u8, 79u8, 43u8, 73u8, 60u8, 115u8, 78u8, 99u8,
                            197u8, 137u8, 95u8, 139u8, 141u8, 79u8, 213u8, 170u8, 169u8, 127u8,
                            30u8, 236u8, 65u8, 38u8, 16u8, 118u8, 228u8, 141u8, 83u8, 162u8, 233u8,
                        ],
                    )
                }
                ///Clear a previously made request for a preimage.
                ///
                ///NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.
                pub fn unrequest_preimage(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<UnrequestPreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "unrequest_preimage",
                        UnrequestPreimage { hash },
                        [
                            143u8, 225u8, 239u8, 44u8, 237u8, 83u8, 18u8, 105u8, 101u8, 68u8,
                            111u8, 116u8, 66u8, 212u8, 63u8, 190u8, 38u8, 32u8, 105u8, 152u8, 69u8,
                            177u8, 193u8, 15u8, 60u8, 26u8, 95u8, 130u8, 11u8, 113u8, 187u8, 108u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_preimage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A preimage has been noted.
            pub struct Noted {
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Noted {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Noted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A preimage has been requested.
            pub struct Requested {
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Requested {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Requested";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A preimage has ben cleared.
            pub struct Cleared {
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Cleared {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Cleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The request status of a given hash.
                pub fn status_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_preimage::RequestStatus<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "StatusFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            103u8, 208u8, 88u8, 167u8, 244u8, 198u8, 129u8, 134u8, 182u8, 80u8,
                            71u8, 192u8, 73u8, 92u8, 190u8, 15u8, 20u8, 132u8, 37u8, 108u8, 88u8,
                            233u8, 18u8, 145u8, 9u8, 235u8, 5u8, 132u8, 42u8, 17u8, 227u8, 56u8,
                        ],
                    )
                }
                /// The request status of a given hash.
                pub fn status_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_preimage::RequestStatus<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "StatusFor",
                        Vec::new(),
                        [
                            103u8, 208u8, 88u8, 167u8, 244u8, 198u8, 129u8, 134u8, 182u8, 80u8,
                            71u8, 192u8, 73u8, 92u8, 190u8, 15u8, 20u8, 132u8, 37u8, 108u8, 88u8,
                            233u8, 18u8, 145u8, 9u8, 235u8, 5u8, 132u8, 42u8, 17u8, 227u8, 56u8,
                        ],
                    )
                }
                pub fn preimage_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "PreimageFor",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            96u8, 74u8, 30u8, 112u8, 120u8, 41u8, 52u8, 187u8, 252u8, 68u8, 42u8,
                            5u8, 61u8, 228u8, 250u8, 192u8, 224u8, 61u8, 53u8, 222u8, 95u8, 148u8,
                            6u8, 53u8, 43u8, 152u8, 88u8, 58u8, 185u8, 234u8, 131u8, 124u8,
                        ],
                    )
                }
                pub fn preimage_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "PreimageFor",
                        Vec::new(),
                        [
                            96u8, 74u8, 30u8, 112u8, 120u8, 41u8, 52u8, 187u8, 252u8, 68u8, 42u8,
                            5u8, 61u8, 228u8, 250u8, 192u8, 224u8, 61u8, 53u8, 222u8, 95u8, 148u8,
                            6u8, 53u8, 43u8, 152u8, 88u8, 58u8, 185u8, 234u8, 131u8, 124u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bounties {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ProposeBounty {
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub description: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ApproveBounty {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ProposeCurator {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
                pub curator: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub fee: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnassignCurator {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AcceptCurator {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AwardBounty {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
                pub beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ClaimBounty {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CloseBounty {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExtendBountyExpiry {
                #[codec(compact)]
                pub bounty_id: ::core::primitive::u32,
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Propose a new bounty.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Payment: `TipReportDepositBase` will be reserved from the origin account, as
                /// well as `DataDepositPerByte` for each byte in `reason`. It will
                /// be unreserved upon approval, or slashed when rejected.
                ///
                /// - `curator`: The curator account whom will manage this bounty.
                /// - `fee`: The curator fee.
                /// - `value`: The total payment amount of this bounty, curator fee included.
                /// - `description`: The description of this bounty.
                pub fn propose_bounty(
                    &self,
                    value: ::core::primitive::u128,
                    description: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<ProposeBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "propose_bounty",
                        ProposeBounty { value, description },
                        [
                            99u8, 160u8, 94u8, 74u8, 105u8, 161u8, 123u8, 239u8, 241u8, 117u8,
                            97u8, 99u8, 84u8, 101u8, 87u8, 3u8, 88u8, 175u8, 75u8, 59u8, 114u8,
                            87u8, 18u8, 113u8, 126u8, 26u8, 42u8, 104u8, 201u8, 128u8, 102u8,
                            219u8,
                        ],
                    )
                }
                ///Approve a bounty proposal. At a later time, the bounty will be funded and become
                /// active and the original deposit will be returned.
                ///
                ///May only be called from `T::SpendOrigin`.
                ///
                ///## Complexity
                /// - O(1).
                pub fn approve_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ApproveBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "approve_bounty",
                        ApproveBounty { bounty_id },
                        [
                            82u8, 228u8, 232u8, 103u8, 198u8, 173u8, 190u8, 148u8, 159u8, 86u8,
                            48u8, 4u8, 32u8, 169u8, 1u8, 129u8, 96u8, 145u8, 235u8, 68u8, 48u8,
                            34u8, 5u8, 1u8, 76u8, 26u8, 100u8, 228u8, 92u8, 198u8, 183u8, 173u8,
                        ],
                    )
                }
                ///Assign a curator to a funded bounty.
                ///
                ///May only be called from `T::SpendOrigin`.
                ///
                ///## Complexity
                /// - O(1).
                pub fn propose_curator(
                    &self,
                    bounty_id: ::core::primitive::u32,
                    curator: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<ProposeCurator> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "propose_curator",
                        ProposeCurator { bounty_id, curator, fee },
                        [
                            123u8, 148u8, 21u8, 204u8, 216u8, 6u8, 47u8, 83u8, 182u8, 30u8, 171u8,
                            48u8, 193u8, 200u8, 197u8, 147u8, 111u8, 88u8, 14u8, 242u8, 66u8,
                            175u8, 241u8, 208u8, 95u8, 151u8, 41u8, 46u8, 213u8, 188u8, 65u8,
                            196u8,
                        ],
                    )
                }
                ///Unassign curator from a bounty.
                ///
                ///This function can only be called by the `RejectOrigin` a signed origin.
                ///
                ///If this function is called by the `RejectOrigin`, we assume that the curator is
                ///malicious or inactive. As a result, we will slash the curator when possible.
                ///
                ///If the origin is the curator, we take this as a sign they are unable to do their
                /// job and they willingly give up. We could slash them, but for now
                /// we allow them to recover their deposit and exit without issue.
                /// (We may want to change this if it is abused.)
                ///
                ///Finally, the origin can be anyone if and only if the curator is "inactive". This
                /// allows anyone in the community to call out that a curator is not
                /// doing their due diligence, and we should pick a new curator. In
                /// this case the curator should also be slashed.
                ///
                ///## Complexity
                /// - O(1).
                pub fn unassign_curator(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<UnassignCurator> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "unassign_curator",
                        UnassignCurator { bounty_id },
                        [
                            218u8, 241u8, 247u8, 89u8, 95u8, 120u8, 93u8, 18u8, 85u8, 114u8, 158u8,
                            254u8, 68u8, 77u8, 230u8, 186u8, 230u8, 201u8, 63u8, 223u8, 28u8,
                            173u8, 244u8, 82u8, 113u8, 177u8, 99u8, 27u8, 207u8, 247u8, 207u8,
                            213u8,
                        ],
                    )
                }
                ///Accept the curator role for a bounty.
                ///A deposit will be reserved from curator and refund upon successful payout.
                ///
                ///May only be called from the curator.
                ///
                ///## Complexity
                /// - O(1).
                pub fn accept_curator(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<AcceptCurator> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "accept_curator",
                        AcceptCurator { bounty_id },
                        [
                            106u8, 96u8, 22u8, 67u8, 52u8, 109u8, 180u8, 225u8, 122u8, 253u8,
                            209u8, 214u8, 132u8, 131u8, 247u8, 131u8, 162u8, 51u8, 144u8, 30u8,
                            12u8, 126u8, 50u8, 152u8, 229u8, 119u8, 54u8, 116u8, 112u8, 235u8,
                            34u8, 166u8,
                        ],
                    )
                }
                ///Award bounty to a beneficiary account. The beneficiary will be able to claim the
                /// funds after a delay.
                ///
                ///The dispatch origin for this call must be the curator of this bounty.
                ///
                /// - `bounty_id`: Bounty ID to award.
                /// - `beneficiary`: The beneficiary account whom will receive the payout.
                ///
                ///## Complexity
                /// - O(1).
                pub fn award_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                    beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<AwardBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "award_bounty",
                        AwardBounty { bounty_id, beneficiary },
                        [
                            203u8, 164u8, 214u8, 242u8, 1u8, 11u8, 217u8, 32u8, 189u8, 136u8, 29u8,
                            230u8, 88u8, 17u8, 134u8, 189u8, 15u8, 204u8, 223u8, 20u8, 168u8,
                            182u8, 129u8, 48u8, 83u8, 25u8, 125u8, 25u8, 209u8, 155u8, 170u8, 68u8,
                        ],
                    )
                }
                ///Claim the payout from an awarded bounty after payout delay.
                ///
                ///The dispatch origin for this call must be the beneficiary of this bounty.
                ///
                /// - `bounty_id`: Bounty ID to claim.
                ///
                ///## Complexity
                /// - O(1).
                pub fn claim_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ClaimBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "claim_bounty",
                        ClaimBounty { bounty_id },
                        [
                            102u8, 95u8, 8u8, 89u8, 4u8, 126u8, 189u8, 28u8, 241u8, 16u8, 125u8,
                            218u8, 42u8, 92u8, 177u8, 91u8, 8u8, 235u8, 33u8, 48u8, 64u8, 115u8,
                            177u8, 95u8, 242u8, 97u8, 181u8, 50u8, 68u8, 37u8, 59u8, 85u8,
                        ],
                    )
                }
                ///Cancel a proposed or active bounty. All the funds will be sent to treasury and
                ///the curator deposit will be unreserved if possible.
                ///
                ///Only `T::RejectOrigin` is able to cancel a bounty.
                ///
                /// - `bounty_id`: Bounty ID to cancel.
                ///
                ///## Complexity
                /// - O(1).
                pub fn close_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<CloseBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "close_bounty",
                        CloseBounty { bounty_id },
                        [
                            64u8, 113u8, 151u8, 228u8, 90u8, 55u8, 251u8, 63u8, 27u8, 211u8, 119u8,
                            229u8, 137u8, 137u8, 183u8, 240u8, 241u8, 146u8, 69u8, 169u8, 124u8,
                            220u8, 236u8, 111u8, 98u8, 188u8, 100u8, 52u8, 127u8, 245u8, 244u8,
                            92u8,
                        ],
                    )
                }
                ///Extend the expiry time of an active bounty.
                ///
                ///The dispatch origin for this call must be the curator of this bounty.
                ///
                /// - `bounty_id`: Bounty ID to extend.
                /// - `remark`: additional information.
                ///
                ///## Complexity
                /// - O(1).
                pub fn extend_bounty_expiry(
                    &self,
                    bounty_id: ::core::primitive::u32,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<ExtendBountyExpiry> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "extend_bounty_expiry",
                        ExtendBountyExpiry { bounty_id, remark },
                        [
                            97u8, 69u8, 157u8, 39u8, 59u8, 72u8, 79u8, 88u8, 104u8, 119u8, 91u8,
                            26u8, 73u8, 216u8, 174u8, 95u8, 254u8, 214u8, 63u8, 138u8, 100u8,
                            112u8, 185u8, 81u8, 159u8, 247u8, 221u8, 60u8, 87u8, 40u8, 80u8, 202u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_bounties::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///New bounty proposal.
            pub struct BountyProposed {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyProposed {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyProposed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bounty proposal was rejected; funds were slashed.
            pub struct BountyRejected {
                pub index: ::core::primitive::u32,
                pub bond: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for BountyRejected {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyRejected";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bounty proposal is funded and became active.
            pub struct BountyBecameActive {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyBecameActive {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyBecameActive";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bounty is awarded to a beneficiary.
            pub struct BountyAwarded {
                pub index: ::core::primitive::u32,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for BountyAwarded {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyAwarded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bounty is claimed by beneficiary.
            pub struct BountyClaimed {
                pub index: ::core::primitive::u32,
                pub payout: ::core::primitive::u128,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for BountyClaimed {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyClaimed";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bounty is cancelled.
            pub struct BountyCanceled {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyCanceled {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyCanceled";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bounty expiry is extended.
            pub struct BountyExtended {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyExtended {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyExtended";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Number of bounty proposals that have been made.
                pub fn bounty_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "BountyCount",
                        vec![],
                        [
                            5u8, 188u8, 134u8, 220u8, 64u8, 49u8, 188u8, 98u8, 185u8, 186u8, 230u8,
                            65u8, 247u8, 199u8, 28u8, 178u8, 202u8, 193u8, 41u8, 83u8, 115u8,
                            253u8, 182u8, 123u8, 92u8, 138u8, 12u8, 31u8, 31u8, 213u8, 23u8, 118u8,
                        ],
                    )
                }
                /// Bounties that have been made.
                pub fn bounties(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_bounties::Bounty<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "Bounties",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            111u8, 149u8, 33u8, 54u8, 172u8, 143u8, 41u8, 231u8, 184u8, 255u8,
                            238u8, 206u8, 87u8, 142u8, 84u8, 10u8, 236u8, 141u8, 190u8, 193u8,
                            72u8, 170u8, 19u8, 110u8, 135u8, 136u8, 220u8, 11u8, 99u8, 126u8,
                            225u8, 208u8,
                        ],
                    )
                }
                /// Bounties that have been made.
                pub fn bounties_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_bounties::Bounty<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "Bounties",
                        Vec::new(),
                        [
                            111u8, 149u8, 33u8, 54u8, 172u8, 143u8, 41u8, 231u8, 184u8, 255u8,
                            238u8, 206u8, 87u8, 142u8, 84u8, 10u8, 236u8, 141u8, 190u8, 193u8,
                            72u8, 170u8, 19u8, 110u8, 135u8, 136u8, 220u8, 11u8, 99u8, 126u8,
                            225u8, 208u8,
                        ],
                    )
                }
                /// The description of each bounty.
                pub fn bounty_descriptions(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "BountyDescriptions",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            252u8, 0u8, 9u8, 225u8, 13u8, 135u8, 7u8, 121u8, 154u8, 155u8, 116u8,
                            83u8, 160u8, 37u8, 72u8, 11u8, 72u8, 0u8, 248u8, 73u8, 158u8, 84u8,
                            125u8, 221u8, 176u8, 231u8, 100u8, 239u8, 111u8, 22u8, 29u8, 13u8,
                        ],
                    )
                }
                /// The description of each bounty.
                pub fn bounty_descriptions_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "BountyDescriptions",
                        Vec::new(),
                        [
                            252u8, 0u8, 9u8, 225u8, 13u8, 135u8, 7u8, 121u8, 154u8, 155u8, 116u8,
                            83u8, 160u8, 37u8, 72u8, 11u8, 72u8, 0u8, 248u8, 73u8, 158u8, 84u8,
                            125u8, 221u8, 176u8, 231u8, 100u8, 239u8, 111u8, 22u8, 29u8, 13u8,
                        ],
                    )
                }
                /// Bounty indices that have been approved but not yet funded.
                pub fn bounty_approvals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "BountyApprovals",
                        vec![],
                        [
                            64u8, 93u8, 54u8, 94u8, 122u8, 9u8, 246u8, 86u8, 234u8, 30u8, 125u8,
                            132u8, 49u8, 128u8, 1u8, 219u8, 241u8, 13u8, 217u8, 186u8, 48u8, 21u8,
                            5u8, 227u8, 71u8, 157u8, 128u8, 226u8, 214u8, 49u8, 249u8, 183u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The amount held on deposit for placing a bounty proposal.
                pub fn bounty_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "BountyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The delay period for which a bounty beneficiary need to wait before claim the
                /// payout.
                pub fn bounty_deposit_payout_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "BountyDepositPayoutDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Bounty duration in blocks.
                pub fn bounty_update_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "BountyUpdatePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The curator deposit is calculated as a percentage of the curator fee.
                ///
                /// This deposit has optional upper and lower bounds with `CuratorDepositMax` and
                /// `CuratorDepositMin`.
                pub fn curator_deposit_multiplier(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "CuratorDepositMultiplier",
                        [
                            225u8, 236u8, 95u8, 157u8, 90u8, 94u8, 106u8, 192u8, 254u8, 19u8, 87u8,
                            80u8, 16u8, 62u8, 42u8, 204u8, 136u8, 106u8, 225u8, 53u8, 212u8, 52u8,
                            177u8, 79u8, 4u8, 116u8, 201u8, 104u8, 222u8, 75u8, 86u8, 227u8,
                        ],
                    )
                }
                /// Maximum amount of funds that should be placed in a deposit for making a
                /// proposal.
                pub fn curator_deposit_max(
                    &self,
                ) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>>
                {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "CuratorDepositMax",
                        [
                            84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
                            205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
                            204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
                            216u8,
                        ],
                    )
                }
                /// Minimum amount of funds that should be placed in a deposit for making a
                /// proposal.
                pub fn curator_deposit_min(
                    &self,
                ) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>>
                {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "CuratorDepositMin",
                        [
                            84u8, 154u8, 218u8, 83u8, 84u8, 189u8, 32u8, 20u8, 120u8, 194u8, 88u8,
                            205u8, 109u8, 216u8, 114u8, 193u8, 120u8, 198u8, 154u8, 237u8, 134u8,
                            204u8, 102u8, 247u8, 52u8, 103u8, 231u8, 43u8, 243u8, 122u8, 60u8,
                            216u8,
                        ],
                    )
                }
                /// Minimum value for a bounty.
                pub fn bounty_value_minimum(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "BountyValueMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The amount held on deposit per byte within the tip report reason or bounty
                /// description.
                pub fn data_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "DataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// Maximum acceptable reason length.
                ///
                /// Benchmarks depend on this value, be sure to update weights file when changing
                /// this value
                pub fn maximum_reason_length(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "MaximumReasonLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod child_bounties {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AddChildBounty {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub description: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ProposeCurator {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
                pub curator: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub fee: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AcceptCurator {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnassignCurator {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AwardChildBounty {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
                pub beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ClaimChildBounty {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CloseChildBounty {
                #[codec(compact)]
                pub parent_bounty_id: ::core::primitive::u32,
                #[codec(compact)]
                pub child_bounty_id: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Add a new child-bounty.
                ///
                ///The dispatch origin for this call must be the curator of parent
                ///bounty and the parent bounty must be in "active" state.
                ///
                ///Child-bounty gets added successfully & fund gets transferred from
                ///parent bounty to child-bounty account, if parent bounty has enough
                ///funds, else the call fails.
                ///
                ///Upper bound to maximum number of active  child bounties that can be
                ///added are managed via runtime trait config
                ///[`Config::MaxActiveChildBountyCount`].
                ///
                ///If the call is success, the status of child-bounty is updated to
                ///"Added".
                ///
                /// - `parent_bounty_id`: Index of parent bounty for which child-bounty is being
                ///   added.
                /// - `value`: Value for executing the proposal.
                /// - `description`: Text description for the child-bounty.
                pub fn add_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    value: ::core::primitive::u128,
                    description: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<AddChildBounty> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "add_child_bounty",
                        AddChildBounty { parent_bounty_id, value, description },
                        [
                            210u8, 156u8, 242u8, 121u8, 28u8, 214u8, 212u8, 203u8, 46u8, 45u8,
                            110u8, 25u8, 33u8, 138u8, 136u8, 71u8, 23u8, 102u8, 203u8, 122u8, 77u8,
                            162u8, 112u8, 133u8, 43u8, 73u8, 201u8, 176u8, 102u8, 68u8, 188u8, 8u8,
                        ],
                    )
                }
                ///Propose curator for funded child-bounty.
                ///
                ///The dispatch origin for this call must be curator of parent bounty.
                ///
                ///Parent bounty must be in active state, for this child-bounty call to
                ///work.
                ///
                ///Child-bounty must be in "Added" state, for processing the call. And
                ///state of child-bounty is moved to "CuratorProposed" on successful
                ///call completion.
                ///
                /// - `parent_bounty_id`: Index of parent bounty.
                /// - `child_bounty_id`: Index of child bounty.
                /// - `curator`: Address of child-bounty curator.
                /// - `fee`: payment fee to child-bounty curator for execution.
                pub fn propose_curator(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                    curator: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<ProposeCurator> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "propose_curator",
                        ProposeCurator { parent_bounty_id, child_bounty_id, curator, fee },
                        [
                            37u8, 101u8, 96u8, 75u8, 254u8, 212u8, 42u8, 140u8, 72u8, 107u8, 157u8,
                            110u8, 147u8, 236u8, 17u8, 138u8, 161u8, 153u8, 119u8, 177u8, 225u8,
                            22u8, 83u8, 5u8, 123u8, 38u8, 30u8, 240u8, 134u8, 208u8, 183u8, 247u8,
                        ],
                    )
                }
                ///Accept the curator role for the child-bounty.
                ///
                ///The dispatch origin for this call must be the curator of this
                ///child-bounty.
                ///
                ///A deposit will be reserved from the curator and refund upon
                ///successful payout or cancellation.
                ///
                ///Fee for curator is deducted from curator fee of parent bounty.
                ///
                ///Parent bounty must be in active state, for this child-bounty call to
                ///work.
                ///
                ///Child-bounty must be in "CuratorProposed" state, for processing the
                ///call. And state of child-bounty is moved to "Active" on successful
                ///call completion.
                ///
                /// - `parent_bounty_id`: Index of parent bounty.
                /// - `child_bounty_id`: Index of child bounty.
                pub fn accept_curator(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<AcceptCurator> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "accept_curator",
                        AcceptCurator { parent_bounty_id, child_bounty_id },
                        [
                            112u8, 175u8, 238u8, 54u8, 132u8, 20u8, 206u8, 59u8, 220u8, 228u8,
                            207u8, 222u8, 132u8, 240u8, 188u8, 0u8, 210u8, 225u8, 234u8, 142u8,
                            232u8, 53u8, 64u8, 89u8, 220u8, 29u8, 28u8, 123u8, 125u8, 207u8, 10u8,
                            52u8,
                        ],
                    )
                }
                ///Unassign curator from a child-bounty.
                ///
                ///The dispatch origin for this call can be either `RejectOrigin`, or
                ///the curator of the parent bounty, or any signed origin.
                ///
                ///For the origin other than T::RejectOrigin and the child-bounty
                ///curator, parent bounty must be in active state, for this call to
                ///work. We allow child-bounty curator and T::RejectOrigin to execute
                ///this call irrespective of the parent bounty state.
                ///
                ///If this function is called by the `RejectOrigin` or the
                ///parent bounty curator, we assume that the child-bounty curator is
                ///malicious or inactive. As a result, child-bounty curator deposit is
                ///slashed.
                ///
                ///If the origin is the child-bounty curator, we take this as a sign
                ///that they are unable to do their job, and are willingly giving up.
                ///We could slash the deposit, but for now we allow them to unreserve
                ///their deposit and exit without issue. (We may want to change this if
                ///it is abused.)
                ///
                ///Finally, the origin can be anyone iff the child-bounty curator is
                ///"inactive". Expiry update due of parent bounty is used to estimate
                ///inactive state of child-bounty curator.
                ///
                ///This allows anyone in the community to call out that a child-bounty
                ///curator is not doing their due diligence, and we should pick a new
                ///one. In this case the child-bounty curator deposit is slashed.
                ///
                ///State of child-bounty is moved to Added state on successful call
                ///completion.
                ///
                /// - `parent_bounty_id`: Index of parent bounty.
                /// - `child_bounty_id`: Index of child bounty.
                pub fn unassign_curator(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<UnassignCurator> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "unassign_curator",
                        UnassignCurator { parent_bounty_id, child_bounty_id },
                        [
                            228u8, 189u8, 46u8, 75u8, 121u8, 161u8, 150u8, 87u8, 207u8, 86u8,
                            192u8, 50u8, 52u8, 61u8, 49u8, 88u8, 178u8, 182u8, 89u8, 72u8, 203u8,
                            45u8, 41u8, 26u8, 149u8, 114u8, 154u8, 169u8, 118u8, 128u8, 13u8,
                            211u8,
                        ],
                    )
                }
                ///Award child-bounty to a beneficiary.
                ///
                ///The beneficiary will be able to claim the funds after a delay.
                ///
                ///The dispatch origin for this call must be the parent curator or
                ///curator of this child-bounty.
                ///
                ///Parent bounty must be in active state, for this child-bounty call to
                ///work.
                ///
                ///Child-bounty must be in active state, for processing the call. And
                ///state of child-bounty is moved to "PendingPayout" on successful call
                ///completion.
                ///
                /// - `parent_bounty_id`: Index of parent bounty.
                /// - `child_bounty_id`: Index of child bounty.
                /// - `beneficiary`: Beneficiary account.
                pub fn award_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                    beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<AwardChildBounty> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "award_child_bounty",
                        AwardChildBounty { parent_bounty_id, child_bounty_id, beneficiary },
                        [
                            231u8, 185u8, 73u8, 232u8, 92u8, 116u8, 204u8, 165u8, 216u8, 194u8,
                            151u8, 21u8, 127u8, 239u8, 78u8, 45u8, 27u8, 252u8, 119u8, 23u8, 71u8,
                            140u8, 137u8, 209u8, 189u8, 128u8, 126u8, 247u8, 13u8, 42u8, 68u8,
                            134u8,
                        ],
                    )
                }
                ///Claim the payout from an awarded child-bounty after payout delay.
                ///
                ///The dispatch origin for this call may be any signed origin.
                ///
                ///Call works independent of parent bounty state, No need for parent
                ///bounty to be in active state.
                ///
                ///The Beneficiary is paid out with agreed bounty value. Curator fee is
                ///paid & curator deposit is unreserved.
                ///
                ///Child-bounty must be in "PendingPayout" state, for processing the
                ///call. And instance of child-bounty is removed from the state on
                ///successful call completion.
                ///
                /// - `parent_bounty_id`: Index of parent bounty.
                /// - `child_bounty_id`: Index of child bounty.
                pub fn claim_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ClaimChildBounty> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "claim_child_bounty",
                        ClaimChildBounty { parent_bounty_id, child_bounty_id },
                        [
                            134u8, 243u8, 151u8, 228u8, 38u8, 174u8, 96u8, 140u8, 104u8, 124u8,
                            166u8, 206u8, 126u8, 211u8, 17u8, 100u8, 172u8, 5u8, 234u8, 171u8,
                            125u8, 2u8, 191u8, 163u8, 72u8, 29u8, 163u8, 107u8, 65u8, 92u8, 41u8,
                            45u8,
                        ],
                    )
                }
                ///Cancel a proposed or active child-bounty. Child-bounty account funds
                ///are transferred to parent bounty account. The child-bounty curator
                ///deposit may be unreserved if possible.
                ///
                ///The dispatch origin for this call must be either parent curator or
                ///`T::RejectOrigin`.
                ///
                ///If the state of child-bounty is `Active`, curator deposit is
                ///unreserved.
                ///
                ///If the state of child-bounty is `PendingPayout`, call fails &
                ///returns `PendingPayout` error.
                ///
                ///For the origin other than T::RejectOrigin, parent bounty must be in
                ///active state, for this child-bounty call to work. For origin
                ///T::RejectOrigin execution is forced.
                ///
                ///Instance of child-bounty is removed from the state on successful
                ///call completion.
                ///
                /// - `parent_bounty_id`: Index of parent bounty.
                /// - `child_bounty_id`: Index of child bounty.
                pub fn close_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<CloseChildBounty> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "close_child_bounty",
                        CloseChildBounty { parent_bounty_id, child_bounty_id },
                        [
                            40u8, 0u8, 235u8, 75u8, 36u8, 196u8, 29u8, 26u8, 30u8, 172u8, 240u8,
                            44u8, 129u8, 243u8, 55u8, 211u8, 96u8, 159u8, 72u8, 96u8, 142u8, 68u8,
                            41u8, 238u8, 157u8, 167u8, 90u8, 141u8, 213u8, 249u8, 222u8, 22u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_child_bounties::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A child-bounty is added.
            pub struct Added {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Added {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Added";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A child-bounty is awarded to a beneficiary.
            pub struct Awarded {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Awarded {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A child-bounty is claimed by beneficiary.
            pub struct Claimed {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
                pub payout: ::core::primitive::u128,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Claimed {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Claimed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A child-bounty is cancelled.
            pub struct Canceled {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Canceled {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Canceled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Number of total child bounties.
                pub fn child_bounty_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBountyCount",
                        vec![],
                        [
                            46u8, 10u8, 183u8, 160u8, 98u8, 215u8, 39u8, 253u8, 81u8, 94u8, 114u8,
                            147u8, 115u8, 162u8, 33u8, 117u8, 160u8, 214u8, 167u8, 7u8, 109u8,
                            143u8, 158u8, 1u8, 200u8, 205u8, 17u8, 93u8, 89u8, 26u8, 30u8, 95u8,
                        ],
                    )
                }
                /// Number of child bounties per parent bounty.
                /// Map of parent bounty index to number of child bounties.
                pub fn parent_child_bounties(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ParentChildBounties",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            127u8, 161u8, 181u8, 79u8, 235u8, 196u8, 252u8, 162u8, 39u8, 15u8,
                            251u8, 49u8, 125u8, 80u8, 101u8, 24u8, 234u8, 88u8, 212u8, 126u8, 63u8,
                            63u8, 19u8, 75u8, 137u8, 125u8, 38u8, 250u8, 77u8, 49u8, 76u8, 188u8,
                        ],
                    )
                }
                /// Number of child bounties per parent bounty.
                /// Map of parent bounty index to number of child bounties.
                pub fn parent_child_bounties_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ParentChildBounties",
                        Vec::new(),
                        [
                            127u8, 161u8, 181u8, 79u8, 235u8, 196u8, 252u8, 162u8, 39u8, 15u8,
                            251u8, 49u8, 125u8, 80u8, 101u8, 24u8, 234u8, 88u8, 212u8, 126u8, 63u8,
                            63u8, 19u8, 75u8, 137u8, 125u8, 38u8, 250u8, 77u8, 49u8, 76u8, 188u8,
                        ],
                    )
                }
                /// Child bounties that have been added.
                pub fn child_bounties(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_child_bounties::ChildBounty<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBounties",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            66u8, 132u8, 251u8, 223u8, 216u8, 52u8, 162u8, 150u8, 229u8, 239u8,
                            219u8, 182u8, 211u8, 228u8, 181u8, 46u8, 243u8, 151u8, 111u8, 235u8,
                            105u8, 40u8, 39u8, 10u8, 245u8, 113u8, 78u8, 116u8, 219u8, 186u8,
                            165u8, 91u8,
                        ],
                    )
                }
                /// Child bounties that have been added.
                pub fn child_bounties_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_child_bounties::ChildBounty<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBounties",
                        Vec::new(),
                        [
                            66u8, 132u8, 251u8, 223u8, 216u8, 52u8, 162u8, 150u8, 229u8, 239u8,
                            219u8, 182u8, 211u8, 228u8, 181u8, 46u8, 243u8, 151u8, 111u8, 235u8,
                            105u8, 40u8, 39u8, 10u8, 245u8, 113u8, 78u8, 116u8, 219u8, 186u8,
                            165u8, 91u8,
                        ],
                    )
                }
                /// The description of each child-bounty.
                pub fn child_bounty_descriptions(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBountyDescriptions",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            193u8, 200u8, 40u8, 30u8, 14u8, 71u8, 90u8, 42u8, 58u8, 253u8, 225u8,
                            158u8, 172u8, 10u8, 45u8, 238u8, 36u8, 144u8, 184u8, 153u8, 11u8,
                            157u8, 125u8, 220u8, 175u8, 31u8, 28u8, 93u8, 207u8, 212u8, 141u8,
                            74u8,
                        ],
                    )
                }
                /// The description of each child-bounty.
                pub fn child_bounty_descriptions_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBountyDescriptions",
                        Vec::new(),
                        [
                            193u8, 200u8, 40u8, 30u8, 14u8, 71u8, 90u8, 42u8, 58u8, 253u8, 225u8,
                            158u8, 172u8, 10u8, 45u8, 238u8, 36u8, 144u8, 184u8, 153u8, 11u8,
                            157u8, 125u8, 220u8, 175u8, 31u8, 28u8, 93u8, 207u8, 212u8, 141u8,
                            74u8,
                        ],
                    )
                }
                /// The cumulative child-bounty curator fee for each parent bounty.
                pub fn children_curator_fees(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildrenCuratorFees",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            174u8, 128u8, 86u8, 179u8, 133u8, 76u8, 98u8, 169u8, 234u8, 166u8,
                            249u8, 214u8, 172u8, 171u8, 8u8, 161u8, 105u8, 69u8, 148u8, 151u8,
                            35u8, 174u8, 118u8, 139u8, 101u8, 56u8, 85u8, 211u8, 121u8, 168u8, 0u8,
                            216u8,
                        ],
                    )
                }
                /// The cumulative child-bounty curator fee for each parent bounty.
                pub fn children_curator_fees_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildrenCuratorFees",
                        Vec::new(),
                        [
                            174u8, 128u8, 86u8, 179u8, 133u8, 76u8, 98u8, 169u8, 234u8, 166u8,
                            249u8, 214u8, 172u8, 171u8, 8u8, 161u8, 105u8, 69u8, 148u8, 151u8,
                            35u8, 174u8, 118u8, 139u8, 101u8, 56u8, 85u8, 211u8, 121u8, 168u8, 0u8,
                            216u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// Maximum number of child bounties that can be added to a parent bounty.
                pub fn max_active_child_bounty_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ChildBounties",
                        "MaxActiveChildBountyCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Minimum value for a child-bounty.
                pub fn child_bounty_value_minimum(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ChildBounties",
                        "ChildBountyValueMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod tips {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReportAwesome {
                pub reason: ::std::vec::Vec<::core::primitive::u8>,
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RetractTip {
                pub hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TipNew {
                pub reason: ::std::vec::Vec<::core::primitive::u8>,
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub tip_value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Tip {
                pub hash: ::subxt::utils::H256,
                #[codec(compact)]
                pub tip_value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CloseTip {
                pub hash: ::subxt::utils::H256,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SlashTip {
                pub hash: ::subxt::utils::H256,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Report something `reason` that deserves a tip and claim any eventual the
                /// finder's fee.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///Payment: `TipReportDepositBase` will be reserved from the origin account, as
                /// well as `DataDepositPerByte` for each byte in `reason`.
                ///
                /// - `reason`: The reason for, or the thing that deserves, the tip; generally this
                ///   will be
                ///  a UTF-8-encoded URL.
                /// - `who`: The account which should be credited for the tip.
                ///
                ///Emits `NewTip` if successful.
                ///
                ///## Complexity
                /// - `O(R)` where `R` length of `reason`.
                ///  - encoding and hashing of 'reason'
                pub fn report_awesome(
                    &self,
                    reason: ::std::vec::Vec<::core::primitive::u8>,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<ReportAwesome> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "report_awesome",
                        ReportAwesome { reason, who },
                        [
                            126u8, 68u8, 2u8, 54u8, 195u8, 15u8, 43u8, 27u8, 183u8, 254u8, 157u8,
                            163u8, 252u8, 14u8, 207u8, 251u8, 215u8, 111u8, 98u8, 209u8, 150u8,
                            11u8, 240u8, 177u8, 106u8, 93u8, 191u8, 31u8, 62u8, 11u8, 223u8, 79u8,
                        ],
                    )
                }
                ///Retract a prior tip-report from `report_awesome`, and cancel the process of
                /// tipping.
                ///
                ///If successful, the original deposit will be unreserved.
                ///
                ///The dispatch origin for this call must be _Signed_ and the tip identified by
                /// `hash` must have been reported by the signing account through
                /// `report_awesome` (and not through `tip_new`).
                ///
                /// - `hash`: The identity of the open tip for which a tip value is declared. This
                ///   is formed
                ///  as the hash of the tuple of the original tip `reason` and the beneficiary
                /// account ID.
                ///
                ///Emits `TipRetracted` if successful.
                ///
                ///## Complexity
                /// - `O(1)`
                ///  - Depends on the length of `T::Hash` which is fixed.
                pub fn retract_tip(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<RetractTip> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "retract_tip",
                        RetractTip { hash },
                        [
                            137u8, 42u8, 229u8, 188u8, 157u8, 195u8, 184u8, 176u8, 64u8, 142u8,
                            67u8, 175u8, 185u8, 207u8, 214u8, 71u8, 165u8, 29u8, 137u8, 227u8,
                            132u8, 195u8, 255u8, 66u8, 186u8, 57u8, 34u8, 184u8, 187u8, 65u8,
                            129u8, 131u8,
                        ],
                    )
                }
                ///Give a tip for something new; no finder's fee will be taken.
                ///
                ///The dispatch origin for this call must be _Signed_ and the signing account must
                /// be a member of the `Tippers` set.
                ///
                /// - `reason`: The reason for, or the thing that deserves, the tip; generally this
                ///   will be
                ///  a UTF-8-encoded URL.
                /// - `who`: The account which should be credited for the tip.
                /// - `tip_value`: The amount of tip that the sender would like to give. The median
                ///   tip
                ///  value of active tippers will be given to the `who`.
                ///
                ///Emits `NewTip` if successful.
                ///
                ///## Complexity
                /// - `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.
                ///  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound
                ///    given by `ContainsLengthBound`. The actual cost depends on the implementation
                ///    of `T::Tippers`.
                ///  - `O(R)`: hashing and encoding of reason of length `R`
                pub fn tip_new(
                    &self,
                    reason: ::std::vec::Vec<::core::primitive::u8>,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    tip_value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<TipNew> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "tip_new",
                        TipNew { reason, who, tip_value },
                        [
                            217u8, 15u8, 70u8, 80u8, 193u8, 110u8, 212u8, 110u8, 212u8, 45u8,
                            197u8, 150u8, 43u8, 116u8, 115u8, 231u8, 148u8, 102u8, 202u8, 28u8,
                            55u8, 88u8, 166u8, 238u8, 11u8, 238u8, 229u8, 189u8, 89u8, 115u8,
                            196u8, 95u8,
                        ],
                    )
                }
                ///Declare a tip value for an already-open tip.
                ///
                ///The dispatch origin for this call must be _Signed_ and the signing account must
                /// be a member of the `Tippers` set.
                ///
                /// - `hash`: The identity of the open tip for which a tip value is declared. This
                ///   is formed
                ///  as the hash of the tuple of the hash of the original tip `reason` and the
                /// beneficiary  account ID.
                /// - `tip_value`: The amount of tip that the sender would like to give. The median
                ///   tip
                ///  value of active tippers will be given to the `who`.
                ///
                ///Emits `TipClosing` if the threshold of tippers has been reached and the
                /// countdown period has started.
                ///
                ///## Complexity
                /// - `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length
                ///   `T`, insert
                ///  tip and check closing, `T` is charged as upper bound given by
                /// `ContainsLengthBound`.  The actual cost depends on the
                /// implementation of `T::Tippers`.
                ///
                ///  Actually weight could be lower as it depends on how many tips are in `OpenTip`
                /// but it  is weighted as if almost full i.e of length `T-1`.
                pub fn tip(
                    &self,
                    hash: ::subxt::utils::H256,
                    tip_value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<Tip> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "tip",
                        Tip { hash, tip_value },
                        [
                            133u8, 52u8, 131u8, 14u8, 71u8, 232u8, 254u8, 31u8, 33u8, 206u8, 50u8,
                            76u8, 56u8, 167u8, 228u8, 202u8, 195u8, 0u8, 164u8, 107u8, 170u8, 98u8,
                            192u8, 37u8, 209u8, 199u8, 130u8, 15u8, 168u8, 63u8, 181u8, 134u8,
                        ],
                    )
                }
                ///Close and payout a tip.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///The tip identified by `hash` must have finished its countdown period.
                ///
                /// - `hash`: The identity of the open tip for which a tip value is declared. This
                ///   is formed
                ///  as the hash of the tuple of the original tip `reason` and the beneficiary
                /// account ID.
                ///
                ///## Complexity
                /// - : `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length
                ///   `T`. `T`
                ///  is charged as upper bound given by `ContainsLengthBound`. The actual cost
                /// depends on  the implementation of `T::Tippers`.
                pub fn close_tip(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<CloseTip> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "close_tip",
                        CloseTip { hash },
                        [
                            32u8, 53u8, 0u8, 222u8, 45u8, 157u8, 107u8, 174u8, 203u8, 50u8, 81u8,
                            230u8, 6u8, 111u8, 79u8, 55u8, 49u8, 151u8, 107u8, 114u8, 81u8, 200u8,
                            144u8, 175u8, 29u8, 142u8, 115u8, 184u8, 102u8, 116u8, 156u8, 173u8,
                        ],
                    )
                }
                ///Remove and slash an already-open tip.
                ///
                ///May only be called from `T::RejectOrigin`.
                ///
                ///As a result, the finder is slashed and the deposits are lost.
                ///
                ///Emits `TipSlashed` if successful.
                ///
                ///## Complexity
                /// - O(1).
                pub fn slash_tip(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<SlashTip> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "slash_tip",
                        SlashTip { hash },
                        [
                            222u8, 209u8, 22u8, 47u8, 114u8, 230u8, 81u8, 200u8, 131u8, 0u8, 209u8,
                            54u8, 17u8, 200u8, 175u8, 125u8, 100u8, 254u8, 41u8, 178u8, 20u8, 27u8,
                            9u8, 184u8, 79u8, 93u8, 208u8, 148u8, 27u8, 190u8, 176u8, 169u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_tips::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new tip suggestion has been opened.
            pub struct NewTip {
                pub tip_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for NewTip {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "NewTip";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A tip suggestion has reached threshold and is closing.
            pub struct TipClosing {
                pub tip_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for TipClosing {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "TipClosing";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A tip suggestion has been closed.
            pub struct TipClosed {
                pub tip_hash: ::subxt::utils::H256,
                pub who: ::subxt::utils::AccountId32,
                pub payout: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TipClosed {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "TipClosed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A tip suggestion has been retracted.
            pub struct TipRetracted {
                pub tip_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for TipRetracted {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "TipRetracted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A tip suggestion has been slashed.
            pub struct TipSlashed {
                pub tip_hash: ::subxt::utils::H256,
                pub finder: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TipSlashed {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "TipSlashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from
                /// the value. This has the insecure enumerable hash function since
                /// the key itself is already guaranteed to be a secure hash.
                pub fn tips(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_tips::OpenTip<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tips",
                        "Tips",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            241u8, 196u8, 105u8, 248u8, 29u8, 66u8, 86u8, 98u8, 6u8, 159u8, 191u8,
                            0u8, 227u8, 232u8, 147u8, 248u8, 173u8, 20u8, 225u8, 12u8, 232u8, 5u8,
                            93u8, 78u8, 18u8, 154u8, 130u8, 38u8, 142u8, 36u8, 66u8, 0u8,
                        ],
                    )
                }
                /// TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from
                /// the value. This has the insecure enumerable hash function since
                /// the key itself is already guaranteed to be a secure hash.
                pub fn tips_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_tips::OpenTip<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::subxt::utils::H256,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tips",
                        "Tips",
                        Vec::new(),
                        [
                            241u8, 196u8, 105u8, 248u8, 29u8, 66u8, 86u8, 98u8, 6u8, 159u8, 191u8,
                            0u8, 227u8, 232u8, 147u8, 248u8, 173u8, 20u8, 225u8, 12u8, 232u8, 5u8,
                            93u8, 78u8, 18u8, 154u8, 130u8, 38u8, 142u8, 36u8, 66u8, 0u8,
                        ],
                    )
                }
                /// Simple preimage lookup from the reason's hash to the original data. Again, has
                /// an insecure enumerable hash since the key is guaranteed to be
                /// the result of a secure hash.
                pub fn reasons(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tips",
                        "Reasons",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            202u8, 191u8, 36u8, 162u8, 156u8, 102u8, 115u8, 10u8, 203u8, 35u8,
                            201u8, 70u8, 195u8, 151u8, 89u8, 82u8, 202u8, 35u8, 210u8, 176u8, 82u8,
                            1u8, 77u8, 94u8, 31u8, 70u8, 252u8, 194u8, 166u8, 91u8, 189u8, 134u8,
                        ],
                    )
                }
                /// Simple preimage lookup from the reason's hash to the original data. Again, has
                /// an insecure enumerable hash since the key is guaranteed to be
                /// the result of a secure hash.
                pub fn reasons_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tips",
                        "Reasons",
                        Vec::new(),
                        [
                            202u8, 191u8, 36u8, 162u8, 156u8, 102u8, 115u8, 10u8, 203u8, 35u8,
                            201u8, 70u8, 195u8, 151u8, 89u8, 82u8, 202u8, 35u8, 210u8, 176u8, 82u8,
                            1u8, 77u8, 94u8, 31u8, 70u8, 252u8, 194u8, 166u8, 91u8, 189u8, 134u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// Maximum acceptable reason length.
                ///
                /// Benchmarks depend on this value, be sure to update weights file when changing
                /// this value
                pub fn maximum_reason_length(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "MaximumReasonLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The amount held on deposit per byte within the tip report reason or bounty
                /// description.
                pub fn data_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "DataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The period for which a tip remains open after is has achieved threshold tippers.
                pub fn tip_countdown(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "TipCountdown",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The percent of the final tip which goes to the original reporter of the tip.
                pub fn tip_finders_fee(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Percent>
                {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "TipFindersFee",
                        [
                            99u8, 121u8, 176u8, 172u8, 235u8, 159u8, 116u8, 114u8, 179u8, 91u8,
                            129u8, 117u8, 204u8, 135u8, 53u8, 7u8, 151u8, 26u8, 124u8, 151u8,
                            202u8, 171u8, 171u8, 207u8, 183u8, 177u8, 24u8, 53u8, 109u8, 185u8,
                            71u8, 183u8,
                        ],
                    )
                }
                /// The amount held on deposit for placing a tip report.
                pub fn tip_report_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "TipReportDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod nis {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PlaceBid {
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub duration: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RetractBid {
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
                pub duration: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FundDeficit;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ThawPrivate {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
                pub maybe_proportion:
                    ::core::option::Option<runtime_types::sp_arithmetic::per_things::Perquintill>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ThawCommunal {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Communify {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Privatize {
                #[codec(compact)]
                pub index: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Place a bid.
                ///
                ///Origin must be Signed, and account must have at least `amount` in free balance.
                ///
                /// - `amount`: The amount of the bid; these funds will be reserved, and if/when
                ///  consolidated, removed. Must be at least `MinBid`.
                /// - `duration`: The number of periods before which the newly consolidated bid may
                ///   be
                ///  thawed. Must be greater than 1 and no more than `QueueCount`.
                ///
                ///Complexities:
                /// - `Queues[duration].len()` (just take max).
                pub fn place_bid(
                    &self,
                    amount: ::core::primitive::u128,
                    duration: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<PlaceBid> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "place_bid",
                        PlaceBid { amount, duration },
                        [
                            197u8, 16u8, 24u8, 59u8, 72u8, 162u8, 72u8, 124u8, 149u8, 28u8, 208u8,
                            47u8, 208u8, 0u8, 110u8, 122u8, 32u8, 225u8, 29u8, 21u8, 144u8, 75u8,
                            138u8, 188u8, 213u8, 188u8, 34u8, 231u8, 52u8, 191u8, 210u8, 158u8,
                        ],
                    )
                }
                ///Retract a previously placed bid.
                ///
                ///Origin must be Signed, and the account should have previously issued a
                /// still-active bid of `amount` for `duration`.
                ///
                /// - `amount`: The amount of the previous bid.
                /// - `duration`: The duration of the previous bid.
                pub fn retract_bid(
                    &self,
                    amount: ::core::primitive::u128,
                    duration: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<RetractBid> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "retract_bid",
                        RetractBid { amount, duration },
                        [
                            139u8, 141u8, 178u8, 24u8, 250u8, 206u8, 70u8, 51u8, 249u8, 82u8,
                            172u8, 68u8, 157u8, 50u8, 110u8, 233u8, 163u8, 46u8, 204u8, 54u8,
                            154u8, 20u8, 18u8, 205u8, 137u8, 95u8, 187u8, 74u8, 250u8, 161u8,
                            220u8, 22u8,
                        ],
                    )
                }
                ///Ensure we have sufficient funding for all potential payouts.
                ///
                /// - `origin`: Must be accepted by `FundOrigin`.
                pub fn fund_deficit(&self) -> ::subxt::tx::Payload<FundDeficit> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "fund_deficit",
                        FundDeficit {},
                        [
                            70u8, 45u8, 215u8, 5u8, 225u8, 2u8, 127u8, 191u8, 36u8, 210u8, 1u8,
                            35u8, 22u8, 17u8, 187u8, 237u8, 241u8, 245u8, 168u8, 204u8, 112u8,
                            25u8, 55u8, 124u8, 12u8, 26u8, 149u8, 7u8, 26u8, 248u8, 190u8, 125u8,
                        ],
                    )
                }
                ///Reduce or remove an outstanding receipt, placing the according proportion of
                /// funds into the account of the owner.
                ///
                /// - `origin`: Must be Signed and the account must be the owner of the receipt
                ///   `index` as
                ///  well as any fungible counterpart.
                /// - `index`: The index of the receipt.
                /// - `portion`: If `Some`, then only the given portion of the receipt should be
                ///   thawed. If
                ///  `None`, then all of it should be.
                pub fn thaw_private(
                    &self,
                    index: ::core::primitive::u32,
                    maybe_proportion: ::core::option::Option<
                        runtime_types::sp_arithmetic::per_things::Perquintill,
                    >,
                ) -> ::subxt::tx::Payload<ThawPrivate> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "thaw_private",
                        ThawPrivate { index, maybe_proportion },
                        [
                            18u8, 152u8, 64u8, 60u8, 106u8, 168u8, 52u8, 210u8, 254u8, 246u8,
                            221u8, 41u8, 216u8, 11u8, 38u8, 22u8, 163u8, 199u8, 94u8, 181u8, 171u8,
                            99u8, 113u8, 27u8, 73u8, 187u8, 255u8, 106u8, 241u8, 83u8, 102u8,
                            253u8,
                        ],
                    )
                }
                ///Reduce or remove an outstanding receipt, placing the according proportion of
                /// funds into the account of the owner.
                ///
                /// - `origin`: Must be Signed and the account must be the owner of the fungible
                ///   counterpart
                ///  for receipt `index`.
                /// - `index`: The index of the receipt.
                pub fn thaw_communal(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ThawCommunal> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "thaw_communal",
                        ThawCommunal { index },
                        [
                            125u8, 60u8, 128u8, 54u8, 205u8, 231u8, 236u8, 247u8, 232u8, 152u8,
                            121u8, 17u8, 87u8, 97u8, 235u8, 115u8, 111u8, 156u8, 181u8, 98u8,
                            240u8, 232u8, 54u8, 130u8, 58u8, 170u8, 118u8, 16u8, 33u8, 65u8, 23u8,
                            36u8,
                        ],
                    )
                }
                ///Make a private receipt communal and create fungible counterparts for its owner.
                pub fn communify(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Communify> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "communify",
                        Communify { index },
                        [
                            88u8, 164u8, 59u8, 88u8, 62u8, 109u8, 248u8, 93u8, 253u8, 219u8, 115u8,
                            13u8, 135u8, 248u8, 134u8, 154u8, 160u8, 50u8, 233u8, 34u8, 50u8,
                            186u8, 70u8, 81u8, 125u8, 222u8, 162u8, 150u8, 113u8, 203u8, 91u8,
                            50u8,
                        ],
                    )
                }
                ///Make a communal receipt private and burn fungible counterparts from its owner.
                pub fn privatize(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<Privatize> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "privatize",
                        Privatize { index },
                        [
                            145u8, 182u8, 44u8, 183u8, 91u8, 5u8, 217u8, 200u8, 111u8, 211u8,
                            139u8, 10u8, 143u8, 255u8, 10u8, 57u8, 145u8, 64u8, 18u8, 190u8, 199u8,
                            164u8, 177u8, 131u8, 7u8, 30u8, 13u8, 181u8, 59u8, 174u8, 88u8, 36u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_nis::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bid was successfully placed.
            pub struct BidPlaced {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub duration: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BidPlaced {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "BidPlaced";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bid was successfully removed (before being accepted).
            pub struct BidRetracted {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub duration: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BidRetracted {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "BidRetracted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bid was dropped from a queue because of another, more substantial, bid was
            /// present.
            pub struct BidDropped {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub duration: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BidDropped {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "BidDropped";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A bid was accepted. The balance may not be released until expiry.
            pub struct Issued {
                pub index: ::core::primitive::u32,
                pub expiry: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An receipt has been (at least partially) thawed.
            pub struct Thawed {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                pub amount: ::core::primitive::u128,
                pub dropped: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An automatic funding of the deficit was made.
            pub struct Funded {
                pub deficit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Funded {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "Funded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A receipt was transfered.
            pub struct Transferred {
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "Transferred";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The totals of items and balances within each queue. Saves a lot of storage reads
                /// in the case of sparsely packed queues.
                ///
                /// The vector is indexed by duration in `Period`s, offset by one, so information on
                /// the queue whose duration is one `Period` would be storage `0`.
                pub fn queue_totals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "QueueTotals",
                        vec![],
                        [
                            230u8, 24u8, 0u8, 151u8, 63u8, 26u8, 180u8, 81u8, 179u8, 26u8, 176u8,
                            46u8, 2u8, 91u8, 250u8, 210u8, 212u8, 27u8, 47u8, 228u8, 2u8, 51u8,
                            64u8, 7u8, 218u8, 130u8, 210u8, 7u8, 92u8, 102u8, 184u8, 227u8,
                        ],
                    )
                }
                /// The queues of bids. Indexed by duration (in `Period`s).
                pub fn queues(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_nis::pallet::Bid<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Queues",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            11u8, 50u8, 58u8, 232u8, 240u8, 243u8, 90u8, 103u8, 252u8, 238u8, 15u8,
                            75u8, 189u8, 241u8, 231u8, 50u8, 194u8, 134u8, 162u8, 220u8, 97u8,
                            217u8, 215u8, 135u8, 138u8, 189u8, 167u8, 15u8, 162u8, 247u8, 6u8,
                            74u8,
                        ],
                    )
                }
                /// The queues of bids. Indexed by duration (in `Period`s).
                pub fn queues_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_nis::pallet::Bid<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Queues",
                        Vec::new(),
                        [
                            11u8, 50u8, 58u8, 232u8, 240u8, 243u8, 90u8, 103u8, 252u8, 238u8, 15u8,
                            75u8, 189u8, 241u8, 231u8, 50u8, 194u8, 134u8, 162u8, 220u8, 97u8,
                            217u8, 215u8, 135u8, 138u8, 189u8, 167u8, 15u8, 162u8, 247u8, 6u8,
                            74u8,
                        ],
                    )
                }
                /// Summary information over the general state.
                pub fn summary(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nis::pallet::SummaryRecord<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Summary",
                        vec![],
                        [
                            34u8, 27u8, 67u8, 146u8, 199u8, 150u8, 63u8, 31u8, 117u8, 228u8, 20u8,
                            73u8, 110u8, 73u8, 49u8, 128u8, 154u8, 222u8, 20u8, 44u8, 240u8, 154u8,
                            199u8, 73u8, 87u8, 160u8, 165u8, 14u8, 53u8, 173u8, 90u8, 197u8,
                        ],
                    )
                }
                /// The currently outstanding receipts, indexed according to the order of creation.
                pub fn receipts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nis::pallet::ReceiptRecord<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Receipts",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            133u8, 81u8, 13u8, 58u8, 124u8, 55u8, 176u8, 92u8, 245u8, 46u8, 131u8,
                            139u8, 226u8, 81u8, 201u8, 103u8, 79u8, 8u8, 166u8, 161u8, 42u8, 226u8,
                            247u8, 125u8, 226u8, 219u8, 82u8, 43u8, 165u8, 19u8, 56u8, 172u8,
                        ],
                    )
                }
                /// The currently outstanding receipts, indexed according to the order of creation.
                pub fn receipts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nis::pallet::ReceiptRecord<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Receipts",
                        Vec::new(),
                        [
                            133u8, 81u8, 13u8, 58u8, 124u8, 55u8, 176u8, 92u8, 245u8, 46u8, 131u8,
                            139u8, 226u8, 81u8, 201u8, 103u8, 79u8, 8u8, 166u8, 161u8, 42u8, 226u8,
                            247u8, 125u8, 226u8, 219u8, 82u8, 43u8, 165u8, 19u8, 56u8, 172u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The treasury's pallet id, used for deriving its sovereign account ID.
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                /// Number of duration queues in total. This sets the maximum duration supported,
                /// which is this value multiplied by `Period`.
                pub fn queue_count(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "QueueCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Maximum number of items that may be in each duration queue.
                ///
                /// Must be larger than zero.
                pub fn max_queue_len(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "MaxQueueLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// Portion of the queue which is free from ordering and just a FIFO.
                ///
                /// Must be no greater than `MaxQueueLen`.
                pub fn fifo_queue_len(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "FifoQueueLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The base period for the duration queues. This is the common multiple across all
                /// supported freezing durations that can be bid upon.
                pub fn base_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "BasePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The minimum amount of funds that may be placed in a bid. Note that this
                /// does not actually limit the amount which may be represented in a receipt since
                /// bids may be split up by the system.
                ///
                /// It should be at least big enough to ensure that there is no possible storage
                /// spam attack or queue-filling attack.
                pub fn min_bid(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "MinBid",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The minimum amount of funds which may intentionally be left remaining under a
                /// single receipt.
                pub fn min_receipt(
                    &self,
                ) -> ::subxt::constants::Address<
                    runtime_types::sp_arithmetic::per_things::Perquintill,
                > {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "MinReceipt",
                        [
                            6u8, 4u8, 24u8, 100u8, 110u8, 86u8, 4u8, 252u8, 70u8, 43u8, 169u8,
                            124u8, 204u8, 27u8, 252u8, 91u8, 99u8, 13u8, 149u8, 202u8, 65u8, 211u8,
                            125u8, 108u8, 127u8, 4u8, 146u8, 163u8, 41u8, 193u8, 25u8, 103u8,
                        ],
                    )
                }
                /// The number of blocks between consecutive attempts to dequeue bids and create
                /// receipts.
                ///
                /// A larger value results in fewer storage hits each block, but a slower period to
                /// get to the target.
                pub fn intake_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "IntakePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum amount of bids that can consolidated into receipts in a single
                /// intake. A larger value here means less of the block available
                /// for transactions should there be a glut of bids.
                pub fn max_intake_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "MaxIntakeWeight",
                        [
                            206u8, 61u8, 253u8, 247u8, 163u8, 40u8, 161u8, 52u8, 134u8, 140u8,
                            206u8, 83u8, 44u8, 166u8, 226u8, 115u8, 181u8, 14u8, 227u8, 130u8,
                            210u8, 32u8, 85u8, 29u8, 230u8, 97u8, 130u8, 165u8, 147u8, 134u8,
                            106u8, 76u8,
                        ],
                    )
                }
                /// The maximum proportion which may be thawed and the period over which it is
                /// reset.
                pub fn thaw_throttle(
                    &self,
                ) -> ::subxt::constants::Address<(
                    runtime_types::sp_arithmetic::per_things::Perquintill,
                    ::core::primitive::u32,
                )> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "ThawThrottle",
                        [
                            186u8, 73u8, 125u8, 166u8, 127u8, 250u8, 1u8, 100u8, 253u8, 174u8,
                            176u8, 185u8, 210u8, 229u8, 218u8, 53u8, 27u8, 72u8, 79u8, 130u8, 87u8,
                            138u8, 50u8, 139u8, 205u8, 79u8, 190u8, 58u8, 140u8, 68u8, 70u8, 16u8,
                        ],
                    )
                }
                /// The name for the reserve ID.
                pub fn reserve_id(
                    &self,
                ) -> ::subxt::constants::Address<[::core::primitive::u8; 8usize]> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "ReserveId",
                        [
                            224u8, 197u8, 247u8, 125u8, 62u8, 180u8, 69u8, 91u8, 226u8, 36u8, 82u8,
                            148u8, 70u8, 147u8, 209u8, 40u8, 210u8, 229u8, 181u8, 191u8, 170u8,
                            205u8, 138u8, 97u8, 127u8, 59u8, 124u8, 244u8, 252u8, 30u8, 213u8,
                            179u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod nis_counterpart_balances {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Transfer {
                pub dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetBalance {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub new_free: ::core::primitive::u128,
                #[codec(compact)]
                pub new_reserved: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceTransfer {
                pub source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransferKeepAlive {
                pub dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransferAll {
                pub dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub keep_alive: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceUnreserve {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub amount: ::core::primitive::u128,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Transfer some liquid free balance to another account.
                ///
                ///`transfer` will set the `FreeBalance` of the sender and receiver.
                ///If the sender's account is below the existential deposit as a result
                ///of the transfer, the account will be reaped.
                ///
                ///The dispatch origin for this call must be `Signed` by the transactor.
                ///
                ///## Complexity
                /// - Dependent on arguments but not critical, given proper implementations for
                ///   input config
                ///  types. See related functions below.
                /// - It contains a limited number of reads and writes internally and no complex
                ///  computation.
                ///
                ///Related functions:
                ///
                ///  - `ensure_can_withdraw` is always called internally but has a bounded
                ///    complexity.
                ///  - Transferring balances to accounts that did not exist before will cause
                ///    `T::OnNewAccount::on_new_account` to be called.
                ///  - Removing enough funds from an account will trigger
                ///    `T::DustRemoval::on_unbalanced`.
                ///  - `transfer_keep_alive` works the same way as `transfer`, but has an additional
                ///    check that the transfer will not kill the origin account.
                pub fn transfer(
                    &self,
                    dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "NisCounterpartBalances",
                        "transfer",
                        Transfer { dest, value },
                        [
                            111u8, 222u8, 32u8, 56u8, 171u8, 77u8, 252u8, 29u8, 194u8, 155u8,
                            200u8, 192u8, 198u8, 81u8, 23u8, 115u8, 236u8, 91u8, 218u8, 114u8,
                            107u8, 141u8, 138u8, 100u8, 237u8, 21u8, 58u8, 172u8, 3u8, 20u8, 216u8,
                            38u8,
                        ],
                    )
                }
                ///Set the balances of a given account.
                ///
                ///This will alter `FreeBalance` and `ReservedBalance` in storage. it will
                ///also alter the total issuance of the system (`TotalIssuance`) appropriately.
                ///If the new free or reserved balance is below the existential deposit,
                ///it will reset the account nonce (`frame_system::AccountNonce`).
                ///
                ///The dispatch origin for this call is `root`.
                pub fn set_balance(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    new_free: ::core::primitive::u128,
                    new_reserved: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<SetBalance> {
                    ::subxt::tx::Payload::new_static(
                        "NisCounterpartBalances",
                        "set_balance",
                        SetBalance { who, new_free, new_reserved },
                        [
                            234u8, 215u8, 97u8, 98u8, 243u8, 199u8, 57u8, 76u8, 59u8, 161u8, 118u8,
                            207u8, 34u8, 197u8, 198u8, 61u8, 231u8, 210u8, 169u8, 235u8, 150u8,
                            137u8, 173u8, 49u8, 28u8, 77u8, 84u8, 149u8, 143u8, 210u8, 139u8,
                            193u8,
                        ],
                    )
                }
                ///Exactly as `transfer`, except the origin must be root and the source account may
                /// be specified.
                ///## Complexity
                /// - Same as transfer, but additional read and write because the source account is
                ///   not
                ///  assumed to be in the overlay.
                pub fn force_transfer(
                    &self,
                    source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "NisCounterpartBalances",
                        "force_transfer",
                        ForceTransfer { source, dest, value },
                        [
                            79u8, 174u8, 212u8, 108u8, 184u8, 33u8, 170u8, 29u8, 232u8, 254u8,
                            195u8, 218u8, 221u8, 134u8, 57u8, 99u8, 6u8, 70u8, 181u8, 227u8, 56u8,
                            239u8, 243u8, 158u8, 157u8, 245u8, 36u8, 162u8, 11u8, 237u8, 147u8,
                            15u8,
                        ],
                    )
                }
                ///Same as the [`transfer`] call, but with a check that the transfer will not kill
                /// the origin account.
                ///
                ///99% of the time you want [`transfer`] instead.
                ///
                ///[`transfer`]: struct.Pallet.html#method.transfer
                pub fn transfer_keep_alive(
                    &self,
                    dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "NisCounterpartBalances",
                        "transfer_keep_alive",
                        TransferKeepAlive { dest, value },
                        [
                            112u8, 179u8, 75u8, 168u8, 193u8, 221u8, 9u8, 82u8, 190u8, 113u8,
                            253u8, 13u8, 130u8, 134u8, 170u8, 216u8, 136u8, 111u8, 242u8, 220u8,
                            202u8, 112u8, 47u8, 79u8, 73u8, 244u8, 226u8, 59u8, 240u8, 188u8,
                            210u8, 208u8,
                        ],
                    )
                }
                ///Transfer the entire transferable balance from the caller account.
                ///
                ///NOTE: This function only attempts to transfer _transferable_ balances. This
                /// means that any locked, reserved, or existential deposits (when
                /// `keep_alive` is `true`), will not be transferred by this
                /// function. To ensure that this function results in a killed account,
                /// you might need to prepare the account by removing any reference counters,
                /// storage deposits, etc...
                ///
                ///The dispatch origin of this call must be Signed.
                ///
                /// - `dest`: The recipient of the transfer.
                /// - `keep_alive`: A boolean to determine if the `transfer_all` operation should
                ///   send all
                ///  of the funds the account has, causing the sender account to be killed (false),
                /// or  transfer everything except at least the existential deposit,
                /// which will guarantee to  keep the sender account alive (true).
                /// ## Complexity
                /// - O(1). Just like transfer, but reading the user's transferable balance first.
                pub fn transfer_all(
                    &self,
                    dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    keep_alive: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<TransferAll> {
                    ::subxt::tx::Payload::new_static(
                        "NisCounterpartBalances",
                        "transfer_all",
                        TransferAll { dest, keep_alive },
                        [
                            46u8, 129u8, 29u8, 177u8, 221u8, 107u8, 245u8, 69u8, 238u8, 126u8,
                            145u8, 26u8, 219u8, 208u8, 14u8, 80u8, 149u8, 1u8, 214u8, 63u8, 67u8,
                            201u8, 144u8, 45u8, 129u8, 145u8, 174u8, 71u8, 238u8, 113u8, 208u8,
                            34u8,
                        ],
                    )
                }
                ///Unreserve some balance from a user by force.
                ///
                ///Can only be called by ROOT.
                pub fn force_unreserve(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<ForceUnreserve> {
                    ::subxt::tx::Payload::new_static(
                        "NisCounterpartBalances",
                        "force_unreserve",
                        ForceUnreserve { who, amount },
                        [
                            160u8, 146u8, 137u8, 76u8, 157u8, 187u8, 66u8, 148u8, 207u8, 76u8,
                            32u8, 254u8, 82u8, 215u8, 35u8, 161u8, 213u8, 52u8, 32u8, 98u8, 102u8,
                            106u8, 234u8, 123u8, 6u8, 175u8, 184u8, 188u8, 174u8, 106u8, 176u8,
                            78u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An account was created with some free balance.
            pub struct Endowed {
                pub account: ::subxt::utils::AccountId32,
                pub free_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An account was removed whose balance was non-zero but below ExistentialDeposit,
            ///resulting in an outright loss.
            pub struct DustLost {
                pub account: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Transfer succeeded.
            pub struct Transfer {
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A balance was set by root.
            pub struct BalanceSet {
                pub who: ::subxt::utils::AccountId32,
                pub free: ::core::primitive::u128,
                pub reserved: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some balance was reserved (moved from free to reserved).
            pub struct Reserved {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some balance was unreserved (moved from reserved to free).
            pub struct Unreserved {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some balance was moved from the reserve of the first account to the second account.
            ///Final argument indicates the destination balance type.
            pub struct ReserveRepatriated {
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub destination_status:
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
            }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some amount was deposited (e.g. for transaction fees).
            pub struct Deposit {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some amount was withdrawn from the account (e.g. for transaction fees).
            pub struct Withdraw {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some amount was removed from the account (e.g. for misbehavior).
            pub struct Slashed {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "NisCounterpartBalances";
                const EVENT: &'static str = "Slashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The total units issued in the system.
                pub fn total_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NisCounterpartBalances",
                        "TotalIssuance",
                        vec![],
                        [
                            1u8, 206u8, 252u8, 237u8, 6u8, 30u8, 20u8, 232u8, 164u8, 115u8, 51u8,
                            156u8, 156u8, 206u8, 241u8, 187u8, 44u8, 84u8, 25u8, 164u8, 235u8,
                            20u8, 86u8, 242u8, 124u8, 23u8, 28u8, 140u8, 26u8, 73u8, 231u8, 51u8,
                        ],
                    )
                }
                /// The total units of outstanding deactivated balance in the system.
                pub fn inactive_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NisCounterpartBalances",
                        "InactiveIssuance",
                        vec![],
                        [
                            74u8, 203u8, 111u8, 142u8, 225u8, 104u8, 173u8, 51u8, 226u8, 12u8,
                            85u8, 135u8, 41u8, 206u8, 177u8, 238u8, 94u8, 246u8, 184u8, 250u8,
                            140u8, 213u8, 91u8, 118u8, 163u8, 111u8, 211u8, 46u8, 204u8, 160u8,
                            154u8, 21u8,
                        ],
                    )
                }
                /// The Balances pallet example of storing the balance of an account.
                ///
                /// # Example
                ///
                /// ```nocompile
                ///  impl pallet_balances::Config for Runtime {
                ///    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
                ///  }
                /// ```
                ///
                /// You can also store the balance of an account in the `System` pallet.
                ///
                /// # Example
                ///
                /// ```nocompile
                ///  impl pallet_balances::Config for Runtime {
                ///   type AccountStore = System
                ///  }
                /// ```
                ///
                /// But this comes with tradeoffs, storing account balances in the system pallet
                /// stores `frame_system` data alongside the account data contrary
                /// to storing account balances in the `Balances` pallet, which uses
                /// a `StorageMap` to store balances data only. NOTE: This is only
                /// used in the case that this pallet is used to store balances.
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NisCounterpartBalances",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
                            40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
                            217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
                        ],
                    )
                }
                /// The Balances pallet example of storing the balance of an account.
                ///
                /// # Example
                ///
                /// ```nocompile
                ///  impl pallet_balances::Config for Runtime {
                ///    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
                ///  }
                /// ```
                ///
                /// You can also store the balance of an account in the `System` pallet.
                ///
                /// # Example
                ///
                /// ```nocompile
                ///  impl pallet_balances::Config for Runtime {
                ///   type AccountStore = System
                ///  }
                /// ```
                ///
                /// But this comes with tradeoffs, storing account balances in the system pallet
                /// stores `frame_system` data alongside the account data contrary
                /// to storing account balances in the `Balances` pallet, which uses
                /// a `StorageMap` to store balances data only. NOTE: This is only
                /// used in the case that this pallet is used to store balances.
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NisCounterpartBalances",
                        "Account",
                        Vec::new(),
                        [
                            246u8, 154u8, 253u8, 71u8, 192u8, 192u8, 192u8, 236u8, 128u8, 80u8,
                            40u8, 252u8, 201u8, 43u8, 3u8, 131u8, 19u8, 49u8, 141u8, 240u8, 172u8,
                            217u8, 215u8, 109u8, 87u8, 135u8, 248u8, 57u8, 98u8, 185u8, 22u8, 4u8,
                        ],
                    )
                }
                /// Any liquidity locks on some account balances.
                /// NOTE: Should only be accessed when setting, changing and freeing a lock.
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NisCounterpartBalances",
                        "Locks",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
                            58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
                            136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
                        ],
                    )
                }
                /// Any liquidity locks on some account balances.
                /// NOTE: Should only be accessed when setting, changing and freeing a lock.
                pub fn locks_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NisCounterpartBalances",
                        "Locks",
                        Vec::new(),
                        [
                            216u8, 253u8, 87u8, 73u8, 24u8, 218u8, 35u8, 0u8, 244u8, 134u8, 195u8,
                            58u8, 255u8, 64u8, 153u8, 212u8, 210u8, 232u8, 4u8, 122u8, 90u8, 212u8,
                            136u8, 14u8, 127u8, 232u8, 8u8, 192u8, 40u8, 233u8, 18u8, 250u8,
                        ],
                    )
                }
                /// Named reserves on some account balances.
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NisCounterpartBalances",
                        "Reserves",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
                            167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
                            183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
                        ],
                    )
                }
                /// Named reserves on some account balances.
                pub fn reserves_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NisCounterpartBalances",
                        "Reserves",
                        Vec::new(),
                        [
                            17u8, 32u8, 191u8, 46u8, 76u8, 220u8, 101u8, 100u8, 42u8, 250u8, 128u8,
                            167u8, 117u8, 44u8, 85u8, 96u8, 105u8, 216u8, 16u8, 147u8, 74u8, 55u8,
                            183u8, 94u8, 160u8, 177u8, 26u8, 187u8, 71u8, 197u8, 187u8, 163u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The minimum amount required to keep an account open.
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "NisCounterpartBalances",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The maximum number of locks that should exist on an account.
                /// Not strictly enforced, but used for weight estimation.
                pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "NisCounterpartBalances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of named reserves that can exist on an account.
                pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "NisCounterpartBalances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachains_origin {
        use super::{root_mod, runtime_types};
    }
    pub mod configuration {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetValidationUpgradeCooldown {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetValidationUpgradeDelay {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetCodeRetentionPeriod {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxCodeSize {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxPovSize {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxHeadDataSize {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetParathreadCores {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetParathreadRetries {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetGroupRotationFrequency {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetChainAvailabilityPeriod {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetThreadAvailabilityPeriod {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetSchedulingLookahead {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxValidatorsPerCore {
                pub new: ::core::option::Option<::core::primitive::u32>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxValidators {
                pub new: ::core::option::Option<::core::primitive::u32>,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetDisputePeriod {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetDisputePostConclusionAcceptancePeriod {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetDisputeConclusionByTimeOutPeriod {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetNoShowSlots {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetNDelayTranches {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetZerothDelayTrancheWidth {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetNeededApprovals {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetRelayVrfModuloSamples {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxUpwardQueueCount {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxUpwardQueueSize {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxDownwardMessageSize {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetUmpServiceTotalWeight {
                pub new: runtime_types::sp_weights::weight_v2::Weight,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxUpwardMessageSize {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMaxUpwardMessageNumPerCandidate {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpOpenRequestTtl {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpSenderDeposit {
                pub new: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpRecipientDeposit {
                pub new: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpChannelMaxCapacity {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpChannelMaxTotalSize {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpMaxParachainInboundChannels {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpMaxParathreadInboundChannels {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpChannelMaxMessageSize {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpMaxParachainOutboundChannels {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpMaxParathreadOutboundChannels {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetHrmpMaxMessageNumPerCandidate {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetUmpMaxIndividualWeight {
                pub new: runtime_types::sp_weights::weight_v2::Weight,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetPvfCheckingEnabled {
                pub new: ::core::primitive::bool,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetPvfVotingTtl {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetMinimumValidationUpgradeDelay {
                pub new: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetBypassConsistencyCheck {
                pub new: ::core::primitive::bool,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Set the validation upgrade cooldown.
                pub fn set_validation_upgrade_cooldown(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetValidationUpgradeCooldown> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_validation_upgrade_cooldown",
                        SetValidationUpgradeCooldown { new },
                        [
                            109u8, 185u8, 0u8, 59u8, 177u8, 198u8, 76u8, 90u8, 108u8, 190u8, 56u8,
                            126u8, 147u8, 110u8, 76u8, 111u8, 38u8, 200u8, 230u8, 144u8, 42u8,
                            167u8, 175u8, 220u8, 102u8, 37u8, 60u8, 10u8, 118u8, 79u8, 146u8,
                            203u8,
                        ],
                    )
                }
                ///Set the validation upgrade delay.
                pub fn set_validation_upgrade_delay(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetValidationUpgradeDelay> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_validation_upgrade_delay",
                        SetValidationUpgradeDelay { new },
                        [
                            18u8, 130u8, 158u8, 253u8, 160u8, 194u8, 220u8, 120u8, 9u8, 68u8,
                            232u8, 176u8, 34u8, 81u8, 200u8, 236u8, 141u8, 139u8, 62u8, 110u8,
                            76u8, 9u8, 218u8, 69u8, 55u8, 2u8, 233u8, 109u8, 83u8, 117u8, 141u8,
                            253u8,
                        ],
                    )
                }
                ///Set the acceptance period for an included candidate.
                pub fn set_code_retention_period(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetCodeRetentionPeriod> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_code_retention_period",
                        SetCodeRetentionPeriod { new },
                        [
                            221u8, 140u8, 253u8, 111u8, 64u8, 236u8, 93u8, 52u8, 214u8, 245u8,
                            178u8, 30u8, 77u8, 166u8, 242u8, 252u8, 203u8, 106u8, 12u8, 195u8,
                            27u8, 159u8, 96u8, 197u8, 145u8, 69u8, 241u8, 59u8, 74u8, 220u8, 62u8,
                            205u8,
                        ],
                    )
                }
                ///Set the max validation code size for incoming upgrades.
                pub fn set_max_code_size(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMaxCodeSize> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_code_size",
                        SetMaxCodeSize { new },
                        [
                            232u8, 106u8, 45u8, 195u8, 27u8, 162u8, 188u8, 213u8, 137u8, 13u8,
                            123u8, 89u8, 215u8, 141u8, 231u8, 82u8, 205u8, 215u8, 73u8, 142u8,
                            115u8, 109u8, 132u8, 118u8, 194u8, 211u8, 82u8, 20u8, 75u8, 55u8,
                            218u8, 46u8,
                        ],
                    )
                }
                ///Set the max POV block size for incoming upgrades.
                pub fn set_max_pov_size(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMaxPovSize> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_pov_size",
                        SetMaxPovSize { new },
                        [
                            15u8, 176u8, 13u8, 19u8, 177u8, 160u8, 211u8, 238u8, 29u8, 194u8,
                            187u8, 235u8, 244u8, 65u8, 158u8, 47u8, 102u8, 221u8, 95u8, 10u8, 21u8,
                            33u8, 219u8, 234u8, 82u8, 122u8, 75u8, 53u8, 14u8, 126u8, 218u8, 23u8,
                        ],
                    )
                }
                ///Set the max head data size for paras.
                pub fn set_max_head_data_size(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMaxHeadDataSize> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_head_data_size",
                        SetMaxHeadDataSize { new },
                        [
                            219u8, 128u8, 213u8, 65u8, 190u8, 224u8, 87u8, 80u8, 172u8, 112u8,
                            160u8, 229u8, 52u8, 1u8, 189u8, 125u8, 177u8, 139u8, 103u8, 39u8, 21u8,
                            125u8, 62u8, 177u8, 74u8, 25u8, 41u8, 11u8, 200u8, 79u8, 139u8, 171u8,
                        ],
                    )
                }
                ///Set the number of parathread execution cores.
                pub fn set_parathread_cores(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetParathreadCores> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_parathread_cores",
                        SetParathreadCores { new },
                        [
                            155u8, 102u8, 168u8, 202u8, 236u8, 87u8, 16u8, 128u8, 141u8, 99u8,
                            154u8, 162u8, 216u8, 198u8, 236u8, 233u8, 104u8, 230u8, 137u8, 132u8,
                            41u8, 106u8, 167u8, 81u8, 195u8, 172u8, 107u8, 28u8, 138u8, 254u8,
                            180u8, 61u8,
                        ],
                    )
                }
                ///Set the number of retries for a particular parathread.
                pub fn set_parathread_retries(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetParathreadRetries> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_parathread_retries",
                        SetParathreadRetries { new },
                        [
                            192u8, 81u8, 152u8, 41u8, 40u8, 3u8, 251u8, 205u8, 244u8, 133u8, 42u8,
                            197u8, 21u8, 221u8, 80u8, 196u8, 222u8, 69u8, 153u8, 39u8, 161u8, 90u8,
                            4u8, 38u8, 167u8, 131u8, 237u8, 42u8, 135u8, 37u8, 156u8, 108u8,
                        ],
                    )
                }
                ///Set the parachain validator-group rotation frequency
                pub fn set_group_rotation_frequency(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetGroupRotationFrequency> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_group_rotation_frequency",
                        SetGroupRotationFrequency { new },
                        [
                            205u8, 222u8, 129u8, 36u8, 136u8, 186u8, 114u8, 70u8, 214u8, 22u8,
                            112u8, 65u8, 56u8, 42u8, 103u8, 93u8, 108u8, 242u8, 188u8, 229u8,
                            150u8, 19u8, 12u8, 222u8, 25u8, 254u8, 48u8, 218u8, 200u8, 208u8,
                            132u8, 251u8,
                        ],
                    )
                }
                ///Set the availability period for parachains.
                pub fn set_chain_availability_period(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetChainAvailabilityPeriod> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_chain_availability_period",
                        SetChainAvailabilityPeriod { new },
                        [
                            171u8, 21u8, 54u8, 241u8, 19u8, 100u8, 54u8, 143u8, 97u8, 191u8, 193u8,
                            96u8, 7u8, 86u8, 255u8, 109u8, 255u8, 93u8, 113u8, 28u8, 182u8, 75u8,
                            120u8, 208u8, 91u8, 125u8, 156u8, 38u8, 56u8, 230u8, 24u8, 139u8,
                        ],
                    )
                }
                ///Set the availability period for parathreads.
                pub fn set_thread_availability_period(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetThreadAvailabilityPeriod> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_thread_availability_period",
                        SetThreadAvailabilityPeriod { new },
                        [
                            208u8, 27u8, 246u8, 33u8, 90u8, 200u8, 75u8, 177u8, 19u8, 107u8, 236u8,
                            43u8, 159u8, 156u8, 184u8, 10u8, 146u8, 71u8, 212u8, 129u8, 44u8, 19u8,
                            162u8, 172u8, 162u8, 46u8, 166u8, 10u8, 67u8, 112u8, 206u8, 50u8,
                        ],
                    )
                }
                ///Set the scheduling lookahead, in expected number of blocks at peak throughput.
                pub fn set_scheduling_lookahead(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetSchedulingLookahead> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_scheduling_lookahead",
                        SetSchedulingLookahead { new },
                        [
                            220u8, 74u8, 0u8, 150u8, 45u8, 29u8, 56u8, 210u8, 66u8, 12u8, 119u8,
                            176u8, 103u8, 24u8, 216u8, 55u8, 211u8, 120u8, 233u8, 204u8, 167u8,
                            100u8, 199u8, 157u8, 186u8, 174u8, 40u8, 218u8, 19u8, 230u8, 253u8,
                            7u8,
                        ],
                    )
                }
                ///Set the maximum number of validators to assign to any core.
                pub fn set_max_validators_per_core(
                    &self,
                    new: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<SetMaxValidatorsPerCore> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_validators_per_core",
                        SetMaxValidatorsPerCore { new },
                        [
                            227u8, 113u8, 192u8, 116u8, 114u8, 171u8, 27u8, 22u8, 84u8, 117u8,
                            146u8, 152u8, 94u8, 101u8, 14u8, 52u8, 228u8, 170u8, 163u8, 82u8,
                            248u8, 130u8, 32u8, 103u8, 225u8, 151u8, 145u8, 36u8, 98u8, 158u8, 6u8,
                            245u8,
                        ],
                    )
                }
                ///Set the maximum number of validators to use in parachain consensus.
                pub fn set_max_validators(
                    &self,
                    new: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<SetMaxValidators> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_validators",
                        SetMaxValidators { new },
                        [
                            143u8, 212u8, 59u8, 147u8, 4u8, 55u8, 142u8, 209u8, 237u8, 76u8, 7u8,
                            178u8, 41u8, 81u8, 4u8, 203u8, 184u8, 149u8, 32u8, 1u8, 106u8, 180u8,
                            121u8, 20u8, 137u8, 169u8, 144u8, 77u8, 38u8, 53u8, 243u8, 127u8,
                        ],
                    )
                }
                ///Set the dispute period, in number of sessions to keep for disputes.
                pub fn set_dispute_period(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetDisputePeriod> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_dispute_period",
                        SetDisputePeriod { new },
                        [
                            36u8, 191u8, 142u8, 240u8, 48u8, 101u8, 10u8, 197u8, 117u8, 125u8,
                            156u8, 189u8, 130u8, 77u8, 242u8, 130u8, 205u8, 154u8, 152u8, 47u8,
                            75u8, 56u8, 63u8, 61u8, 33u8, 163u8, 151u8, 97u8, 105u8, 99u8, 55u8,
                            180u8,
                        ],
                    )
                }
                ///Set the dispute post conclusion acceptance period.
                pub fn set_dispute_post_conclusion_acceptance_period(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetDisputePostConclusionAcceptancePeriod>
                {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_dispute_post_conclusion_acceptance_period",
                        SetDisputePostConclusionAcceptancePeriod { new },
                        [
                            66u8, 56u8, 45u8, 87u8, 51u8, 49u8, 91u8, 95u8, 255u8, 185u8, 54u8,
                            165u8, 85u8, 142u8, 238u8, 251u8, 174u8, 81u8, 3u8, 61u8, 92u8, 97u8,
                            203u8, 20u8, 107u8, 50u8, 208u8, 250u8, 208u8, 159u8, 225u8, 175u8,
                        ],
                    )
                }
                ///Set the dispute conclusion by time out period.
                pub fn set_dispute_conclusion_by_time_out_period(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetDisputeConclusionByTimeOutPeriod> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_dispute_conclusion_by_time_out_period",
                        SetDisputeConclusionByTimeOutPeriod { new },
                        [
                            238u8, 102u8, 27u8, 169u8, 68u8, 116u8, 198u8, 64u8, 190u8, 33u8, 36u8,
                            98u8, 176u8, 157u8, 123u8, 148u8, 126u8, 85u8, 32u8, 19u8, 49u8, 40u8,
                            172u8, 41u8, 195u8, 182u8, 44u8, 255u8, 136u8, 204u8, 250u8, 6u8,
                        ],
                    )
                }
                ///Set the no show slots, in number of number of consensus slots.
                ///Must be at least 1.
                pub fn set_no_show_slots(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetNoShowSlots> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_no_show_slots",
                        SetNoShowSlots { new },
                        [
                            94u8, 230u8, 89u8, 131u8, 188u8, 246u8, 251u8, 34u8, 249u8, 16u8,
                            134u8, 63u8, 238u8, 115u8, 19u8, 97u8, 97u8, 218u8, 238u8, 115u8,
                            126u8, 140u8, 236u8, 17u8, 177u8, 192u8, 210u8, 239u8, 126u8, 107u8,
                            117u8, 207u8,
                        ],
                    )
                }
                ///Set the total number of delay tranches.
                pub fn set_n_delay_tranches(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetNDelayTranches> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_n_delay_tranches",
                        SetNDelayTranches { new },
                        [
                            195u8, 168u8, 178u8, 51u8, 20u8, 107u8, 227u8, 236u8, 57u8, 30u8,
                            130u8, 93u8, 149u8, 2u8, 161u8, 66u8, 48u8, 37u8, 71u8, 108u8, 195u8,
                            65u8, 153u8, 30u8, 181u8, 181u8, 158u8, 252u8, 120u8, 119u8, 36u8,
                            146u8,
                        ],
                    )
                }
                ///Set the zeroth delay tranche width.
                pub fn set_zeroth_delay_tranche_width(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetZerothDelayTrancheWidth> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_zeroth_delay_tranche_width",
                        SetZerothDelayTrancheWidth { new },
                        [
                            69u8, 56u8, 125u8, 24u8, 181u8, 62u8, 99u8, 92u8, 166u8, 107u8, 91u8,
                            134u8, 230u8, 128u8, 214u8, 135u8, 245u8, 64u8, 62u8, 78u8, 96u8,
                            231u8, 195u8, 29u8, 158u8, 113u8, 46u8, 96u8, 29u8, 0u8, 154u8, 80u8,
                        ],
                    )
                }
                ///Set the number of validators needed to approve a block.
                pub fn set_needed_approvals(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetNeededApprovals> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_needed_approvals",
                        SetNeededApprovals { new },
                        [
                            238u8, 55u8, 134u8, 30u8, 67u8, 153u8, 150u8, 5u8, 226u8, 227u8, 185u8,
                            188u8, 66u8, 60u8, 147u8, 118u8, 46u8, 174u8, 104u8, 100u8, 26u8,
                            162u8, 65u8, 58u8, 162u8, 52u8, 211u8, 66u8, 242u8, 177u8, 230u8, 98u8,
                        ],
                    )
                }
                ///Set the number of samples to do of the `RelayVRFModulo` approval assignment
                /// criterion.
                pub fn set_relay_vrf_modulo_samples(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetRelayVrfModuloSamples> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_relay_vrf_modulo_samples",
                        SetRelayVrfModuloSamples { new },
                        [
                            76u8, 101u8, 207u8, 184u8, 211u8, 8u8, 43u8, 4u8, 165u8, 147u8, 166u8,
                            3u8, 189u8, 42u8, 125u8, 130u8, 21u8, 43u8, 189u8, 120u8, 239u8, 131u8,
                            235u8, 35u8, 151u8, 15u8, 30u8, 81u8, 0u8, 2u8, 64u8, 21u8,
                        ],
                    )
                }
                ///Sets the maximum items that can present in a upward dispatch queue at once.
                pub fn set_max_upward_queue_count(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMaxUpwardQueueCount> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_upward_queue_count",
                        SetMaxUpwardQueueCount { new },
                        [
                            116u8, 186u8, 216u8, 17u8, 150u8, 187u8, 86u8, 154u8, 92u8, 122u8,
                            178u8, 167u8, 215u8, 165u8, 55u8, 86u8, 229u8, 114u8, 10u8, 149u8,
                            50u8, 183u8, 165u8, 32u8, 233u8, 105u8, 82u8, 177u8, 120u8, 25u8, 44u8,
                            130u8,
                        ],
                    )
                }
                ///Sets the maximum total size of items that can present in a upward dispatch queue
                /// at once.
                pub fn set_max_upward_queue_size(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMaxUpwardQueueSize> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_upward_queue_size",
                        SetMaxUpwardQueueSize { new },
                        [
                            18u8, 60u8, 141u8, 57u8, 134u8, 96u8, 140u8, 85u8, 137u8, 9u8, 209u8,
                            123u8, 10u8, 165u8, 33u8, 184u8, 34u8, 82u8, 59u8, 60u8, 30u8, 47u8,
                            22u8, 163u8, 119u8, 200u8, 197u8, 192u8, 112u8, 243u8, 156u8, 12u8,
                        ],
                    )
                }
                ///Set the critical downward message size.
                pub fn set_max_downward_message_size(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMaxDownwardMessageSize> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_downward_message_size",
                        SetMaxDownwardMessageSize { new },
                        [
                            104u8, 25u8, 229u8, 184u8, 53u8, 246u8, 206u8, 180u8, 13u8, 156u8,
                            14u8, 224u8, 215u8, 115u8, 104u8, 127u8, 167u8, 189u8, 239u8, 183u8,
                            68u8, 124u8, 55u8, 211u8, 186u8, 115u8, 70u8, 195u8, 61u8, 151u8, 32u8,
                            218u8,
                        ],
                    )
                }
                ///Sets the soft limit for the phase of dispatching dispatchable upward messages.
                pub fn set_ump_service_total_weight(
                    &self,
                    new: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<SetUmpServiceTotalWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_ump_service_total_weight",
                        SetUmpServiceTotalWeight { new },
                        [
                            178u8, 63u8, 233u8, 183u8, 160u8, 109u8, 10u8, 162u8, 150u8, 110u8,
                            66u8, 166u8, 197u8, 207u8, 91u8, 208u8, 137u8, 106u8, 140u8, 184u8,
                            35u8, 85u8, 138u8, 49u8, 32u8, 15u8, 150u8, 136u8, 50u8, 197u8, 21u8,
                            99u8,
                        ],
                    )
                }
                ///Sets the maximum size of an upward message that can be sent by a candidate.
                pub fn set_max_upward_message_size(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMaxUpwardMessageSize> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_upward_message_size",
                        SetMaxUpwardMessageSize { new },
                        [
                            213u8, 120u8, 21u8, 247u8, 101u8, 21u8, 164u8, 228u8, 33u8, 115u8,
                            20u8, 138u8, 28u8, 174u8, 247u8, 39u8, 194u8, 113u8, 34u8, 73u8, 142u8,
                            94u8, 116u8, 151u8, 113u8, 92u8, 151u8, 227u8, 116u8, 250u8, 101u8,
                            179u8,
                        ],
                    )
                }
                ///Sets the maximum number of messages that a candidate can contain.
                pub fn set_max_upward_message_num_per_candidate(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMaxUpwardMessageNumPerCandidate> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_max_upward_message_num_per_candidate",
                        SetMaxUpwardMessageNumPerCandidate { new },
                        [
                            54u8, 133u8, 226u8, 138u8, 184u8, 27u8, 130u8, 153u8, 130u8, 196u8,
                            54u8, 79u8, 124u8, 10u8, 37u8, 139u8, 59u8, 190u8, 169u8, 87u8, 255u8,
                            211u8, 38u8, 142u8, 37u8, 74u8, 144u8, 204u8, 75u8, 94u8, 154u8, 149u8,
                        ],
                    )
                }
                ///Sets the number of sessions after which an HRMP open channel request expires.
                pub fn set_hrmp_open_request_ttl(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetHrmpOpenRequestTtl> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_open_request_ttl",
                        SetHrmpOpenRequestTtl { new },
                        [
                            192u8, 113u8, 113u8, 133u8, 197u8, 75u8, 88u8, 67u8, 130u8, 207u8,
                            37u8, 192u8, 157u8, 159u8, 114u8, 75u8, 83u8, 180u8, 194u8, 180u8,
                            96u8, 129u8, 7u8, 138u8, 110u8, 14u8, 229u8, 98u8, 71u8, 22u8, 229u8,
                            247u8,
                        ],
                    )
                }
                ///Sets the amount of funds that the sender should provide for opening an HRMP
                /// channel.
                pub fn set_hrmp_sender_deposit(
                    &self,
                    new: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<SetHrmpSenderDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_sender_deposit",
                        SetHrmpSenderDeposit { new },
                        [
                            49u8, 38u8, 173u8, 114u8, 66u8, 140u8, 15u8, 151u8, 193u8, 54u8, 128u8,
                            108u8, 72u8, 71u8, 28u8, 65u8, 129u8, 199u8, 105u8, 61u8, 96u8, 119u8,
                            16u8, 53u8, 115u8, 120u8, 152u8, 122u8, 182u8, 171u8, 233u8, 48u8,
                        ],
                    )
                }
                ///Sets the amount of funds that the recipient should provide for accepting opening
                /// an HRMP channel.
                pub fn set_hrmp_recipient_deposit(
                    &self,
                    new: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<SetHrmpRecipientDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_recipient_deposit",
                        SetHrmpRecipientDeposit { new },
                        [
                            209u8, 212u8, 164u8, 56u8, 71u8, 215u8, 98u8, 250u8, 202u8, 150u8,
                            228u8, 6u8, 166u8, 94u8, 171u8, 142u8, 10u8, 253u8, 89u8, 43u8, 6u8,
                            173u8, 8u8, 235u8, 52u8, 18u8, 78u8, 129u8, 227u8, 61u8, 74u8, 83u8,
                        ],
                    )
                }
                ///Sets the maximum number of messages allowed in an HRMP channel at once.
                pub fn set_hrmp_channel_max_capacity(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetHrmpChannelMaxCapacity> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_channel_max_capacity",
                        SetHrmpChannelMaxCapacity { new },
                        [
                            148u8, 109u8, 67u8, 220u8, 1u8, 115u8, 70u8, 93u8, 138u8, 190u8, 60u8,
                            220u8, 80u8, 137u8, 246u8, 230u8, 115u8, 162u8, 30u8, 197u8, 11u8,
                            33u8, 211u8, 224u8, 49u8, 165u8, 149u8, 155u8, 197u8, 44u8, 6u8, 167u8,
                        ],
                    )
                }
                ///Sets the maximum total size of messages in bytes allowed in an HRMP channel at
                /// once.
                pub fn set_hrmp_channel_max_total_size(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetHrmpChannelMaxTotalSize> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_channel_max_total_size",
                        SetHrmpChannelMaxTotalSize { new },
                        [
                            79u8, 40u8, 207u8, 173u8, 168u8, 143u8, 130u8, 240u8, 205u8, 34u8,
                            61u8, 217u8, 215u8, 106u8, 61u8, 181u8, 8u8, 21u8, 105u8, 64u8, 183u8,
                            235u8, 39u8, 133u8, 70u8, 77u8, 233u8, 201u8, 222u8, 8u8, 43u8, 159u8,
                        ],
                    )
                }
                ///Sets the maximum number of inbound HRMP channels a parachain is allowed to
                /// accept.
                pub fn set_hrmp_max_parachain_inbound_channels(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetHrmpMaxParachainInboundChannels> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_max_parachain_inbound_channels",
                        SetHrmpMaxParachainInboundChannels { new },
                        [
                            91u8, 215u8, 212u8, 131u8, 140u8, 185u8, 119u8, 184u8, 61u8, 121u8,
                            120u8, 73u8, 202u8, 98u8, 124u8, 187u8, 171u8, 84u8, 136u8, 77u8,
                            103u8, 169u8, 185u8, 8u8, 214u8, 214u8, 23u8, 195u8, 100u8, 72u8, 45u8,
                            12u8,
                        ],
                    )
                }
                ///Sets the maximum number of inbound HRMP channels a parathread is allowed to
                /// accept.
                pub fn set_hrmp_max_parathread_inbound_channels(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetHrmpMaxParathreadInboundChannels> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_max_parathread_inbound_channels",
                        SetHrmpMaxParathreadInboundChannels { new },
                        [
                            209u8, 66u8, 180u8, 20u8, 87u8, 242u8, 219u8, 71u8, 22u8, 145u8, 220u8,
                            48u8, 44u8, 42u8, 77u8, 69u8, 255u8, 82u8, 27u8, 125u8, 231u8, 111u8,
                            23u8, 32u8, 239u8, 28u8, 200u8, 255u8, 91u8, 207u8, 99u8, 107u8,
                        ],
                    )
                }
                ///Sets the maximum size of a message that could ever be put into an HRMP channel.
                pub fn set_hrmp_channel_max_message_size(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetHrmpChannelMaxMessageSize> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_channel_max_message_size",
                        SetHrmpChannelMaxMessageSize { new },
                        [
                            17u8, 224u8, 230u8, 9u8, 114u8, 221u8, 138u8, 46u8, 234u8, 151u8, 27u8,
                            34u8, 179u8, 67u8, 113u8, 228u8, 128u8, 212u8, 209u8, 125u8, 122u8,
                            1u8, 79u8, 28u8, 10u8, 14u8, 83u8, 65u8, 253u8, 173u8, 116u8, 209u8,
                        ],
                    )
                }
                ///Sets the maximum number of outbound HRMP channels a parachain is allowed to
                /// open.
                pub fn set_hrmp_max_parachain_outbound_channels(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetHrmpMaxParachainOutboundChannels> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_max_parachain_outbound_channels",
                        SetHrmpMaxParachainOutboundChannels { new },
                        [
                            26u8, 146u8, 150u8, 88u8, 236u8, 8u8, 63u8, 103u8, 71u8, 11u8, 20u8,
                            210u8, 205u8, 106u8, 101u8, 112u8, 116u8, 73u8, 116u8, 136u8, 149u8,
                            181u8, 207u8, 95u8, 151u8, 7u8, 98u8, 17u8, 224u8, 157u8, 117u8, 88u8,
                        ],
                    )
                }
                ///Sets the maximum number of outbound HRMP channels a parathread is allowed to
                /// open.
                pub fn set_hrmp_max_parathread_outbound_channels(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetHrmpMaxParathreadOutboundChannels> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_max_parathread_outbound_channels",
                        SetHrmpMaxParathreadOutboundChannels { new },
                        [
                            31u8, 72u8, 93u8, 21u8, 180u8, 156u8, 101u8, 24u8, 145u8, 220u8, 194u8,
                            93u8, 176u8, 164u8, 53u8, 123u8, 36u8, 113u8, 152u8, 13u8, 222u8, 54u8,
                            175u8, 170u8, 235u8, 68u8, 236u8, 130u8, 178u8, 56u8, 140u8, 31u8,
                        ],
                    )
                }
                ///Sets the maximum number of outbound HRMP messages can be sent by a candidate.
                pub fn set_hrmp_max_message_num_per_candidate(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetHrmpMaxMessageNumPerCandidate> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_hrmp_max_message_num_per_candidate",
                        SetHrmpMaxMessageNumPerCandidate { new },
                        [
                            244u8, 94u8, 225u8, 194u8, 133u8, 116u8, 202u8, 238u8, 8u8, 57u8,
                            122u8, 125u8, 6u8, 131u8, 84u8, 102u8, 180u8, 67u8, 250u8, 136u8, 30u8,
                            29u8, 110u8, 105u8, 219u8, 166u8, 91u8, 140u8, 44u8, 192u8, 37u8,
                            185u8,
                        ],
                    )
                }
                ///Sets the maximum amount of weight any individual upward message may consume.
                pub fn set_ump_max_individual_weight(
                    &self,
                    new: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<SetUmpMaxIndividualWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_ump_max_individual_weight",
                        SetUmpMaxIndividualWeight { new },
                        [
                            66u8, 190u8, 15u8, 172u8, 67u8, 16u8, 117u8, 247u8, 176u8, 25u8, 163u8,
                            130u8, 147u8, 224u8, 226u8, 101u8, 219u8, 173u8, 176u8, 49u8, 90u8,
                            133u8, 12u8, 223u8, 220u8, 18u8, 83u8, 232u8, 137u8, 52u8, 206u8, 71u8,
                        ],
                    )
                }
                ///Enable or disable PVF pre-checking. Consult the field documentation prior
                /// executing.
                pub fn set_pvf_checking_enabled(
                    &self,
                    new: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<SetPvfCheckingEnabled> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_pvf_checking_enabled",
                        SetPvfCheckingEnabled { new },
                        [
                            123u8, 76u8, 1u8, 112u8, 174u8, 245u8, 18u8, 67u8, 13u8, 29u8, 219u8,
                            197u8, 201u8, 112u8, 230u8, 191u8, 37u8, 148u8, 73u8, 125u8, 54u8,
                            236u8, 3u8, 80u8, 114u8, 155u8, 244u8, 132u8, 57u8, 63u8, 158u8, 248u8,
                        ],
                    )
                }
                ///Set the number of session changes after which a PVF pre-checking voting is
                /// rejected.
                pub fn set_pvf_voting_ttl(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetPvfVotingTtl> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_pvf_voting_ttl",
                        SetPvfVotingTtl { new },
                        [
                            17u8, 11u8, 98u8, 217u8, 208u8, 102u8, 238u8, 83u8, 118u8, 123u8, 20u8,
                            18u8, 46u8, 212u8, 21u8, 164u8, 61u8, 104u8, 208u8, 204u8, 91u8, 210u8,
                            40u8, 6u8, 201u8, 147u8, 46u8, 166u8, 219u8, 227u8, 121u8, 187u8,
                        ],
                    )
                }
                ///Sets the minimum delay between announcing the upgrade block for a parachain
                /// until the upgrade taking place.
                ///
                ///See the field documentation for information and constraints for the new value.
                pub fn set_minimum_validation_upgrade_delay(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SetMinimumValidationUpgradeDelay> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_minimum_validation_upgrade_delay",
                        SetMinimumValidationUpgradeDelay { new },
                        [
                            205u8, 188u8, 75u8, 136u8, 228u8, 26u8, 112u8, 27u8, 119u8, 37u8,
                            252u8, 109u8, 23u8, 145u8, 21u8, 212u8, 7u8, 28u8, 242u8, 210u8, 182u8,
                            111u8, 121u8, 109u8, 50u8, 130u8, 46u8, 127u8, 122u8, 40u8, 141u8,
                            242u8,
                        ],
                    )
                }
                ///Setting this to true will disable consistency checks for the configuration
                /// setters. Use with caution.
                pub fn set_bypass_consistency_check(
                    &self,
                    new: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<SetBypassConsistencyCheck> {
                    ::subxt::tx::Payload::new_static(
                        "Configuration",
                        "set_bypass_consistency_check",
                        SetBypassConsistencyCheck { new },
                        [
                            80u8, 66u8, 200u8, 98u8, 54u8, 207u8, 64u8, 99u8, 162u8, 121u8, 26u8,
                            173u8, 113u8, 224u8, 240u8, 106u8, 69u8, 191u8, 177u8, 107u8, 34u8,
                            74u8, 103u8, 128u8, 252u8, 160u8, 169u8, 246u8, 125u8, 127u8, 153u8,
                            129u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The active configuration for the current session.
                pub fn active_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::configuration::HostConfiguration<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Configuration",
                        "ActiveConfig",
                        vec![],
                        [
                            172u8, 130u8, 170u8, 206u8, 221u8, 62u8, 122u8, 61u8, 164u8, 167u8,
                            163u8, 81u8, 53u8, 0u8, 119u8, 14u8, 195u8, 60u8, 220u8, 65u8, 233u8,
                            80u8, 227u8, 234u8, 123u8, 217u8, 81u8, 157u8, 245u8, 111u8, 236u8,
                            55u8,
                        ],
                    )
                }
                /// Pending configuration changes.
                ///
                /// This is a list of configuration changes, each with a session index at which it
                /// should be applied.
                ///
                /// The list is sorted ascending by session index. Also, this list can only contain
                /// at most 2 items: for the next session and for the
                /// `scheduled_session`.
                pub fn pending_configs(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        (
                            ::core::primitive::u32,
                            runtime_types::polkadot_runtime_parachains::configuration::HostConfiguration<
                                ::core::primitive::u32,
                            >,
                        ),
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                >{
                    ::subxt::storage::address::Address::new_static(
                        "Configuration",
                        "PendingConfigs",
                        vec![],
                        [
                            76u8, 42u8, 247u8, 29u8, 107u8, 96u8, 203u8, 18u8, 38u8, 228u8, 64u8,
                            18u8, 208u8, 111u8, 215u8, 154u8, 218u8, 255u8, 178u8, 4u8, 140u8,
                            85u8, 36u8, 128u8, 169u8, 227u8, 142u8, 220u8, 100u8, 141u8, 230u8,
                            241u8,
                        ],
                    )
                }
                /// If this is set, then the configuration setters will bypass the consistency
                /// checks. This is meant to be used only as the last resort.
                pub fn bypass_consistency_check(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Configuration",
                        "BypassConsistencyCheck",
                        vec![],
                        [
                            42u8, 191u8, 122u8, 163u8, 112u8, 2u8, 148u8, 59u8, 79u8, 219u8, 184u8,
                            172u8, 246u8, 136u8, 185u8, 251u8, 189u8, 226u8, 83u8, 129u8, 162u8,
                            109u8, 148u8, 75u8, 120u8, 216u8, 44u8, 28u8, 221u8, 78u8, 177u8, 94u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod paras_shared {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The current session index.
                pub fn current_session_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasShared",
                        "CurrentSessionIndex",
                        vec![],
                        [
                            83u8, 15u8, 20u8, 55u8, 103u8, 65u8, 76u8, 202u8, 69u8, 14u8, 221u8,
                            93u8, 38u8, 163u8, 167u8, 83u8, 18u8, 245u8, 33u8, 175u8, 7u8, 97u8,
                            67u8, 186u8, 96u8, 57u8, 147u8, 120u8, 107u8, 91u8, 147u8, 64u8,
                        ],
                    )
                }
                /// All the validators actively participating in parachain consensus.
                /// Indices are into the broader validator set.
                pub fn active_validator_indices(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasShared",
                        "ActiveValidatorIndices",
                        vec![],
                        [
                            123u8, 26u8, 202u8, 53u8, 219u8, 42u8, 54u8, 92u8, 144u8, 74u8, 228u8,
                            234u8, 129u8, 216u8, 161u8, 98u8, 199u8, 12u8, 13u8, 231u8, 23u8,
                            166u8, 185u8, 209u8, 191u8, 33u8, 231u8, 252u8, 232u8, 44u8, 213u8,
                            221u8,
                        ],
                    )
                }
                /// The parachain attestation keys of the validators actively participating in
                /// parachain consensus. This should be the same length as
                /// `ActiveValidatorIndices`.
                pub fn active_validator_keys(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_primitives::v2::validator_app::Public>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasShared",
                        "ActiveValidatorKeys",
                        vec![],
                        [
                            33u8, 14u8, 54u8, 86u8, 184u8, 171u8, 194u8, 35u8, 187u8, 252u8, 181u8,
                            79u8, 229u8, 134u8, 50u8, 235u8, 162u8, 216u8, 108u8, 160u8, 175u8,
                            172u8, 239u8, 114u8, 57u8, 238u8, 9u8, 54u8, 57u8, 196u8, 105u8, 15u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod para_inclusion {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_parachains::inclusion::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A candidate was backed. `[candidate, head_data]`
            pub struct CandidateBacked(
                pub runtime_types::polkadot_primitives::v2::CandidateReceipt<::subxt::utils::H256>,
                pub runtime_types::polkadot_parachain::primitives::HeadData,
                pub runtime_types::polkadot_primitives::v2::CoreIndex,
                pub runtime_types::polkadot_primitives::v2::GroupIndex,
            );
            impl ::subxt::events::StaticEvent for CandidateBacked {
                const PALLET: &'static str = "ParaInclusion";
                const EVENT: &'static str = "CandidateBacked";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A candidate was included. `[candidate, head_data]`
            pub struct CandidateIncluded(
                pub runtime_types::polkadot_primitives::v2::CandidateReceipt<::subxt::utils::H256>,
                pub runtime_types::polkadot_parachain::primitives::HeadData,
                pub runtime_types::polkadot_primitives::v2::CoreIndex,
                pub runtime_types::polkadot_primitives::v2::GroupIndex,
            );
            impl ::subxt::events::StaticEvent for CandidateIncluded {
                const PALLET: &'static str = "ParaInclusion";
                const EVENT: &'static str = "CandidateIncluded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A candidate timed out. `[candidate, head_data]`
            pub struct CandidateTimedOut(
                pub runtime_types::polkadot_primitives::v2::CandidateReceipt<::subxt::utils::H256>,
                pub runtime_types::polkadot_parachain::primitives::HeadData,
                pub runtime_types::polkadot_primitives::v2::CoreIndex,
            );
            impl ::subxt::events::StaticEvent for CandidateTimedOut {
                const PALLET: &'static str = "ParaInclusion";
                const EVENT: &'static str = "CandidateTimedOut";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The latest bitfield for each validator, referred to by their index in the
                /// validator set.
                pub fn availability_bitfields(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_primitives::v2::ValidatorIndex,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::inclusion::AvailabilityBitfieldRecord<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                >{
                    ::subxt::storage::address::Address::new_static(
                        "ParaInclusion",
                        "AvailabilityBitfields",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            149u8, 215u8, 123u8, 226u8, 73u8, 240u8, 102u8, 39u8, 243u8, 232u8,
                            226u8, 116u8, 65u8, 180u8, 110u8, 4u8, 194u8, 50u8, 60u8, 193u8, 142u8,
                            62u8, 20u8, 148u8, 106u8, 162u8, 96u8, 114u8, 215u8, 250u8, 111u8,
                            225u8,
                        ],
                    )
                }
                /// The latest bitfield for each validator, referred to by their index in the
                /// validator set.
                pub fn availability_bitfields_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::inclusion::AvailabilityBitfieldRecord<
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                >{
                    ::subxt::storage::address::Address::new_static(
                        "ParaInclusion",
                        "AvailabilityBitfields",
                        Vec::new(),
                        [
                            149u8, 215u8, 123u8, 226u8, 73u8, 240u8, 102u8, 39u8, 243u8, 232u8,
                            226u8, 116u8, 65u8, 180u8, 110u8, 4u8, 194u8, 50u8, 60u8, 193u8, 142u8,
                            62u8, 20u8, 148u8, 106u8, 162u8, 96u8, 114u8, 215u8, 250u8, 111u8,
                            225u8,
                        ],
                    )
                }
                /// Candidates pending availability by `ParaId`.
                pub fn pending_availability(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_parachain::primitives::Id,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::inclusion::CandidatePendingAvailability<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                >{
                    ::subxt::storage::address::Address::new_static(
                        "ParaInclusion",
                        "PendingAvailability",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            54u8, 166u8, 18u8, 56u8, 51u8, 241u8, 31u8, 165u8, 220u8, 138u8, 67u8,
                            171u8, 23u8, 101u8, 109u8, 26u8, 211u8, 237u8, 81u8, 143u8, 192u8,
                            214u8, 49u8, 42u8, 69u8, 30u8, 168u8, 113u8, 72u8, 12u8, 140u8, 242u8,
                        ],
                    )
                }
                /// Candidates pending availability by `ParaId`.
                pub fn pending_availability_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::inclusion::CandidatePendingAvailability<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                >{
                    ::subxt::storage::address::Address::new_static(
                        "ParaInclusion",
                        "PendingAvailability",
                        Vec::new(),
                        [
                            54u8, 166u8, 18u8, 56u8, 51u8, 241u8, 31u8, 165u8, 220u8, 138u8, 67u8,
                            171u8, 23u8, 101u8, 109u8, 26u8, 211u8, 237u8, 81u8, 143u8, 192u8,
                            214u8, 49u8, 42u8, 69u8, 30u8, 168u8, 113u8, 72u8, 12u8, 140u8, 242u8,
                        ],
                    )
                }
                /// The commitments of candidates pending availability, by `ParaId`.
                pub fn pending_availability_commitments(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::CandidateCommitments<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaInclusion",
                        "PendingAvailabilityCommitments",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            128u8, 38u8, 30u8, 235u8, 157u8, 55u8, 36u8, 88u8, 188u8, 164u8, 61u8,
                            62u8, 84u8, 83u8, 180u8, 208u8, 244u8, 240u8, 254u8, 183u8, 226u8,
                            201u8, 27u8, 47u8, 212u8, 137u8, 251u8, 46u8, 13u8, 33u8, 13u8, 43u8,
                        ],
                    )
                }
                /// The commitments of candidates pending availability, by `ParaId`.
                pub fn pending_availability_commitments_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::CandidateCommitments<
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaInclusion",
                        "PendingAvailabilityCommitments",
                        Vec::new(),
                        [
                            128u8, 38u8, 30u8, 235u8, 157u8, 55u8, 36u8, 88u8, 188u8, 164u8, 61u8,
                            62u8, 84u8, 83u8, 180u8, 208u8, 244u8, 240u8, 254u8, 183u8, 226u8,
                            201u8, 27u8, 47u8, 212u8, 137u8, 251u8, 46u8, 13u8, 33u8, 13u8, 43u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod para_inherent {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Enter {
                pub data: runtime_types::polkadot_primitives::v2::InherentData<
                    runtime_types::sp_runtime::generic::header::Header<
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >,
                >,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Enter the paras inherent. This will process bitfields and backed candidates.
                pub fn enter(
                    &self,
                    data: runtime_types::polkadot_primitives::v2::InherentData<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<Enter> {
                    ::subxt::tx::Payload::new_static(
                        "ParaInherent",
                        "enter",
                        Enter { data },
                        [
                            196u8, 247u8, 84u8, 213u8, 181u8, 15u8, 195u8, 125u8, 252u8, 46u8,
                            165u8, 1u8, 23u8, 159u8, 187u8, 34u8, 8u8, 15u8, 44u8, 240u8, 136u8,
                            148u8, 7u8, 82u8, 106u8, 255u8, 190u8, 127u8, 225u8, 230u8, 63u8,
                            204u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Whether the paras inherent was included within this block.
                ///
                /// The `Option<()>` is effectively a `bool`, but it never hits storage in the
                /// `None` variant due to the guarantees of FRAME's storage APIs.
                ///
                /// If this is `None` at the end of the block, we panic and render the block
                /// invalid.
                pub fn included(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaInherent",
                        "Included",
                        vec![],
                        [
                            208u8, 213u8, 76u8, 64u8, 90u8, 141u8, 144u8, 52u8, 220u8, 35u8, 143u8,
                            171u8, 45u8, 59u8, 9u8, 218u8, 29u8, 186u8, 139u8, 203u8, 205u8, 12u8,
                            10u8, 2u8, 27u8, 167u8, 182u8, 244u8, 167u8, 220u8, 44u8, 16u8,
                        ],
                    )
                }
                /// Scraped on chain data for extracting resolved disputes as well as backing votes.
                pub fn on_chain_votes(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::ScrapedOnChainVotes<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaInherent",
                        "OnChainVotes",
                        vec![],
                        [
                            187u8, 34u8, 219u8, 197u8, 202u8, 214u8, 140u8, 152u8, 253u8, 65u8,
                            206u8, 217u8, 36u8, 40u8, 107u8, 215u8, 135u8, 115u8, 35u8, 61u8,
                            180u8, 131u8, 0u8, 184u8, 193u8, 76u8, 165u8, 63u8, 106u8, 222u8,
                            126u8, 113u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod para_scheduler {
        use super::{root_mod, runtime_types};
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// All the validator groups. One for each core. Indices are into `ActiveValidators`
                /// - not the broader set of Polkadot validators, but instead just
                /// the subset used for parachains during this session.
                ///
                /// Bound: The number of cores is the sum of the numbers of parachains and
                /// parathread multiplexers. Reasonably, 100-1000. The dominant
                /// factor is the number of validators: safe upper bound at 10k.
                pub fn validator_groups(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        ::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaScheduler",
                        "ValidatorGroups",
                        vec![],
                        [
                            175u8, 187u8, 69u8, 76u8, 211u8, 36u8, 162u8, 147u8, 83u8, 65u8, 83u8,
                            44u8, 241u8, 112u8, 246u8, 14u8, 237u8, 255u8, 248u8, 58u8, 44u8,
                            207u8, 159u8, 112u8, 31u8, 90u8, 15u8, 85u8, 4u8, 212u8, 215u8, 211u8,
                        ],
                    )
                }
                /// A queue of upcoming claims and which core they should be mapped onto.
                ///
                /// The number of queued claims is bounded at the `scheduling_lookahead`
                /// multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 =
                /// 500.
                pub fn parathread_queue(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::scheduler::ParathreadClaimQueue,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaScheduler",
                        "ParathreadQueue",
                        vec![],
                        [
                            79u8, 144u8, 191u8, 114u8, 235u8, 55u8, 133u8, 208u8, 73u8, 97u8, 73u8,
                            148u8, 96u8, 185u8, 110u8, 95u8, 132u8, 54u8, 244u8, 86u8, 50u8, 218u8,
                            121u8, 226u8, 153u8, 58u8, 232u8, 202u8, 132u8, 147u8, 168u8, 48u8,
                        ],
                    )
                }
                /// One entry for each availability core. Entries are `None` if the core is not
                /// currently occupied. Can be temporarily `Some` if scheduled but
                /// not occupied. The i'th parachain belongs to the i'th core, with
                /// the remaining cores all being parathread-multiplexers.
                ///
                /// Bounded by the maximum of either of these two values:
                ///   * The number of parachains and parathread multiplexers
                ///   * The number of validators divided by `configuration.max_validators_per_core`.
                pub fn availability_cores(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        ::core::option::Option<
                            runtime_types::polkadot_primitives::v2::CoreOccupied,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaScheduler",
                        "AvailabilityCores",
                        vec![],
                        [
                            103u8, 94u8, 52u8, 17u8, 118u8, 25u8, 254u8, 190u8, 74u8, 91u8, 64u8,
                            205u8, 243u8, 113u8, 143u8, 166u8, 193u8, 110u8, 214u8, 151u8, 24u8,
                            112u8, 69u8, 131u8, 235u8, 78u8, 240u8, 120u8, 240u8, 68u8, 56u8,
                            215u8,
                        ],
                    )
                }
                /// An index used to ensure that only one claim on a parathread exists in the queue
                /// or is currently being handled by an occupied core.
                ///
                /// Bounded by the number of parathread cores and scheduling lookahead. Reasonably,
                /// 10 * 50 = 500.
                pub fn parathread_claim_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaScheduler",
                        "ParathreadClaimIndex",
                        vec![],
                        [
                            64u8, 17u8, 173u8, 35u8, 14u8, 16u8, 149u8, 200u8, 118u8, 211u8, 130u8,
                            15u8, 124u8, 112u8, 44u8, 220u8, 156u8, 132u8, 119u8, 148u8, 24u8,
                            120u8, 252u8, 246u8, 204u8, 119u8, 206u8, 85u8, 44u8, 210u8, 135u8,
                            83u8,
                        ],
                    )
                }
                /// The block number where the session start occurred. Used to track how many group
                /// rotations have occurred.
                ///
                /// Note that in the context of parachains modules the session change is signaled
                /// during the block and enacted at the end of the block (at the
                /// finalization stage, to be exact). Thus for all intents and
                /// purposes the effect of the session change is observed at the
                /// block following the session change, block number of which we save in this
                /// storage value.
                pub fn session_start_block(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaScheduler",
                        "SessionStartBlock",
                        vec![],
                        [
                            122u8, 37u8, 150u8, 1u8, 185u8, 201u8, 168u8, 67u8, 55u8, 17u8, 101u8,
                            18u8, 133u8, 212u8, 6u8, 73u8, 191u8, 204u8, 229u8, 22u8, 185u8, 120u8,
                            24u8, 245u8, 121u8, 215u8, 124u8, 210u8, 49u8, 28u8, 26u8, 80u8,
                        ],
                    )
                }
                /// Currently scheduled cores - free but up to be occupied.
                ///
                /// Bounded by the number of cores: one for each parachain and parathread
                /// multiplexer.
                ///
                /// The value contained here will not be valid after the end of a block. Runtime
                /// APIs should be used to determine scheduled cores/
                /// for the upcoming block.
                pub fn scheduled(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::polkadot_runtime_parachains::scheduler::CoreAssignment,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaScheduler",
                        "Scheduled",
                        vec![],
                        [
                            246u8, 105u8, 102u8, 107u8, 143u8, 92u8, 220u8, 69u8, 71u8, 102u8,
                            212u8, 157u8, 56u8, 112u8, 42u8, 179u8, 183u8, 139u8, 128u8, 81u8,
                            239u8, 84u8, 103u8, 126u8, 82u8, 247u8, 39u8, 39u8, 231u8, 218u8,
                            131u8, 53u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod paras {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceSetCurrentCode {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
                pub new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceSetCurrentHead {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
                pub new_head: runtime_types::polkadot_parachain::primitives::HeadData,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceScheduleCodeUpgrade {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
                pub new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                pub relay_parent_number: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceNoteNewHead {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
                pub new_head: runtime_types::polkadot_parachain::primitives::HeadData,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceQueueAction {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AddTrustedValidationCode {
                pub validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PokeUnusedValidationCode {
                pub validation_code_hash:
                    runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct IncludePvfCheckStatement {
                pub stmt: runtime_types::polkadot_primitives::v2::PvfCheckStatement,
                pub signature: runtime_types::polkadot_primitives::v2::validator_app::Signature,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Set the storage for the parachain validation code immediately.
                pub fn force_set_current_code(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                    new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                ) -> ::subxt::tx::Payload<ForceSetCurrentCode> {
                    ::subxt::tx::Payload::new_static(
                        "Paras",
                        "force_set_current_code",
                        ForceSetCurrentCode { para, new_code },
                        [
                            56u8, 59u8, 48u8, 185u8, 106u8, 99u8, 250u8, 32u8, 207u8, 2u8, 4u8,
                            110u8, 165u8, 131u8, 22u8, 33u8, 248u8, 175u8, 186u8, 6u8, 118u8, 51u8,
                            74u8, 239u8, 68u8, 122u8, 148u8, 242u8, 193u8, 131u8, 6u8, 135u8,
                        ],
                    )
                }
                ///Set the storage for the current parachain head data immediately.
                pub fn force_set_current_head(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                    new_head: runtime_types::polkadot_parachain::primitives::HeadData,
                ) -> ::subxt::tx::Payload<ForceSetCurrentHead> {
                    ::subxt::tx::Payload::new_static(
                        "Paras",
                        "force_set_current_head",
                        ForceSetCurrentHead { para, new_head },
                        [
                            203u8, 70u8, 33u8, 168u8, 133u8, 64u8, 146u8, 137u8, 156u8, 104u8,
                            183u8, 26u8, 74u8, 227u8, 154u8, 224u8, 75u8, 85u8, 143u8, 51u8, 60u8,
                            194u8, 59u8, 94u8, 100u8, 84u8, 194u8, 100u8, 153u8, 9u8, 222u8, 63u8,
                        ],
                    )
                }
                ///Schedule an upgrade as if it was scheduled in the given relay parent block.
                pub fn force_schedule_code_upgrade(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                    new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                    relay_parent_number: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ForceScheduleCodeUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "Paras",
                        "force_schedule_code_upgrade",
                        ForceScheduleCodeUpgrade { para, new_code, relay_parent_number },
                        [
                            30u8, 210u8, 178u8, 31u8, 48u8, 144u8, 167u8, 117u8, 220u8, 36u8,
                            175u8, 220u8, 145u8, 193u8, 20u8, 98u8, 149u8, 130u8, 66u8, 54u8, 20u8,
                            204u8, 231u8, 116u8, 203u8, 179u8, 253u8, 106u8, 55u8, 58u8, 116u8,
                            109u8,
                        ],
                    )
                }
                ///Note a new block head for para within the context of the current block.
                pub fn force_note_new_head(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                    new_head: runtime_types::polkadot_parachain::primitives::HeadData,
                ) -> ::subxt::tx::Payload<ForceNoteNewHead> {
                    ::subxt::tx::Payload::new_static(
                        "Paras",
                        "force_note_new_head",
                        ForceNoteNewHead { para, new_head },
                        [
                            83u8, 93u8, 166u8, 142u8, 213u8, 1u8, 243u8, 73u8, 192u8, 164u8, 104u8,
                            206u8, 99u8, 250u8, 31u8, 222u8, 231u8, 54u8, 12u8, 45u8, 92u8, 74u8,
                            248u8, 50u8, 180u8, 86u8, 251u8, 172u8, 227u8, 88u8, 45u8, 127u8,
                        ],
                    )
                }
                ///Put a parachain directly into the next session's action queue.
                ///We can't queue it any sooner than this without going into the
                ///initializer...
                pub fn force_queue_action(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<ForceQueueAction> {
                    ::subxt::tx::Payload::new_static(
                        "Paras",
                        "force_queue_action",
                        ForceQueueAction { para },
                        [
                            195u8, 243u8, 79u8, 34u8, 111u8, 246u8, 109u8, 90u8, 251u8, 137u8,
                            48u8, 23u8, 117u8, 29u8, 26u8, 200u8, 37u8, 64u8, 36u8, 254u8, 224u8,
                            99u8, 165u8, 246u8, 8u8, 76u8, 250u8, 36u8, 141u8, 67u8, 185u8, 17u8,
                        ],
                    )
                }
                ///Adds the validation code to the storage.
                ///
                ///The code will not be added if it is already present. Additionally, if PVF
                /// pre-checking is running for that code, it will be instantly
                /// accepted.
                ///
                ///Otherwise, the code will be added into the storage. Note that the code will be
                /// added into storage with reference count 0. This is to account
                /// the fact that there are no users for this code yet. The caller
                /// will have to make sure that this code eventually gets
                /// used by some parachain or removed from the storage to avoid storage leaks. For
                /// the latter prefer to use the `poke_unused_validation_code`
                /// dispatchable to raw storage manipulation.
                ///
                ///This function is mainly meant to be used for upgrading parachains that do not
                /// follow the go-ahead signal while the PVF pre-checking feature is
                /// enabled.
                pub fn add_trusted_validation_code(
                    &self,
                    validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                ) -> ::subxt::tx::Payload<AddTrustedValidationCode> {
                    ::subxt::tx::Payload::new_static(
                        "Paras",
                        "add_trusted_validation_code",
                        AddTrustedValidationCode { validation_code },
                        [
                            160u8, 199u8, 245u8, 178u8, 58u8, 65u8, 79u8, 199u8, 53u8, 60u8, 84u8,
                            225u8, 2u8, 145u8, 154u8, 204u8, 165u8, 171u8, 173u8, 223u8, 59u8,
                            196u8, 37u8, 12u8, 243u8, 158u8, 77u8, 184u8, 58u8, 64u8, 133u8, 71u8,
                        ],
                    )
                }
                ///Remove the validation code from the storage iff the reference count is 0.
                ///
                ///This is better than removing the storage directly, because it will not remove
                /// the code that was suddenly got used by some parachain while this
                /// dispatchable was pending dispatching.
                pub fn poke_unused_validation_code(
                    &self,
                    validation_code_hash: runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                ) -> ::subxt::tx::Payload<PokeUnusedValidationCode> {
                    ::subxt::tx::Payload::new_static(
                        "Paras",
                        "poke_unused_validation_code",
                        PokeUnusedValidationCode { validation_code_hash },
                        [
                            98u8, 9u8, 24u8, 180u8, 8u8, 144u8, 36u8, 28u8, 111u8, 83u8, 162u8,
                            160u8, 66u8, 119u8, 177u8, 117u8, 143u8, 233u8, 241u8, 128u8, 189u8,
                            118u8, 241u8, 30u8, 74u8, 171u8, 193u8, 177u8, 233u8, 12u8, 254u8,
                            146u8,
                        ],
                    )
                }
                ///Includes a statement for a PVF pre-checking vote. Potentially, finalizes the
                /// vote and enacts the results if that was the last vote before
                /// achieving the supermajority.
                pub fn include_pvf_check_statement(
                    &self,
                    stmt: runtime_types::polkadot_primitives::v2::PvfCheckStatement,
                    signature: runtime_types::polkadot_primitives::v2::validator_app::Signature,
                ) -> ::subxt::tx::Payload<IncludePvfCheckStatement> {
                    ::subxt::tx::Payload::new_static(
                        "Paras",
                        "include_pvf_check_statement",
                        IncludePvfCheckStatement { stmt, signature },
                        [
                            22u8, 136u8, 241u8, 59u8, 36u8, 249u8, 239u8, 255u8, 169u8, 117u8,
                            19u8, 58u8, 214u8, 16u8, 135u8, 65u8, 13u8, 250u8, 5u8, 41u8, 144u8,
                            29u8, 207u8, 73u8, 215u8, 221u8, 1u8, 253u8, 123u8, 110u8, 6u8, 196u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_parachains::paras::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Current code has been updated for a Para. `para_id`
            pub struct CurrentCodeUpdated(pub runtime_types::polkadot_parachain::primitives::Id);
            impl ::subxt::events::StaticEvent for CurrentCodeUpdated {
                const PALLET: &'static str = "Paras";
                const EVENT: &'static str = "CurrentCodeUpdated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Current head has been updated for a Para. `para_id`
            pub struct CurrentHeadUpdated(pub runtime_types::polkadot_parachain::primitives::Id);
            impl ::subxt::events::StaticEvent for CurrentHeadUpdated {
                const PALLET: &'static str = "Paras";
                const EVENT: &'static str = "CurrentHeadUpdated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A code upgrade has been scheduled for a Para. `para_id`
            pub struct CodeUpgradeScheduled(pub runtime_types::polkadot_parachain::primitives::Id);
            impl ::subxt::events::StaticEvent for CodeUpgradeScheduled {
                const PALLET: &'static str = "Paras";
                const EVENT: &'static str = "CodeUpgradeScheduled";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new head has been noted for a Para. `para_id`
            pub struct NewHeadNoted(pub runtime_types::polkadot_parachain::primitives::Id);
            impl ::subxt::events::StaticEvent for NewHeadNoted {
                const PALLET: &'static str = "Paras";
                const EVENT: &'static str = "NewHeadNoted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A para has been queued to execute pending actions. `para_id`
            pub struct ActionQueued(
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub ::core::primitive::u32,
            );
            impl ::subxt::events::StaticEvent for ActionQueued {
                const PALLET: &'static str = "Paras";
                const EVENT: &'static str = "ActionQueued";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The given para either initiated or subscribed to a PVF check for the given
            /// validation code. `code_hash` `para_id`
            pub struct PvfCheckStarted(
                pub runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                pub runtime_types::polkadot_parachain::primitives::Id,
            );
            impl ::subxt::events::StaticEvent for PvfCheckStarted {
                const PALLET: &'static str = "Paras";
                const EVENT: &'static str = "PvfCheckStarted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The given validation code was accepted by the PVF pre-checking vote.
            ///`code_hash` `para_id`
            pub struct PvfCheckAccepted(
                pub runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                pub runtime_types::polkadot_parachain::primitives::Id,
            );
            impl ::subxt::events::StaticEvent for PvfCheckAccepted {
                const PALLET: &'static str = "Paras";
                const EVENT: &'static str = "PvfCheckAccepted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The given validation code was rejected by the PVF pre-checking vote.
            ///`code_hash` `para_id`
            pub struct PvfCheckRejected(
                pub runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                pub runtime_types::polkadot_parachain::primitives::Id,
            );
            impl ::subxt::events::StaticEvent for PvfCheckRejected {
                const PALLET: &'static str = "Paras";
                const EVENT: &'static str = "PvfCheckRejected";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// All currently active PVF pre-checking votes.
                ///
                /// Invariant:
                /// - There are no PVF pre-checking votes that exists in list but not in the set and
                ///   vice versa.
                pub fn pvf_active_vote_map(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::paras::PvfCheckActiveVoteState<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "PvfActiveVoteMap",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            84u8, 214u8, 221u8, 221u8, 244u8, 56u8, 135u8, 87u8, 252u8, 39u8,
                            188u8, 13u8, 196u8, 25u8, 214u8, 186u8, 152u8, 181u8, 190u8, 39u8,
                            235u8, 211u8, 236u8, 114u8, 67u8, 85u8, 138u8, 43u8, 248u8, 134u8,
                            124u8, 73u8,
                        ],
                    )
                }
                /// All currently active PVF pre-checking votes.
                ///
                /// Invariant:
                /// - There are no PVF pre-checking votes that exists in list but not in the set and
                ///   vice versa.
                pub fn pvf_active_vote_map_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::paras::PvfCheckActiveVoteState<
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "PvfActiveVoteMap",
                        Vec::new(),
                        [
                            84u8, 214u8, 221u8, 221u8, 244u8, 56u8, 135u8, 87u8, 252u8, 39u8,
                            188u8, 13u8, 196u8, 25u8, 214u8, 186u8, 152u8, 181u8, 190u8, 39u8,
                            235u8, 211u8, 236u8, 114u8, 67u8, 85u8, 138u8, 43u8, 248u8, 134u8,
                            124u8, 73u8,
                        ],
                    )
                }
                /// The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`.
                pub fn pvf_active_vote_list(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "PvfActiveVoteList",
                        vec![],
                        [
                            196u8, 23u8, 108u8, 162u8, 29u8, 33u8, 49u8, 219u8, 127u8, 26u8, 241u8,
                            58u8, 102u8, 43u8, 156u8, 3u8, 87u8, 153u8, 195u8, 96u8, 68u8, 132u8,
                            170u8, 162u8, 18u8, 156u8, 121u8, 63u8, 53u8, 91u8, 68u8, 69u8,
                        ],
                    )
                }
                /// All parachains. Ordered ascending by `ParaId`. Parathreads are not included.
                ///
                /// Consider using the [`ParachainsCache`] type of modifying.
                pub fn parachains(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "Parachains",
                        vec![],
                        [
                            85u8, 234u8, 218u8, 69u8, 20u8, 169u8, 235u8, 6u8, 69u8, 126u8, 28u8,
                            18u8, 57u8, 93u8, 238u8, 7u8, 167u8, 221u8, 75u8, 35u8, 36u8, 4u8,
                            46u8, 55u8, 234u8, 123u8, 122u8, 173u8, 13u8, 205u8, 58u8, 226u8,
                        ],
                    )
                }
                /// The current lifecycle of a all known Para IDs.
                pub fn para_lifecycles(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::paras::ParaLifecycle,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "ParaLifecycles",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            221u8, 103u8, 112u8, 222u8, 86u8, 2u8, 172u8, 187u8, 174u8, 106u8, 4u8,
                            253u8, 35u8, 73u8, 18u8, 78u8, 25u8, 31u8, 124u8, 110u8, 81u8, 62u8,
                            215u8, 228u8, 183u8, 132u8, 138u8, 213u8, 186u8, 209u8, 191u8, 186u8,
                        ],
                    )
                }
                /// The current lifecycle of a all known Para IDs.
                pub fn para_lifecycles_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::paras::ParaLifecycle,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "ParaLifecycles",
                        Vec::new(),
                        [
                            221u8, 103u8, 112u8, 222u8, 86u8, 2u8, 172u8, 187u8, 174u8, 106u8, 4u8,
                            253u8, 35u8, 73u8, 18u8, 78u8, 25u8, 31u8, 124u8, 110u8, 81u8, 62u8,
                            215u8, 228u8, 183u8, 132u8, 138u8, 213u8, 186u8, 209u8, 191u8, 186u8,
                        ],
                    )
                }
                /// The head-data of every registered para.
                pub fn heads(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::HeadData,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "Heads",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            122u8, 38u8, 181u8, 121u8, 245u8, 100u8, 136u8, 233u8, 237u8, 248u8,
                            127u8, 2u8, 147u8, 41u8, 202u8, 242u8, 238u8, 70u8, 55u8, 200u8, 15u8,
                            106u8, 138u8, 108u8, 192u8, 61u8, 158u8, 134u8, 131u8, 142u8, 70u8,
                            3u8,
                        ],
                    )
                }
                /// The head-data of every registered para.
                pub fn heads_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::HeadData,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "Heads",
                        Vec::new(),
                        [
                            122u8, 38u8, 181u8, 121u8, 245u8, 100u8, 136u8, 233u8, 237u8, 248u8,
                            127u8, 2u8, 147u8, 41u8, 202u8, 242u8, 238u8, 70u8, 55u8, 200u8, 15u8,
                            106u8, 138u8, 108u8, 192u8, 61u8, 158u8, 134u8, 131u8, 142u8, 70u8,
                            3u8,
                        ],
                    )
                }
                /// The validation code hash of every live para.
                ///
                /// Corresponding code can be retrieved with [`CodeByHash`].
                pub fn current_code_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "CurrentCodeHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            179u8, 145u8, 45u8, 44u8, 130u8, 240u8, 50u8, 128u8, 190u8, 133u8,
                            66u8, 85u8, 47u8, 141u8, 56u8, 87u8, 131u8, 99u8, 170u8, 203u8, 8u8,
                            51u8, 123u8, 73u8, 206u8, 30u8, 173u8, 35u8, 157u8, 195u8, 104u8,
                            236u8,
                        ],
                    )
                }
                /// The validation code hash of every live para.
                ///
                /// Corresponding code can be retrieved with [`CodeByHash`].
                pub fn current_code_hash_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "CurrentCodeHash",
                        Vec::new(),
                        [
                            179u8, 145u8, 45u8, 44u8, 130u8, 240u8, 50u8, 128u8, 190u8, 133u8,
                            66u8, 85u8, 47u8, 141u8, 56u8, 87u8, 131u8, 99u8, 170u8, 203u8, 8u8,
                            51u8, 123u8, 73u8, 206u8, 30u8, 173u8, 35u8, 157u8, 195u8, 104u8,
                            236u8,
                        ],
                    )
                }
                /// Actual past code hash, indicated by the para id as well as the block number at
                /// which it became outdated.
                ///
                /// Corresponding code can be retrieved with [`CodeByHash`].
                pub fn past_code_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "PastCodeHash",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            241u8, 112u8, 128u8, 226u8, 163u8, 193u8, 77u8, 78u8, 177u8, 146u8,
                            31u8, 143u8, 44u8, 140u8, 159u8, 134u8, 221u8, 129u8, 36u8, 224u8,
                            46u8, 119u8, 245u8, 253u8, 55u8, 22u8, 137u8, 187u8, 71u8, 94u8, 88u8,
                            124u8,
                        ],
                    )
                }
                /// Actual past code hash, indicated by the para id as well as the block number at
                /// which it became outdated.
                ///
                /// Corresponding code can be retrieved with [`CodeByHash`].
                pub fn past_code_hash_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "PastCodeHash",
                        Vec::new(),
                        [
                            241u8, 112u8, 128u8, 226u8, 163u8, 193u8, 77u8, 78u8, 177u8, 146u8,
                            31u8, 143u8, 44u8, 140u8, 159u8, 134u8, 221u8, 129u8, 36u8, 224u8,
                            46u8, 119u8, 245u8, 253u8, 55u8, 22u8, 137u8, 187u8, 71u8, 94u8, 88u8,
                            124u8,
                        ],
                    )
                }
                /// Past code of parachains. The parachains themselves may not be registered
                /// anymore, but we also keep their code on-chain for the same
                /// amount of time as outdated code to keep it available for
                /// approval checkers.
                pub fn past_code_meta(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::paras::ParaPastCodeMeta<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "PastCodeMeta",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            251u8, 52u8, 126u8, 12u8, 21u8, 178u8, 151u8, 195u8, 153u8, 17u8,
                            215u8, 242u8, 118u8, 192u8, 86u8, 72u8, 36u8, 97u8, 245u8, 134u8,
                            155u8, 117u8, 85u8, 93u8, 225u8, 209u8, 63u8, 164u8, 168u8, 72u8,
                            171u8, 228u8,
                        ],
                    )
                }
                /// Past code of parachains. The parachains themselves may not be registered
                /// anymore, but we also keep their code on-chain for the same
                /// amount of time as outdated code to keep it available for
                /// approval checkers.
                pub fn past_code_meta_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::paras::ParaPastCodeMeta<
                        ::core::primitive::u32,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "PastCodeMeta",
                        Vec::new(),
                        [
                            251u8, 52u8, 126u8, 12u8, 21u8, 178u8, 151u8, 195u8, 153u8, 17u8,
                            215u8, 242u8, 118u8, 192u8, 86u8, 72u8, 36u8, 97u8, 245u8, 134u8,
                            155u8, 117u8, 85u8, 93u8, 225u8, 209u8, 63u8, 164u8, 168u8, 72u8,
                            171u8, 228u8,
                        ],
                    )
                }
                /// Which paras have past code that needs pruning and the relay-chain block at which
                /// the code was replaced. Note that this is the actual height of
                /// the included block, not the expected height at which the
                /// code upgrade would be applied, although they may be equal.
                /// This is to ensure the entire acceptance period is covered, not an offset
                /// acceptance period starting from the time at which the parachain
                /// perceives a code upgrade as having occurred. Multiple entries
                /// for a single para are permitted. Ordered ascending by block number.
                pub fn past_code_pruning(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "PastCodePruning",
                        vec![],
                        [
                            59u8, 26u8, 175u8, 129u8, 174u8, 27u8, 239u8, 77u8, 38u8, 130u8, 37u8,
                            134u8, 62u8, 28u8, 218u8, 176u8, 16u8, 137u8, 175u8, 90u8, 248u8, 44u8,
                            248u8, 172u8, 231u8, 6u8, 36u8, 190u8, 109u8, 237u8, 228u8, 135u8,
                        ],
                    )
                }
                /// The block number at which the planned code change is expected for a para.
                /// The change will be applied after the first parablock for this ID included which
                /// executes in the context of a relay chain block with a number >=
                /// `expected_at`.
                pub fn future_code_upgrades(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "FutureCodeUpgrades",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            40u8, 134u8, 185u8, 28u8, 48u8, 105u8, 152u8, 229u8, 166u8, 235u8,
                            32u8, 173u8, 64u8, 63u8, 151u8, 157u8, 190u8, 214u8, 7u8, 8u8, 6u8,
                            128u8, 21u8, 104u8, 175u8, 71u8, 130u8, 207u8, 158u8, 115u8, 172u8,
                            149u8,
                        ],
                    )
                }
                /// The block number at which the planned code change is expected for a para.
                /// The change will be applied after the first parablock for this ID included which
                /// executes in the context of a relay chain block with a number >=
                /// `expected_at`.
                pub fn future_code_upgrades_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "FutureCodeUpgrades",
                        Vec::new(),
                        [
                            40u8, 134u8, 185u8, 28u8, 48u8, 105u8, 152u8, 229u8, 166u8, 235u8,
                            32u8, 173u8, 64u8, 63u8, 151u8, 157u8, 190u8, 214u8, 7u8, 8u8, 6u8,
                            128u8, 21u8, 104u8, 175u8, 71u8, 130u8, 207u8, 158u8, 115u8, 172u8,
                            149u8,
                        ],
                    )
                }
                /// The actual future code hash of a para.
                ///
                /// Corresponding code can be retrieved with [`CodeByHash`].
                pub fn future_code_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "FutureCodeHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            252u8, 24u8, 95u8, 200u8, 207u8, 91u8, 66u8, 103u8, 54u8, 171u8, 191u8,
                            187u8, 73u8, 170u8, 132u8, 59u8, 205u8, 125u8, 68u8, 194u8, 122u8,
                            124u8, 190u8, 53u8, 241u8, 225u8, 131u8, 53u8, 44u8, 145u8, 244u8,
                            216u8,
                        ],
                    )
                }
                /// The actual future code hash of a para.
                ///
                /// Corresponding code can be retrieved with [`CodeByHash`].
                pub fn future_code_hash_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "FutureCodeHash",
                        Vec::new(),
                        [
                            252u8, 24u8, 95u8, 200u8, 207u8, 91u8, 66u8, 103u8, 54u8, 171u8, 191u8,
                            187u8, 73u8, 170u8, 132u8, 59u8, 205u8, 125u8, 68u8, 194u8, 122u8,
                            124u8, 190u8, 53u8, 241u8, 225u8, 131u8, 53u8, 44u8, 145u8, 244u8,
                            216u8,
                        ],
                    )
                }
                /// This is used by the relay-chain to communicate to a parachain a go-ahead with in
                /// the upgrade procedure.
                ///
                /// This value is absent when there are no upgrades scheduled or during the time the
                /// relay chain performs the checks. It is set at the first
                /// relay-chain block when the corresponding parachain can switch
                /// its upgrade function. As soon as the parachain's block is included, the value
                /// gets reset to `None`.
                ///
                /// NOTE that this field is used by parachains via merkle storage proofs, therefore
                /// changing the format will require migration of parachains.
                pub fn upgrade_go_ahead_signal(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::UpgradeGoAhead,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "UpgradeGoAheadSignal",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            159u8, 47u8, 247u8, 154u8, 54u8, 20u8, 235u8, 49u8, 74u8, 41u8, 65u8,
                            51u8, 52u8, 187u8, 242u8, 6u8, 84u8, 144u8, 200u8, 176u8, 222u8, 232u8,
                            70u8, 50u8, 70u8, 97u8, 61u8, 249u8, 245u8, 120u8, 98u8, 183u8,
                        ],
                    )
                }
                /// This is used by the relay-chain to communicate to a parachain a go-ahead with in
                /// the upgrade procedure.
                ///
                /// This value is absent when there are no upgrades scheduled or during the time the
                /// relay chain performs the checks. It is set at the first
                /// relay-chain block when the corresponding parachain can switch
                /// its upgrade function. As soon as the parachain's block is included, the value
                /// gets reset to `None`.
                ///
                /// NOTE that this field is used by parachains via merkle storage proofs, therefore
                /// changing the format will require migration of parachains.
                pub fn upgrade_go_ahead_signal_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::UpgradeGoAhead,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "UpgradeGoAheadSignal",
                        Vec::new(),
                        [
                            159u8, 47u8, 247u8, 154u8, 54u8, 20u8, 235u8, 49u8, 74u8, 41u8, 65u8,
                            51u8, 52u8, 187u8, 242u8, 6u8, 84u8, 144u8, 200u8, 176u8, 222u8, 232u8,
                            70u8, 50u8, 70u8, 97u8, 61u8, 249u8, 245u8, 120u8, 98u8, 183u8,
                        ],
                    )
                }
                /// This is used by the relay-chain to communicate that there are restrictions for
                /// performing an upgrade for this parachain.
                ///
                /// This may be a because the parachain waits for the upgrade cooldown to expire.
                /// Another potential use case is when we want to perform some
                /// maintenance (such as storage migration) we could restrict
                /// upgrades to make the process simpler.
                ///
                /// NOTE that this field is used by parachains via merkle storage proofs, therefore
                /// changing the format will require migration of parachains.
                pub fn upgrade_restriction_signal(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::UpgradeRestriction,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "UpgradeRestrictionSignal",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            86u8, 190u8, 41u8, 79u8, 66u8, 68u8, 46u8, 87u8, 212u8, 176u8, 255u8,
                            134u8, 104u8, 121u8, 44u8, 143u8, 248u8, 100u8, 35u8, 157u8, 91u8,
                            165u8, 118u8, 38u8, 49u8, 171u8, 158u8, 163u8, 45u8, 92u8, 44u8, 11u8,
                        ],
                    )
                }
                /// This is used by the relay-chain to communicate that there are restrictions for
                /// performing an upgrade for this parachain.
                ///
                /// This may be a because the parachain waits for the upgrade cooldown to expire.
                /// Another potential use case is when we want to perform some
                /// maintenance (such as storage migration) we could restrict
                /// upgrades to make the process simpler.
                ///
                /// NOTE that this field is used by parachains via merkle storage proofs, therefore
                /// changing the format will require migration of parachains.
                pub fn upgrade_restriction_signal_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::UpgradeRestriction,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "UpgradeRestrictionSignal",
                        Vec::new(),
                        [
                            86u8, 190u8, 41u8, 79u8, 66u8, 68u8, 46u8, 87u8, 212u8, 176u8, 255u8,
                            134u8, 104u8, 121u8, 44u8, 143u8, 248u8, 100u8, 35u8, 157u8, 91u8,
                            165u8, 118u8, 38u8, 49u8, 171u8, 158u8, 163u8, 45u8, 92u8, 44u8, 11u8,
                        ],
                    )
                }
                /// The list of parachains that are awaiting for their upgrade restriction to
                /// cooldown.
                ///
                /// Ordered ascending by block number.
                pub fn upgrade_cooldowns(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "UpgradeCooldowns",
                        vec![],
                        [
                            205u8, 236u8, 140u8, 145u8, 241u8, 245u8, 60u8, 68u8, 23u8, 175u8,
                            226u8, 174u8, 154u8, 107u8, 243u8, 197u8, 61u8, 218u8, 7u8, 24u8,
                            109u8, 221u8, 178u8, 80u8, 242u8, 123u8, 33u8, 119u8, 5u8, 241u8,
                            179u8, 13u8,
                        ],
                    )
                }
                /// The list of upcoming code upgrades. Each item is a pair of which para performs a
                /// code upgrade and at which relay-chain block it is expected at.
                ///
                /// Ordered ascending by block number.
                pub fn upcoming_upgrades(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "UpcomingUpgrades",
                        vec![],
                        [
                            165u8, 112u8, 215u8, 149u8, 125u8, 175u8, 206u8, 195u8, 214u8, 173u8,
                            0u8, 144u8, 46u8, 197u8, 55u8, 204u8, 144u8, 68u8, 158u8, 156u8, 145u8,
                            230u8, 173u8, 101u8, 255u8, 108u8, 52u8, 199u8, 142u8, 37u8, 55u8,
                            32u8,
                        ],
                    )
                }
                /// The actions to perform during the start of a specific session index.
                pub fn actions_queue(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "ActionsQueue",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            209u8, 106u8, 198u8, 228u8, 148u8, 75u8, 246u8, 248u8, 12u8, 143u8,
                            175u8, 56u8, 168u8, 243u8, 67u8, 166u8, 59u8, 92u8, 219u8, 184u8, 1u8,
                            34u8, 241u8, 66u8, 245u8, 48u8, 174u8, 41u8, 123u8, 16u8, 178u8, 161u8,
                        ],
                    )
                }
                /// The actions to perform during the start of a specific session index.
                pub fn actions_queue_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "ActionsQueue",
                        Vec::new(),
                        [
                            209u8, 106u8, 198u8, 228u8, 148u8, 75u8, 246u8, 248u8, 12u8, 143u8,
                            175u8, 56u8, 168u8, 243u8, 67u8, 166u8, 59u8, 92u8, 219u8, 184u8, 1u8,
                            34u8, 241u8, 66u8, 245u8, 48u8, 174u8, 41u8, 123u8, 16u8, 178u8, 161u8,
                        ],
                    )
                }
                /// Upcoming paras instantiation arguments.
                ///
                /// NOTE that after PVF pre-checking is enabled the para genesis arg will have it's
                /// code set to empty. Instead, the code will be saved into the
                /// storage right away via `CodeByHash`.
                pub fn upcoming_paras_genesis(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::paras::ParaGenesisArgs,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "UpcomingParasGenesis",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            134u8, 111u8, 59u8, 49u8, 28u8, 111u8, 6u8, 57u8, 109u8, 75u8, 75u8,
                            53u8, 91u8, 150u8, 86u8, 38u8, 223u8, 50u8, 107u8, 75u8, 200u8, 61u8,
                            211u8, 7u8, 105u8, 251u8, 243u8, 18u8, 220u8, 195u8, 216u8, 167u8,
                        ],
                    )
                }
                /// Upcoming paras instantiation arguments.
                ///
                /// NOTE that after PVF pre-checking is enabled the para genesis arg will have it's
                /// code set to empty. Instead, the code will be saved into the
                /// storage right away via `CodeByHash`.
                pub fn upcoming_paras_genesis_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::paras::ParaGenesisArgs,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "UpcomingParasGenesis",
                        Vec::new(),
                        [
                            134u8, 111u8, 59u8, 49u8, 28u8, 111u8, 6u8, 57u8, 109u8, 75u8, 75u8,
                            53u8, 91u8, 150u8, 86u8, 38u8, 223u8, 50u8, 107u8, 75u8, 200u8, 61u8,
                            211u8, 7u8, 105u8, 251u8, 243u8, 18u8, 220u8, 195u8, 216u8, 167u8,
                        ],
                    )
                }
                /// The number of reference on the validation code in [`CodeByHash`] storage.
                pub fn code_by_hash_refs(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "CodeByHashRefs",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            24u8, 6u8, 23u8, 50u8, 105u8, 203u8, 126u8, 161u8, 0u8, 5u8, 121u8,
                            165u8, 204u8, 106u8, 68u8, 91u8, 84u8, 126u8, 29u8, 239u8, 236u8,
                            138u8, 32u8, 237u8, 241u8, 226u8, 190u8, 233u8, 160u8, 143u8, 88u8,
                            168u8,
                        ],
                    )
                }
                /// The number of reference on the validation code in [`CodeByHash`] storage.
                pub fn code_by_hash_refs_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "CodeByHashRefs",
                        Vec::new(),
                        [
                            24u8, 6u8, 23u8, 50u8, 105u8, 203u8, 126u8, 161u8, 0u8, 5u8, 121u8,
                            165u8, 204u8, 106u8, 68u8, 91u8, 84u8, 126u8, 29u8, 239u8, 236u8,
                            138u8, 32u8, 237u8, 241u8, 226u8, 190u8, 233u8, 160u8, 143u8, 88u8,
                            168u8,
                        ],
                    )
                }
                /// Validation code stored by its hash.
                ///
                /// This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and
                /// [`PastCodeHash`].
                pub fn code_by_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::ValidationCode,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "CodeByHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            58u8, 104u8, 36u8, 34u8, 226u8, 210u8, 253u8, 90u8, 23u8, 3u8, 6u8,
                            202u8, 9u8, 44u8, 107u8, 108u8, 41u8, 149u8, 255u8, 173u8, 119u8,
                            206u8, 201u8, 180u8, 32u8, 193u8, 44u8, 232u8, 73u8, 15u8, 210u8,
                            226u8,
                        ],
                    )
                }
                /// Validation code stored by its hash.
                ///
                /// This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and
                /// [`PastCodeHash`].
                pub fn code_by_hash_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::ValidationCode,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Paras",
                        "CodeByHash",
                        Vec::new(),
                        [
                            58u8, 104u8, 36u8, 34u8, 226u8, 210u8, 253u8, 90u8, 23u8, 3u8, 6u8,
                            202u8, 9u8, 44u8, 107u8, 108u8, 41u8, 149u8, 255u8, 173u8, 119u8,
                            206u8, 201u8, 180u8, 32u8, 193u8, 44u8, 232u8, 73u8, 15u8, 210u8,
                            226u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn unsigned_priority(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Paras",
                        "UnsignedPriority",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod initializer {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceApprove {
                pub up_to: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Issue a signal to the consensus engine to forcibly act as though all parachain
                ///blocks in all relay chain blocks up to and including the given number in the
                /// current chain are valid and should be finalized.
                pub fn force_approve(
                    &self,
                    up_to: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ForceApprove> {
                    ::subxt::tx::Payload::new_static(
                        "Initializer",
                        "force_approve",
                        ForceApprove { up_to },
                        [
                            28u8, 117u8, 86u8, 182u8, 19u8, 127u8, 43u8, 17u8, 153u8, 80u8, 193u8,
                            53u8, 120u8, 41u8, 205u8, 23u8, 252u8, 148u8, 77u8, 227u8, 138u8, 35u8,
                            182u8, 122u8, 112u8, 232u8, 246u8, 69u8, 173u8, 97u8, 42u8, 103u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Whether the parachains modules have been initialized within this block.
                ///
                /// Semantically a `bool`, but this guarantees it should never hit the trie,
                /// as this is cleared in `on_finalize` and Frame optimizes `None` values to be
                /// empty values.
                ///
                /// As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being
                /// false, but one of them writes to the trie and one does not. This
                /// confusion makes `Option<()>` more suitable for the semantics of
                /// this variable.
                pub fn has_initialized(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Initializer",
                        "HasInitialized",
                        vec![],
                        [
                            251u8, 135u8, 247u8, 61u8, 139u8, 102u8, 12u8, 122u8, 227u8, 123u8,
                            11u8, 232u8, 120u8, 80u8, 81u8, 48u8, 216u8, 115u8, 159u8, 131u8,
                            133u8, 105u8, 200u8, 122u8, 114u8, 6u8, 109u8, 4u8, 164u8, 204u8,
                            214u8, 111u8,
                        ],
                    )
                }
                /// Buffered session changes along with the block number at which they should be
                /// applied.
                ///
                /// Typically this will be empty or one element long. Apart from that this item
                /// never hits the storage.
                ///
                /// However this is a `Vec` regardless to handle various edge cases that may occur
                /// at runtime upgrade boundaries or if governance intervenes.
                pub fn buffered_session_changes(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::polkadot_runtime_parachains::initializer::BufferedSessionChange,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                >{
                    ::subxt::storage::address::Address::new_static(
                        "Initializer",
                        "BufferedSessionChanges",
                        vec![],
                        [
                            176u8, 60u8, 165u8, 138u8, 99u8, 140u8, 22u8, 169u8, 121u8, 65u8,
                            203u8, 85u8, 39u8, 198u8, 91u8, 167u8, 118u8, 49u8, 129u8, 128u8,
                            171u8, 232u8, 249u8, 39u8, 6u8, 101u8, 57u8, 193u8, 85u8, 143u8, 105u8,
                            29u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod dmp {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The downward messages addressed for a certain para.
                pub fn downward_message_queues(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::InboundDownwardMessage<
                            ::core::primitive::u32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Dmp",
                        "DownwardMessageQueues",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            57u8, 115u8, 112u8, 195u8, 25u8, 43u8, 104u8, 199u8, 107u8, 238u8,
                            93u8, 129u8, 141u8, 167u8, 167u8, 9u8, 85u8, 34u8, 53u8, 117u8, 148u8,
                            246u8, 196u8, 46u8, 96u8, 114u8, 15u8, 88u8, 94u8, 40u8, 18u8, 31u8,
                        ],
                    )
                }
                /// The downward messages addressed for a certain para.
                pub fn downward_message_queues_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::InboundDownwardMessage<
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Dmp",
                        "DownwardMessageQueues",
                        Vec::new(),
                        [
                            57u8, 115u8, 112u8, 195u8, 25u8, 43u8, 104u8, 199u8, 107u8, 238u8,
                            93u8, 129u8, 141u8, 167u8, 167u8, 9u8, 85u8, 34u8, 53u8, 117u8, 148u8,
                            246u8, 196u8, 46u8, 96u8, 114u8, 15u8, 88u8, 94u8, 40u8, 18u8, 31u8,
                        ],
                    )
                }
                /// A mapping that stores the downward message queue MQC head for each para.
                ///
                /// Each link in this chain has a form:
                /// `(prev_head, B, H(M))`, where
                /// - `prev_head`: is the previous head hash or zero if none.
                /// - `B`: is the relay-chain block number in which a message was appended.
                /// - `H(M)`: is the hash of the message being appended.
                pub fn downward_message_queue_heads(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Dmp",
                        "DownwardMessageQueueHeads",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            137u8, 70u8, 108u8, 184u8, 177u8, 204u8, 17u8, 187u8, 250u8, 134u8,
                            85u8, 18u8, 239u8, 185u8, 167u8, 224u8, 70u8, 18u8, 38u8, 245u8, 176u8,
                            122u8, 254u8, 251u8, 204u8, 126u8, 34u8, 207u8, 163u8, 104u8, 103u8,
                            38u8,
                        ],
                    )
                }
                /// A mapping that stores the downward message queue MQC head for each para.
                ///
                /// Each link in this chain has a form:
                /// `(prev_head, B, H(M))`, where
                /// - `prev_head`: is the previous head hash or zero if none.
                /// - `B`: is the relay-chain block number in which a message was appended.
                /// - `H(M)`: is the hash of the message being appended.
                pub fn downward_message_queue_heads_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Dmp",
                        "DownwardMessageQueueHeads",
                        Vec::new(),
                        [
                            137u8, 70u8, 108u8, 184u8, 177u8, 204u8, 17u8, 187u8, 250u8, 134u8,
                            85u8, 18u8, 239u8, 185u8, 167u8, 224u8, 70u8, 18u8, 38u8, 245u8, 176u8,
                            122u8, 254u8, 251u8, 204u8, 126u8, 34u8, 207u8, 163u8, 104u8, 103u8,
                            38u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ump {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ServiceOverweight {
                pub index: ::core::primitive::u64,
                pub weight_limit: runtime_types::sp_weights::weight_v2::Weight,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Service a single overweight upward message.
                ///
                /// - `origin`: Must pass `ExecuteOverweightOrigin`.
                /// - `index`: The index of the overweight message to service.
                /// - `weight_limit`: The amount of weight that message execution may take.
                ///
                ///Errors:
                /// - `UnknownMessageIndex`: Message of `index` is unknown.
                /// - `WeightOverLimit`: Message execution may use greater than `weight_limit`.
                ///
                ///Events:
                /// - `OverweightServiced`: On success.
                pub fn service_overweight(
                    &self,
                    index: ::core::primitive::u64,
                    weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<ServiceOverweight> {
                    ::subxt::tx::Payload::new_static(
                        "Ump",
                        "service_overweight",
                        ServiceOverweight { index, weight_limit },
                        [
                            121u8, 236u8, 235u8, 23u8, 210u8, 238u8, 238u8, 122u8, 15u8, 86u8,
                            34u8, 119u8, 105u8, 100u8, 214u8, 236u8, 117u8, 39u8, 254u8, 235u8,
                            189u8, 15u8, 72u8, 74u8, 225u8, 134u8, 148u8, 126u8, 31u8, 203u8,
                            144u8, 106u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_parachains::ump::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Upward message is invalid XCM.
            ///\[ id \]
            pub struct InvalidFormat(pub [::core::primitive::u8; 32usize]);
            impl ::subxt::events::StaticEvent for InvalidFormat {
                const PALLET: &'static str = "Ump";
                const EVENT: &'static str = "InvalidFormat";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Upward message is unsupported version of XCM.
            ///\[ id \]
            pub struct UnsupportedVersion(pub [::core::primitive::u8; 32usize]);
            impl ::subxt::events::StaticEvent for UnsupportedVersion {
                const PALLET: &'static str = "Ump";
                const EVENT: &'static str = "UnsupportedVersion";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Upward message executed with the given outcome.
            ///\[ id, outcome \]
            pub struct ExecutedUpward(
                pub [::core::primitive::u8; 32usize],
                pub runtime_types::xcm::v3::traits::Outcome,
            );
            impl ::subxt::events::StaticEvent for ExecutedUpward {
                const PALLET: &'static str = "Ump";
                const EVENT: &'static str = "ExecutedUpward";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The weight limit for handling upward messages was reached.
            ///\[ id, remaining, required \]
            pub struct WeightExhausted(
                pub [::core::primitive::u8; 32usize],
                pub runtime_types::sp_weights::weight_v2::Weight,
                pub runtime_types::sp_weights::weight_v2::Weight,
            );
            impl ::subxt::events::StaticEvent for WeightExhausted {
                const PALLET: &'static str = "Ump";
                const EVENT: &'static str = "WeightExhausted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some upward messages have been received and will be processed.
            ///\[ para, count, size \]
            pub struct UpwardMessagesReceived(
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub ::core::primitive::u32,
                pub ::core::primitive::u32,
            );
            impl ::subxt::events::StaticEvent for UpwardMessagesReceived {
                const PALLET: &'static str = "Ump";
                const EVENT: &'static str = "UpwardMessagesReceived";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The weight budget was exceeded for an individual upward message.
            ///
            ///This message can be later dispatched manually using `service_overweight`
            /// dispatchable using the assigned `overweight_index`.
            ///
            ///\[ para, id, overweight_index, required \]
            pub struct OverweightEnqueued(
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub [::core::primitive::u8; 32usize],
                pub ::core::primitive::u64,
                pub runtime_types::sp_weights::weight_v2::Weight,
            );
            impl ::subxt::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "Ump";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Upward message from the overweight queue was executed with the given actual weight
            ///used.
            ///
            ///\[ overweight_index, used \]
            pub struct OverweightServiced(
                pub ::core::primitive::u64,
                pub runtime_types::sp_weights::weight_v2::Weight,
            );
            impl ::subxt::events::StaticEvent for OverweightServiced {
                const PALLET: &'static str = "Ump";
                const EVENT: &'static str = "OverweightServiced";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The messages waiting to be handled by the relay-chain originating from a certain
                /// parachain.
                ///
                /// Note that some upward messages might have been already processed by the
                /// inclusion logic. E.g. channel management messages.
                ///
                /// The messages are processed in FIFO order.
                pub fn relay_dispatch_queues(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "RelayDispatchQueues",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            237u8, 72u8, 167u8, 6u8, 67u8, 106u8, 186u8, 191u8, 160u8, 9u8, 62u8,
                            102u8, 229u8, 164u8, 100u8, 24u8, 202u8, 109u8, 90u8, 24u8, 192u8,
                            233u8, 26u8, 239u8, 23u8, 127u8, 77u8, 191u8, 144u8, 14u8, 3u8, 141u8,
                        ],
                    )
                }
                /// The messages waiting to be handled by the relay-chain originating from a certain
                /// parachain.
                ///
                /// Note that some upward messages might have been already processed by the
                /// inclusion logic. E.g. channel management messages.
                ///
                /// The messages are processed in FIFO order.
                pub fn relay_dispatch_queues_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "RelayDispatchQueues",
                        Vec::new(),
                        [
                            237u8, 72u8, 167u8, 6u8, 67u8, 106u8, 186u8, 191u8, 160u8, 9u8, 62u8,
                            102u8, 229u8, 164u8, 100u8, 24u8, 202u8, 109u8, 90u8, 24u8, 192u8,
                            233u8, 26u8, 239u8, 23u8, 127u8, 77u8, 191u8, 144u8, 14u8, 3u8, 141u8,
                        ],
                    )
                }
                /// Size of the dispatch queues. Caches sizes of the queues in `RelayDispatchQueue`.
                ///
                /// First item in the tuple is the count of messages and second
                /// is the total length (in bytes) of the message payloads.
                ///
                /// Note that this is an auxiliary mapping: it's possible to tell the byte size and
                /// the number of messages only looking at `RelayDispatchQueues`.
                /// This mapping is separate to avoid the cost of loading the whole
                /// message queue if only the total size and count are required.
                ///
                /// Invariant:
                /// - The set of keys should exactly match the set of keys of `RelayDispatchQueues`.
                pub fn relay_dispatch_queue_size(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "RelayDispatchQueueSize",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            243u8, 120u8, 70u8, 2u8, 208u8, 105u8, 180u8, 25u8, 86u8, 219u8, 151u8,
                            227u8, 233u8, 53u8, 151u8, 29u8, 231u8, 40u8, 84u8, 163u8, 71u8, 254u8,
                            19u8, 47u8, 174u8, 63u8, 200u8, 173u8, 86u8, 199u8, 207u8, 138u8,
                        ],
                    )
                }
                /// Size of the dispatch queues. Caches sizes of the queues in `RelayDispatchQueue`.
                ///
                /// First item in the tuple is the count of messages and second
                /// is the total length (in bytes) of the message payloads.
                ///
                /// Note that this is an auxiliary mapping: it's possible to tell the byte size and
                /// the number of messages only looking at `RelayDispatchQueues`.
                /// This mapping is separate to avoid the cost of loading the whole
                /// message queue if only the total size and count are required.
                ///
                /// Invariant:
                /// - The set of keys should exactly match the set of keys of `RelayDispatchQueues`.
                pub fn relay_dispatch_queue_size_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "RelayDispatchQueueSize",
                        Vec::new(),
                        [
                            243u8, 120u8, 70u8, 2u8, 208u8, 105u8, 180u8, 25u8, 86u8, 219u8, 151u8,
                            227u8, 233u8, 53u8, 151u8, 29u8, 231u8, 40u8, 84u8, 163u8, 71u8, 254u8,
                            19u8, 47u8, 174u8, 63u8, 200u8, 173u8, 86u8, 199u8, 207u8, 138u8,
                        ],
                    )
                }
                /// The ordered list of `ParaId`s that have a `RelayDispatchQueue` entry.
                ///
                /// Invariant:
                /// - The set of items from this vector should be exactly the set of the keys in
                ///   `RelayDispatchQueues` and `RelayDispatchQueueSize`.
                pub fn needs_dispatch(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "NeedsDispatch",
                        vec![],
                        [
                            176u8, 94u8, 152u8, 112u8, 46u8, 124u8, 89u8, 29u8, 92u8, 104u8, 192u8,
                            58u8, 59u8, 186u8, 81u8, 150u8, 157u8, 61u8, 235u8, 182u8, 222u8,
                            127u8, 109u8, 11u8, 104u8, 175u8, 141u8, 219u8, 15u8, 152u8, 255u8,
                            40u8,
                        ],
                    )
                }
                /// This is the para that gets will get dispatched first during the next upward
                /// dispatchable queue execution round.
                ///
                /// Invariant:
                /// - If `Some(para)`, then `para` must be present in `NeedsDispatch`.
                pub fn next_dispatch_round_start_with(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::Id,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "NextDispatchRoundStartWith",
                        vec![],
                        [
                            157u8, 221u8, 6u8, 175u8, 61u8, 99u8, 250u8, 30u8, 177u8, 53u8, 37u8,
                            191u8, 138u8, 65u8, 251u8, 216u8, 37u8, 84u8, 246u8, 76u8, 8u8, 29u8,
                            18u8, 253u8, 143u8, 75u8, 129u8, 141u8, 48u8, 178u8, 135u8, 197u8,
                        ],
                    )
                }
                /// The messages that exceeded max individual message weight budget.
                ///
                /// These messages stay there until manually dispatched.
                pub fn overweight(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "Overweight",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            49u8, 4u8, 221u8, 218u8, 249u8, 183u8, 49u8, 198u8, 48u8, 42u8, 110u8,
                            67u8, 47u8, 50u8, 181u8, 141u8, 184u8, 47u8, 114u8, 3u8, 232u8, 132u8,
                            32u8, 201u8, 13u8, 213u8, 175u8, 236u8, 111u8, 87u8, 146u8, 212u8,
                        ],
                    )
                }
                /// The messages that exceeded max individual message weight budget.
                ///
                /// These messages stay there until manually dispatched.
                pub fn overweight_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "Overweight",
                        Vec::new(),
                        [
                            49u8, 4u8, 221u8, 218u8, 249u8, 183u8, 49u8, 198u8, 48u8, 42u8, 110u8,
                            67u8, 47u8, 50u8, 181u8, 141u8, 184u8, 47u8, 114u8, 3u8, 232u8, 132u8,
                            32u8, 201u8, 13u8, 213u8, 175u8, 236u8, 111u8, 87u8, 146u8, 212u8,
                        ],
                    )
                }
                ///Counter for the related counted storage map
                pub fn counter_for_overweight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "CounterForOverweight",
                        vec![],
                        [
                            148u8, 226u8, 248u8, 107u8, 165u8, 97u8, 218u8, 160u8, 127u8, 48u8,
                            185u8, 251u8, 35u8, 137u8, 119u8, 251u8, 151u8, 167u8, 189u8, 66u8,
                            80u8, 74u8, 134u8, 129u8, 222u8, 180u8, 51u8, 182u8, 50u8, 110u8, 10u8,
                            43u8,
                        ],
                    )
                }
                /// The number of overweight messages ever recorded in `Overweight` (and thus the
                /// lowest free index).
                pub fn overweight_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ump",
                        "OverweightCount",
                        vec![],
                        [
                            102u8, 180u8, 196u8, 148u8, 115u8, 62u8, 46u8, 238u8, 97u8, 116u8,
                            117u8, 42u8, 14u8, 5u8, 72u8, 237u8, 230u8, 46u8, 150u8, 126u8, 89u8,
                            64u8, 233u8, 166u8, 180u8, 137u8, 52u8, 233u8, 252u8, 255u8, 36u8,
                            20u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod hrmp {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct HrmpInitOpenChannel {
                pub recipient: runtime_types::polkadot_parachain::primitives::Id,
                pub proposed_max_capacity: ::core::primitive::u32,
                pub proposed_max_message_size: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct HrmpAcceptOpenChannel {
                pub sender: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct HrmpCloseChannel {
                pub channel_id: runtime_types::polkadot_parachain::primitives::HrmpChannelId,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceCleanHrmp {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
                pub inbound: ::core::primitive::u32,
                pub outbound: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceProcessHrmpOpen {
                pub channels: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceProcessHrmpClose {
                pub channels: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct HrmpCancelOpenRequest {
                pub channel_id: runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                pub open_requests: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceOpenHrmpChannel {
                pub sender: runtime_types::polkadot_parachain::primitives::Id,
                pub recipient: runtime_types::polkadot_parachain::primitives::Id,
                pub max_capacity: ::core::primitive::u32,
                pub max_message_size: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Initiate opening a channel from a parachain to a given recipient with given
                /// channel parameters.
                ///
                /// - `proposed_max_capacity` - specifies how many messages can be in the channel at
                ///   once.
                /// - `proposed_max_message_size` - specifies the maximum size of the messages.
                ///
                ///These numbers are a subject to the relay-chain configuration limits.
                ///
                ///The channel can be opened only after the recipient confirms it and only on a
                /// session change.
                pub fn hrmp_init_open_channel(
                    &self,
                    recipient: runtime_types::polkadot_parachain::primitives::Id,
                    proposed_max_capacity: ::core::primitive::u32,
                    proposed_max_message_size: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<HrmpInitOpenChannel> {
                    ::subxt::tx::Payload::new_static(
                        "Hrmp",
                        "hrmp_init_open_channel",
                        HrmpInitOpenChannel {
                            recipient,
                            proposed_max_capacity,
                            proposed_max_message_size,
                        },
                        [
                            170u8, 72u8, 58u8, 42u8, 38u8, 11u8, 110u8, 229u8, 239u8, 136u8, 99u8,
                            230u8, 223u8, 225u8, 126u8, 61u8, 234u8, 185u8, 101u8, 156u8, 40u8,
                            102u8, 253u8, 123u8, 77u8, 204u8, 217u8, 86u8, 162u8, 66u8, 25u8,
                            214u8,
                        ],
                    )
                }
                ///Accept a pending open channel request from the given sender.
                ///
                ///The channel will be opened only on the next session boundary.
                pub fn hrmp_accept_open_channel(
                    &self,
                    sender: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<HrmpAcceptOpenChannel> {
                    ::subxt::tx::Payload::new_static(
                        "Hrmp",
                        "hrmp_accept_open_channel",
                        HrmpAcceptOpenChannel { sender },
                        [
                            75u8, 111u8, 52u8, 164u8, 204u8, 100u8, 204u8, 111u8, 127u8, 84u8,
                            60u8, 136u8, 95u8, 255u8, 48u8, 157u8, 189u8, 76u8, 33u8, 177u8, 223u8,
                            27u8, 74u8, 221u8, 139u8, 1u8, 12u8, 128u8, 242u8, 7u8, 3u8, 53u8,
                        ],
                    )
                }
                ///Initiate unilateral closing of a channel. The origin must be either the sender
                /// or the recipient in the channel being closed.
                ///
                ///The closure can only happen on a session change.
                pub fn hrmp_close_channel(
                    &self,
                    channel_id: runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                ) -> ::subxt::tx::Payload<HrmpCloseChannel> {
                    ::subxt::tx::Payload::new_static(
                        "Hrmp",
                        "hrmp_close_channel",
                        HrmpCloseChannel { channel_id },
                        [
                            11u8, 202u8, 76u8, 107u8, 213u8, 21u8, 191u8, 190u8, 40u8, 229u8, 60u8,
                            115u8, 232u8, 136u8, 41u8, 114u8, 21u8, 19u8, 238u8, 236u8, 202u8,
                            56u8, 212u8, 232u8, 34u8, 84u8, 27u8, 70u8, 176u8, 252u8, 218u8, 52u8,
                        ],
                    )
                }
                ///This extrinsic triggers the cleanup of all the HRMP storage items that
                ///a para may have. Normally this happens once per session, but this allows
                ///you to trigger the cleanup immediately for a specific parachain.
                ///
                ///Origin must be Root.
                ///
                ///Number of inbound and outbound channels for `para` must be provided as witness
                /// data of weighing.
                pub fn force_clean_hrmp(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                    inbound: ::core::primitive::u32,
                    outbound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ForceCleanHrmp> {
                    ::subxt::tx::Payload::new_static(
                        "Hrmp",
                        "force_clean_hrmp",
                        ForceCleanHrmp { para, inbound, outbound },
                        [
                            171u8, 109u8, 147u8, 49u8, 163u8, 107u8, 36u8, 169u8, 117u8, 193u8,
                            231u8, 114u8, 207u8, 38u8, 240u8, 195u8, 155u8, 222u8, 244u8, 142u8,
                            93u8, 79u8, 111u8, 43u8, 5u8, 33u8, 190u8, 30u8, 200u8, 225u8, 173u8,
                            64u8,
                        ],
                    )
                }
                ///Force process HRMP open channel requests.
                ///
                ///If there are pending HRMP open channel requests, you can use this
                ///function process all of those requests immediately.
                ///
                ///Total number of opening channels must be provided as witness data of weighing.
                pub fn force_process_hrmp_open(
                    &self,
                    channels: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ForceProcessHrmpOpen> {
                    ::subxt::tx::Payload::new_static(
                        "Hrmp",
                        "force_process_hrmp_open",
                        ForceProcessHrmpOpen { channels },
                        [
                            231u8, 80u8, 233u8, 15u8, 131u8, 167u8, 223u8, 28u8, 182u8, 185u8,
                            213u8, 24u8, 154u8, 160u8, 68u8, 94u8, 160u8, 59u8, 78u8, 85u8, 85u8,
                            149u8, 130u8, 131u8, 9u8, 162u8, 169u8, 119u8, 165u8, 44u8, 150u8,
                            50u8,
                        ],
                    )
                }
                ///Force process HRMP close channel requests.
                ///
                ///If there are pending HRMP close channel requests, you can use this
                ///function process all of those requests immediately.
                ///
                ///Total number of closing channels must be provided as witness data of weighing.
                pub fn force_process_hrmp_close(
                    &self,
                    channels: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ForceProcessHrmpClose> {
                    ::subxt::tx::Payload::new_static(
                        "Hrmp",
                        "force_process_hrmp_close",
                        ForceProcessHrmpClose { channels },
                        [
                            248u8, 138u8, 30u8, 151u8, 53u8, 16u8, 44u8, 116u8, 51u8, 194u8, 173u8,
                            252u8, 143u8, 53u8, 184u8, 129u8, 80u8, 80u8, 25u8, 118u8, 47u8, 183u8,
                            249u8, 130u8, 8u8, 221u8, 56u8, 106u8, 182u8, 114u8, 186u8, 161u8,
                        ],
                    )
                }
                ///This cancels a pending open channel request. It can be canceled by either of the
                /// sender or the recipient for that request. The origin must be
                /// either of those.
                ///
                ///The cancellation happens immediately. It is not possible to cancel the request
                /// if it is already accepted.
                ///
                ///Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be
                /// provided as witness data.
                pub fn hrmp_cancel_open_request(
                    &self,
                    channel_id: runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                    open_requests: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<HrmpCancelOpenRequest> {
                    ::subxt::tx::Payload::new_static(
                        "Hrmp",
                        "hrmp_cancel_open_request",
                        HrmpCancelOpenRequest { channel_id, open_requests },
                        [
                            136u8, 217u8, 56u8, 138u8, 227u8, 37u8, 120u8, 83u8, 116u8, 228u8,
                            42u8, 111u8, 206u8, 210u8, 177u8, 235u8, 225u8, 98u8, 172u8, 184u8,
                            87u8, 65u8, 77u8, 129u8, 7u8, 0u8, 232u8, 139u8, 134u8, 1u8, 59u8,
                            19u8,
                        ],
                    )
                }
                ///Open a channel from a `sender` to a `recipient` `ParaId` using the Root origin.
                /// Although opened by Root, the `max_capacity` and
                /// `max_message_size` are still subject to the Relay
                /// Chain's configured limits.
                ///
                ///Expected use is when one of the `ParaId`s involved in the channel is governed by
                /// the Relay Chain, e.g. a common good parachain.
                pub fn force_open_hrmp_channel(
                    &self,
                    sender: runtime_types::polkadot_parachain::primitives::Id,
                    recipient: runtime_types::polkadot_parachain::primitives::Id,
                    max_capacity: ::core::primitive::u32,
                    max_message_size: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ForceOpenHrmpChannel> {
                    ::subxt::tx::Payload::new_static(
                        "Hrmp",
                        "force_open_hrmp_channel",
                        ForceOpenHrmpChannel { sender, recipient, max_capacity, max_message_size },
                        [
                            145u8, 23u8, 215u8, 75u8, 94u8, 119u8, 205u8, 222u8, 186u8, 149u8,
                            11u8, 172u8, 211u8, 158u8, 247u8, 21u8, 125u8, 144u8, 91u8, 157u8,
                            94u8, 143u8, 188u8, 20u8, 98u8, 136u8, 165u8, 70u8, 155u8, 14u8, 92u8,
                            58u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_parachains::hrmp::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Open HRMP channel requested.
            ///`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`
            pub struct OpenChannelRequested(
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub ::core::primitive::u32,
                pub ::core::primitive::u32,
            );
            impl ::subxt::events::StaticEvent for OpenChannelRequested {
                const PALLET: &'static str = "Hrmp";
                const EVENT: &'static str = "OpenChannelRequested";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An HRMP channel request sent by the receiver was canceled by either party.
            ///`[by_parachain, channel_id]`
            pub struct OpenChannelCanceled(
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub runtime_types::polkadot_parachain::primitives::HrmpChannelId,
            );
            impl ::subxt::events::StaticEvent for OpenChannelCanceled {
                const PALLET: &'static str = "Hrmp";
                const EVENT: &'static str = "OpenChannelCanceled";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Open HRMP channel accepted. `[sender, recipient]`
            pub struct OpenChannelAccepted(
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub runtime_types::polkadot_parachain::primitives::Id,
            );
            impl ::subxt::events::StaticEvent for OpenChannelAccepted {
                const PALLET: &'static str = "Hrmp";
                const EVENT: &'static str = "OpenChannelAccepted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///HRMP channel closed. `[by_parachain, channel_id]`
            pub struct ChannelClosed(
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub runtime_types::polkadot_parachain::primitives::HrmpChannelId,
            );
            impl ::subxt::events::StaticEvent for ChannelClosed {
                const PALLET: &'static str = "Hrmp";
                const EVENT: &'static str = "ChannelClosed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An HRMP channel was opened via Root origin.
            ///`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`
            pub struct HrmpChannelForceOpened(
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub runtime_types::polkadot_parachain::primitives::Id,
                pub ::core::primitive::u32,
                pub ::core::primitive::u32,
            );
            impl ::subxt::events::StaticEvent for HrmpChannelForceOpened {
                const PALLET: &'static str = "Hrmp";
                const EVENT: &'static str = "HrmpChannelForceOpened";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The set of pending HRMP open channel requests.
                ///
                /// The set is accompanied by a list for iteration.
                ///
                /// Invariant:
                /// - There are no channels that exists in list but not in the set and vice versa.
                pub fn hrmp_open_channel_requests(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::hrmp::HrmpOpenChannelRequest,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpOpenChannelRequests",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            226u8, 115u8, 207u8, 13u8, 5u8, 81u8, 64u8, 161u8, 246u8, 4u8, 17u8,
                            207u8, 210u8, 109u8, 91u8, 54u8, 28u8, 53u8, 35u8, 74u8, 62u8, 91u8,
                            196u8, 236u8, 18u8, 70u8, 13u8, 86u8, 235u8, 74u8, 181u8, 169u8,
                        ],
                    )
                }
                /// The set of pending HRMP open channel requests.
                ///
                /// The set is accompanied by a list for iteration.
                ///
                /// Invariant:
                /// - There are no channels that exists in list but not in the set and vice versa.
                pub fn hrmp_open_channel_requests_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::hrmp::HrmpOpenChannelRequest,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpOpenChannelRequests",
                        Vec::new(),
                        [
                            226u8, 115u8, 207u8, 13u8, 5u8, 81u8, 64u8, 161u8, 246u8, 4u8, 17u8,
                            207u8, 210u8, 109u8, 91u8, 54u8, 28u8, 53u8, 35u8, 74u8, 62u8, 91u8,
                            196u8, 236u8, 18u8, 70u8, 13u8, 86u8, 235u8, 74u8, 181u8, 169u8,
                        ],
                    )
                }
                pub fn hrmp_open_channel_requests_list(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::HrmpChannelId>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpOpenChannelRequestsList",
                        vec![],
                        [
                            187u8, 157u8, 7u8, 183u8, 88u8, 215u8, 128u8, 174u8, 244u8, 130u8,
                            137u8, 13u8, 110u8, 126u8, 181u8, 165u8, 142u8, 69u8, 75u8, 37u8, 37u8,
                            149u8, 46u8, 100u8, 140u8, 69u8, 234u8, 171u8, 103u8, 136u8, 223u8,
                            193u8,
                        ],
                    )
                }
                /// This mapping tracks how many open channel requests are initiated by a given
                /// sender para. Invariant: `HrmpOpenChannelRequests` should contain
                /// the same number of items that has `(X, _)` as the number of
                /// `HrmpOpenChannelRequestCount` for `X`.
                pub fn hrmp_open_channel_request_count(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpOpenChannelRequestCount",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            156u8, 87u8, 232u8, 34u8, 30u8, 237u8, 159u8, 78u8, 212u8, 138u8,
                            140u8, 206u8, 191u8, 117u8, 209u8, 218u8, 251u8, 146u8, 217u8, 56u8,
                            93u8, 15u8, 131u8, 64u8, 126u8, 253u8, 126u8, 1u8, 12u8, 242u8, 176u8,
                            217u8,
                        ],
                    )
                }
                /// This mapping tracks how many open channel requests are initiated by a given
                /// sender para. Invariant: `HrmpOpenChannelRequests` should contain
                /// the same number of items that has `(X, _)` as the number of
                /// `HrmpOpenChannelRequestCount` for `X`.
                pub fn hrmp_open_channel_request_count_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpOpenChannelRequestCount",
                        Vec::new(),
                        [
                            156u8, 87u8, 232u8, 34u8, 30u8, 237u8, 159u8, 78u8, 212u8, 138u8,
                            140u8, 206u8, 191u8, 117u8, 209u8, 218u8, 251u8, 146u8, 217u8, 56u8,
                            93u8, 15u8, 131u8, 64u8, 126u8, 253u8, 126u8, 1u8, 12u8, 242u8, 176u8,
                            217u8,
                        ],
                    )
                }
                /// This mapping tracks how many open channel requests were accepted by a given
                /// recipient para. Invariant: `HrmpOpenChannelRequests` should
                /// contain the same number of items `(_, X)` with `confirmed` set
                /// to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`.
                pub fn hrmp_accepted_channel_request_count(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpAcceptedChannelRequestCount",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            93u8, 183u8, 17u8, 253u8, 119u8, 213u8, 106u8, 205u8, 17u8, 10u8,
                            230u8, 242u8, 5u8, 223u8, 49u8, 235u8, 41u8, 221u8, 80u8, 51u8, 153u8,
                            62u8, 191u8, 3u8, 120u8, 224u8, 46u8, 164u8, 161u8, 6u8, 15u8, 15u8,
                        ],
                    )
                }
                /// This mapping tracks how many open channel requests were accepted by a given
                /// recipient para. Invariant: `HrmpOpenChannelRequests` should
                /// contain the same number of items `(_, X)` with `confirmed` set
                /// to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`.
                pub fn hrmp_accepted_channel_request_count_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpAcceptedChannelRequestCount",
                        Vec::new(),
                        [
                            93u8, 183u8, 17u8, 253u8, 119u8, 213u8, 106u8, 205u8, 17u8, 10u8,
                            230u8, 242u8, 5u8, 223u8, 49u8, 235u8, 41u8, 221u8, 80u8, 51u8, 153u8,
                            62u8, 191u8, 3u8, 120u8, 224u8, 46u8, 164u8, 161u8, 6u8, 15u8, 15u8,
                        ],
                    )
                }
                /// A set of pending HRMP close channel requests that are going to be closed during
                /// the session change. Used for checking if a given channel is
                /// registered for closure.
                ///
                /// The set is accompanied by a list for iteration.
                ///
                /// Invariant:
                /// - There are no channels that exists in list but not in the set and vice versa.
                pub fn hrmp_close_channel_requests(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpCloseChannelRequests",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            125u8, 131u8, 1u8, 231u8, 19u8, 207u8, 229u8, 72u8, 150u8, 100u8,
                            165u8, 215u8, 241u8, 165u8, 91u8, 35u8, 230u8, 148u8, 127u8, 249u8,
                            128u8, 221u8, 167u8, 172u8, 67u8, 30u8, 177u8, 176u8, 134u8, 223u8,
                            39u8, 87u8,
                        ],
                    )
                }
                /// A set of pending HRMP close channel requests that are going to be closed during
                /// the session change. Used for checking if a given channel is
                /// registered for closure.
                ///
                /// The set is accompanied by a list for iteration.
                ///
                /// Invariant:
                /// - There are no channels that exists in list but not in the set and vice versa.
                pub fn hrmp_close_channel_requests_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpCloseChannelRequests",
                        Vec::new(),
                        [
                            125u8, 131u8, 1u8, 231u8, 19u8, 207u8, 229u8, 72u8, 150u8, 100u8,
                            165u8, 215u8, 241u8, 165u8, 91u8, 35u8, 230u8, 148u8, 127u8, 249u8,
                            128u8, 221u8, 167u8, 172u8, 67u8, 30u8, 177u8, 176u8, 134u8, 223u8,
                            39u8, 87u8,
                        ],
                    )
                }
                pub fn hrmp_close_channel_requests_list(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::HrmpChannelId>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpCloseChannelRequestsList",
                        vec![],
                        [
                            192u8, 165u8, 71u8, 70u8, 211u8, 233u8, 155u8, 146u8, 160u8, 58u8,
                            103u8, 64u8, 123u8, 232u8, 157u8, 71u8, 199u8, 223u8, 158u8, 5u8,
                            164u8, 93u8, 231u8, 153u8, 1u8, 63u8, 155u8, 4u8, 138u8, 89u8, 178u8,
                            116u8,
                        ],
                    )
                }
                /// The HRMP watermark associated with each para.
                /// Invariant:
                /// - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)`
                ///   within a session.
                pub fn hrmp_watermarks(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpWatermarks",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            231u8, 195u8, 117u8, 35u8, 235u8, 18u8, 80u8, 28u8, 212u8, 37u8, 253u8,
                            204u8, 71u8, 217u8, 12u8, 35u8, 219u8, 250u8, 45u8, 83u8, 102u8, 236u8,
                            186u8, 149u8, 54u8, 31u8, 83u8, 19u8, 129u8, 51u8, 103u8, 155u8,
                        ],
                    )
                }
                /// The HRMP watermark associated with each para.
                /// Invariant:
                /// - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)`
                ///   within a session.
                pub fn hrmp_watermarks_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpWatermarks",
                        Vec::new(),
                        [
                            231u8, 195u8, 117u8, 35u8, 235u8, 18u8, 80u8, 28u8, 212u8, 37u8, 253u8,
                            204u8, 71u8, 217u8, 12u8, 35u8, 219u8, 250u8, 45u8, 83u8, 102u8, 236u8,
                            186u8, 149u8, 54u8, 31u8, 83u8, 19u8, 129u8, 51u8, 103u8, 155u8,
                        ],
                    )
                }
                /// HRMP channel data associated with each para.
                /// Invariant:
                /// - each participant in the channel should satisfy `Paras::is_valid_para(P)`
                ///   within a session.
                pub fn hrmp_channels(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::hrmp::HrmpChannel,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpChannels",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            224u8, 252u8, 187u8, 122u8, 179u8, 193u8, 227u8, 250u8, 255u8, 216u8,
                            107u8, 26u8, 224u8, 16u8, 178u8, 111u8, 77u8, 237u8, 177u8, 148u8,
                            22u8, 17u8, 213u8, 99u8, 194u8, 140u8, 217u8, 211u8, 151u8, 51u8, 66u8,
                            169u8,
                        ],
                    )
                }
                /// HRMP channel data associated with each para.
                /// Invariant:
                /// - each participant in the channel should satisfy `Paras::is_valid_para(P)`
                ///   within a session.
                pub fn hrmp_channels_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::hrmp::HrmpChannel,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpChannels",
                        Vec::new(),
                        [
                            224u8, 252u8, 187u8, 122u8, 179u8, 193u8, 227u8, 250u8, 255u8, 216u8,
                            107u8, 26u8, 224u8, 16u8, 178u8, 111u8, 77u8, 237u8, 177u8, 148u8,
                            22u8, 17u8, 213u8, 99u8, 194u8, 140u8, 217u8, 211u8, 151u8, 51u8, 66u8,
                            169u8,
                        ],
                    )
                }
                /// Ingress/egress indexes allow to find all the senders and receivers given the
                /// opposite side. I.e.
                ///
                /// (a) ingress index allows to find all the senders for a given recipient.
                /// (b) egress index allows to find all the recipients for a given sender.
                ///
                /// Invariants:
                /// - for each ingress index entry for `P` each item `I` in the index should present
                ///   in `HrmpChannels` as `(I, P)`.
                /// - for each egress index entry for `P` each item `E` in the index should present
                ///   in `HrmpChannels` as `(P, E)`.
                /// - there should be no other dangling channels in `HrmpChannels`.
                /// - the vectors are sorted.
                pub fn hrmp_ingress_channels_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpIngressChannelsIndex",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            58u8, 193u8, 212u8, 225u8, 48u8, 195u8, 119u8, 15u8, 61u8, 166u8,
                            249u8, 1u8, 118u8, 67u8, 253u8, 40u8, 58u8, 220u8, 124u8, 152u8, 4u8,
                            16u8, 155u8, 151u8, 195u8, 15u8, 205u8, 175u8, 234u8, 0u8, 101u8, 99u8,
                        ],
                    )
                }
                /// Ingress/egress indexes allow to find all the senders and receivers given the
                /// opposite side. I.e.
                ///
                /// (a) ingress index allows to find all the senders for a given recipient.
                /// (b) egress index allows to find all the recipients for a given sender.
                ///
                /// Invariants:
                /// - for each ingress index entry for `P` each item `I` in the index should present
                ///   in `HrmpChannels` as `(I, P)`.
                /// - for each egress index entry for `P` each item `E` in the index should present
                ///   in `HrmpChannels` as `(P, E)`.
                /// - there should be no other dangling channels in `HrmpChannels`.
                /// - the vectors are sorted.
                pub fn hrmp_ingress_channels_index_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpIngressChannelsIndex",
                        Vec::new(),
                        [
                            58u8, 193u8, 212u8, 225u8, 48u8, 195u8, 119u8, 15u8, 61u8, 166u8,
                            249u8, 1u8, 118u8, 67u8, 253u8, 40u8, 58u8, 220u8, 124u8, 152u8, 4u8,
                            16u8, 155u8, 151u8, 195u8, 15u8, 205u8, 175u8, 234u8, 0u8, 101u8, 99u8,
                        ],
                    )
                }
                pub fn hrmp_egress_channels_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpEgressChannelsIndex",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            9u8, 242u8, 41u8, 234u8, 85u8, 193u8, 232u8, 245u8, 254u8, 26u8, 240u8,
                            113u8, 184u8, 151u8, 150u8, 44u8, 43u8, 98u8, 84u8, 209u8, 145u8,
                            175u8, 128u8, 68u8, 183u8, 112u8, 171u8, 236u8, 211u8, 32u8, 177u8,
                            88u8,
                        ],
                    )
                }
                pub fn hrmp_egress_channels_index_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpEgressChannelsIndex",
                        Vec::new(),
                        [
                            9u8, 242u8, 41u8, 234u8, 85u8, 193u8, 232u8, 245u8, 254u8, 26u8, 240u8,
                            113u8, 184u8, 151u8, 150u8, 44u8, 43u8, 98u8, 84u8, 209u8, 145u8,
                            175u8, 128u8, 68u8, 183u8, 112u8, 171u8, 236u8, 211u8, 32u8, 177u8,
                            88u8,
                        ],
                    )
                }
                /// Storage for the messages for each channel.
                /// Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is
                /// `None`.
                pub fn hrmp_channel_contents(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::InboundHrmpMessage<
                            ::core::primitive::u32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpChannelContents",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            114u8, 86u8, 172u8, 88u8, 118u8, 243u8, 133u8, 147u8, 108u8, 60u8,
                            128u8, 235u8, 45u8, 80u8, 225u8, 130u8, 89u8, 50u8, 40u8, 118u8, 63u8,
                            3u8, 83u8, 222u8, 75u8, 167u8, 148u8, 150u8, 193u8, 90u8, 196u8, 225u8,
                        ],
                    )
                }
                /// Storage for the messages for each channel.
                /// Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is
                /// `None`.
                pub fn hrmp_channel_contents_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::InboundHrmpMessage<
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpChannelContents",
                        Vec::new(),
                        [
                            114u8, 86u8, 172u8, 88u8, 118u8, 243u8, 133u8, 147u8, 108u8, 60u8,
                            128u8, 235u8, 45u8, 80u8, 225u8, 130u8, 89u8, 50u8, 40u8, 118u8, 63u8,
                            3u8, 83u8, 222u8, 75u8, 167u8, 148u8, 150u8, 193u8, 90u8, 196u8, 225u8,
                        ],
                    )
                }
                /// Maintains a mapping that can be used to answer the question: What paras sent a
                /// message at the given block number for a given receiver.
                /// Invariants:
                /// - The inner `Vec<ParaId>` is never empty.
                /// - The inner `Vec<ParaId>` cannot store two same `ParaId`.
                /// - The outer vector is sorted ascending by block number and cannot store two
                ///   items with the same block number.
                pub fn hrmp_channel_digests(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        ::core::primitive::u32,
                        ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpChannelDigests",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            205u8, 18u8, 60u8, 54u8, 123u8, 40u8, 160u8, 149u8, 174u8, 45u8, 135u8,
                            213u8, 83u8, 44u8, 97u8, 243u8, 47u8, 200u8, 156u8, 131u8, 15u8, 63u8,
                            170u8, 206u8, 101u8, 17u8, 244u8, 132u8, 73u8, 133u8, 79u8, 104u8,
                        ],
                    )
                }
                /// Maintains a mapping that can be used to answer the question: What paras sent a
                /// message at the given block number for a given receiver.
                /// Invariants:
                /// - The inner `Vec<ParaId>` is never empty.
                /// - The inner `Vec<ParaId>` cannot store two same `ParaId`.
                /// - The outer vector is sorted ascending by block number and cannot store two
                ///   items with the same block number.
                pub fn hrmp_channel_digests_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        ::core::primitive::u32,
                        ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    )>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Hrmp",
                        "HrmpChannelDigests",
                        Vec::new(),
                        [
                            205u8, 18u8, 60u8, 54u8, 123u8, 40u8, 160u8, 149u8, 174u8, 45u8, 135u8,
                            213u8, 83u8, 44u8, 97u8, 243u8, 47u8, 200u8, 156u8, 131u8, 15u8, 63u8,
                            170u8, 206u8, 101u8, 17u8, 244u8, 132u8, 73u8, 133u8, 79u8, 104u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod para_session_info {
        use super::{root_mod, runtime_types};
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Assignment keys for the current session.
                /// Note that this API is private due to it being prone to 'off-by-one' at session
                /// boundaries. When in doubt, use `Sessions` API instead.
                pub fn assignment_keys_unsafe(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_primitives::v2::assignment_app::Public>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaSessionInfo",
                        "AssignmentKeysUnsafe",
                        vec![],
                        [
                            80u8, 24u8, 61u8, 132u8, 118u8, 225u8, 207u8, 75u8, 35u8, 240u8, 209u8,
                            255u8, 19u8, 240u8, 114u8, 174u8, 86u8, 65u8, 65u8, 52u8, 135u8, 232u8,
                            59u8, 208u8, 3u8, 107u8, 114u8, 241u8, 14u8, 98u8, 40u8, 226u8,
                        ],
                    )
                }
                /// The earliest session for which previous session info is stored.
                pub fn earliest_stored_session(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaSessionInfo",
                        "EarliestStoredSession",
                        vec![],
                        [
                            25u8, 143u8, 246u8, 184u8, 35u8, 166u8, 140u8, 147u8, 171u8, 5u8,
                            164u8, 159u8, 228u8, 21u8, 248u8, 236u8, 48u8, 210u8, 133u8, 140u8,
                            171u8, 3u8, 85u8, 250u8, 160u8, 102u8, 95u8, 46u8, 33u8, 81u8, 102u8,
                            241u8,
                        ],
                    )
                }
                /// Session information in a rolling window.
                /// Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.
                /// Does not have any entries before the session index in the first session change
                /// notification.
                pub fn sessions(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::SessionInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaSessionInfo",
                        "Sessions",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            186u8, 220u8, 61u8, 52u8, 195u8, 40u8, 214u8, 113u8, 92u8, 109u8,
                            221u8, 201u8, 122u8, 213u8, 124u8, 35u8, 244u8, 55u8, 244u8, 168u8,
                            23u8, 0u8, 240u8, 109u8, 143u8, 90u8, 40u8, 87u8, 127u8, 64u8, 100u8,
                            75u8,
                        ],
                    )
                }
                /// Session information in a rolling window.
                /// Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.
                /// Does not have any entries before the session index in the first session change
                /// notification.
                pub fn sessions_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::SessionInfo,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaSessionInfo",
                        "Sessions",
                        Vec::new(),
                        [
                            186u8, 220u8, 61u8, 52u8, 195u8, 40u8, 214u8, 113u8, 92u8, 109u8,
                            221u8, 201u8, 122u8, 213u8, 124u8, 35u8, 244u8, 55u8, 244u8, 168u8,
                            23u8, 0u8, 240u8, 109u8, 143u8, 90u8, 40u8, 87u8, 127u8, 64u8, 100u8,
                            75u8,
                        ],
                    )
                }
                /// The validator account keys of the validators actively participating in parachain
                /// consensus.
                pub fn account_keys(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaSessionInfo",
                        "AccountKeys",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            48u8, 179u8, 139u8, 15u8, 144u8, 71u8, 92u8, 160u8, 254u8, 237u8, 98u8,
                            60u8, 254u8, 208u8, 201u8, 32u8, 79u8, 55u8, 3u8, 33u8, 188u8, 134u8,
                            18u8, 151u8, 132u8, 40u8, 192u8, 215u8, 94u8, 124u8, 148u8, 142u8,
                        ],
                    )
                }
                /// The validator account keys of the validators actively participating in parachain
                /// consensus.
                pub fn account_keys_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaSessionInfo",
                        "AccountKeys",
                        Vec::new(),
                        [
                            48u8, 179u8, 139u8, 15u8, 144u8, 71u8, 92u8, 160u8, 254u8, 237u8, 98u8,
                            60u8, 254u8, 208u8, 201u8, 32u8, 79u8, 55u8, 3u8, 33u8, 188u8, 134u8,
                            18u8, 151u8, 132u8, 40u8, 192u8, 215u8, 94u8, 124u8, 148u8, 142u8,
                        ],
                    )
                }
                /// Executor parameter set for a given session index
                pub fn session_executor_params(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::vstaging::executor_params::ExecutorParams,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaSessionInfo",
                        "SessionExecutorParams",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            197u8, 78u8, 207u8, 108u8, 96u8, 137u8, 109u8, 148u8, 221u8, 187u8,
                            149u8, 109u8, 122u8, 131u8, 214u8, 221u8, 219u8, 125u8, 78u8, 248u8,
                            239u8, 209u8, 55u8, 56u8, 123u8, 81u8, 217u8, 27u8, 85u8, 6u8, 5u8,
                            68u8,
                        ],
                    )
                }
                /// Executor parameter set for a given session index
                pub fn session_executor_params_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::vstaging::executor_params::ExecutorParams,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParaSessionInfo",
                        "SessionExecutorParams",
                        Vec::new(),
                        [
                            197u8, 78u8, 207u8, 108u8, 96u8, 137u8, 109u8, 148u8, 221u8, 187u8,
                            149u8, 109u8, 122u8, 131u8, 214u8, 221u8, 219u8, 125u8, 78u8, 248u8,
                            239u8, 209u8, 55u8, 56u8, 123u8, 81u8, 217u8, 27u8, 85u8, 6u8, 5u8,
                            68u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod paras_disputes {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceUnfreeze;
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn force_unfreeze(&self) -> ::subxt::tx::Payload<ForceUnfreeze> {
                    ::subxt::tx::Payload::new_static(
                        "ParasDisputes",
                        "force_unfreeze",
                        ForceUnfreeze {},
                        [
                            212u8, 211u8, 58u8, 159u8, 23u8, 220u8, 64u8, 175u8, 65u8, 50u8, 192u8,
                            122u8, 113u8, 189u8, 74u8, 191u8, 48u8, 93u8, 251u8, 50u8, 237u8,
                            240u8, 91u8, 139u8, 193u8, 114u8, 131u8, 125u8, 124u8, 236u8, 191u8,
                            190u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_parachains::disputes::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A dispute has been initiated. \[candidate hash, dispute location\]
            pub struct DisputeInitiated(
                pub runtime_types::polkadot_core_primitives::CandidateHash,
                pub runtime_types::polkadot_runtime_parachains::disputes::DisputeLocation,
            );
            impl ::subxt::events::StaticEvent for DisputeInitiated {
                const PALLET: &'static str = "ParasDisputes";
                const EVENT: &'static str = "DisputeInitiated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A dispute has concluded for or against a candidate.
            ///`\[para id, candidate hash, dispute result\]`
            pub struct DisputeConcluded(
                pub runtime_types::polkadot_core_primitives::CandidateHash,
                pub runtime_types::polkadot_runtime_parachains::disputes::DisputeResult,
            );
            impl ::subxt::events::StaticEvent for DisputeConcluded {
                const PALLET: &'static str = "ParasDisputes";
                const EVENT: &'static str = "DisputeConcluded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A dispute has timed out due to insufficient participation.
            ///`\[para id, candidate hash\]`
            pub struct DisputeTimedOut(pub runtime_types::polkadot_core_primitives::CandidateHash);
            impl ::subxt::events::StaticEvent for DisputeTimedOut {
                const PALLET: &'static str = "ParasDisputes";
                const EVENT: &'static str = "DisputeTimedOut";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A dispute has concluded with supermajority against a candidate.
            ///Block authors should no longer build on top of this head and should
            ///instead revert the block at the given height. This should be the
            ///number of the child of the last known valid block in the chain.
            pub struct Revert(pub ::core::primitive::u32);
            impl ::subxt::events::StaticEvent for Revert {
                const PALLET: &'static str = "ParasDisputes";
                const EVENT: &'static str = "Revert";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The last pruned session, if any. All data stored by this module
                /// references sessions.
                pub fn last_pruned_session(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasDisputes",
                        "LastPrunedSession",
                        vec![],
                        [
                            125u8, 138u8, 99u8, 242u8, 9u8, 246u8, 215u8, 246u8, 141u8, 6u8, 129u8,
                            87u8, 27u8, 58u8, 53u8, 121u8, 61u8, 119u8, 35u8, 104u8, 33u8, 43u8,
                            179u8, 82u8, 244u8, 121u8, 174u8, 135u8, 87u8, 119u8, 236u8, 105u8,
                        ],
                    )
                }
                /// All ongoing or concluded disputes for the last several sessions.
                pub fn disputes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_core_primitives::CandidateHash,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::DisputeState<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasDisputes",
                        "Disputes",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            192u8, 238u8, 255u8, 67u8, 169u8, 86u8, 99u8, 243u8, 228u8, 88u8,
                            142u8, 138u8, 183u8, 117u8, 82u8, 22u8, 163u8, 30u8, 175u8, 247u8,
                            50u8, 204u8, 12u8, 171u8, 57u8, 189u8, 151u8, 191u8, 196u8, 89u8, 94u8,
                            165u8,
                        ],
                    )
                }
                /// All ongoing or concluded disputes for the last several sessions.
                pub fn disputes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v2::DisputeState<::core::primitive::u32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasDisputes",
                        "Disputes",
                        Vec::new(),
                        [
                            192u8, 238u8, 255u8, 67u8, 169u8, 86u8, 99u8, 243u8, 228u8, 88u8,
                            142u8, 138u8, 183u8, 117u8, 82u8, 22u8, 163u8, 30u8, 175u8, 247u8,
                            50u8, 204u8, 12u8, 171u8, 57u8, 189u8, 151u8, 191u8, 196u8, 89u8, 94u8,
                            165u8,
                        ],
                    )
                }
                /// Backing votes stored for each dispute.
                /// This storage is used for slashing.
                pub fn backers_on_disputes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_core_primitives::CandidateHash,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasDisputes",
                        "BackersOnDisputes",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            78u8, 51u8, 233u8, 125u8, 212u8, 66u8, 171u8, 4u8, 46u8, 64u8, 92u8,
                            237u8, 177u8, 72u8, 36u8, 163u8, 64u8, 238u8, 47u8, 61u8, 34u8, 249u8,
                            178u8, 133u8, 129u8, 52u8, 103u8, 14u8, 91u8, 184u8, 192u8, 237u8,
                        ],
                    )
                }
                /// Backing votes stored for each dispute.
                /// This storage is used for slashing.
                pub fn backers_on_disputes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasDisputes",
                        "BackersOnDisputes",
                        Vec::new(),
                        [
                            78u8, 51u8, 233u8, 125u8, 212u8, 66u8, 171u8, 4u8, 46u8, 64u8, 92u8,
                            237u8, 177u8, 72u8, 36u8, 163u8, 64u8, 238u8, 47u8, 61u8, 34u8, 249u8,
                            178u8, 133u8, 129u8, 52u8, 103u8, 14u8, 91u8, 184u8, 192u8, 237u8,
                        ],
                    )
                }
                /// All included blocks on the chain, as well as the block number in this chain that
                /// should be reverted back to if the candidate is disputed and determined to be
                /// invalid.
                pub fn included(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_core_primitives::CandidateHash,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasDisputes",
                        "Included",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            129u8, 50u8, 76u8, 60u8, 82u8, 106u8, 248u8, 164u8, 152u8, 80u8, 58u8,
                            185u8, 211u8, 225u8, 122u8, 100u8, 234u8, 241u8, 123u8, 205u8, 4u8,
                            8u8, 193u8, 116u8, 167u8, 158u8, 252u8, 223u8, 204u8, 226u8, 74u8,
                            195u8,
                        ],
                    )
                }
                /// All included blocks on the chain, as well as the block number in this chain that
                /// should be reverted back to if the candidate is disputed and determined to be
                /// invalid.
                pub fn included_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasDisputes",
                        "Included",
                        Vec::new(),
                        [
                            129u8, 50u8, 76u8, 60u8, 82u8, 106u8, 248u8, 164u8, 152u8, 80u8, 58u8,
                            185u8, 211u8, 225u8, 122u8, 100u8, 234u8, 241u8, 123u8, 205u8, 4u8,
                            8u8, 193u8, 116u8, 167u8, 158u8, 252u8, 223u8, 204u8, 226u8, 74u8,
                            195u8,
                        ],
                    )
                }
                /// Whether the chain is frozen. Starts as `None`. When this is `Some`,
                /// the chain will not accept any new parachain blocks for backing or inclusion,
                /// and its value indicates the last valid block number in the chain.
                /// It can only be set back to `None` by governance intervention.
                pub fn frozen(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasDisputes",
                        "Frozen",
                        vec![],
                        [
                            133u8, 100u8, 86u8, 220u8, 180u8, 189u8, 65u8, 131u8, 64u8, 56u8,
                            219u8, 47u8, 130u8, 167u8, 210u8, 125u8, 49u8, 7u8, 153u8, 254u8, 20u8,
                            53u8, 218u8, 177u8, 122u8, 148u8, 16u8, 198u8, 251u8, 50u8, 194u8,
                            128u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod paras_slashing {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReportDisputeLostUnsigned {
                pub dispute_proof: ::std::boxed::Box<
                    runtime_types::polkadot_runtime_parachains::disputes::slashing::DisputeProof,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn report_dispute_lost_unsigned(
                    &self,
                    dispute_proof: runtime_types::polkadot_runtime_parachains::disputes::slashing::DisputeProof,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<ReportDisputeLostUnsigned> {
                    ::subxt::tx::Payload::new_static(
                        "ParasSlashing",
                        "report_dispute_lost_unsigned",
                        ReportDisputeLostUnsigned {
                            dispute_proof: ::std::boxed::Box::new(dispute_proof),
                            key_owner_proof,
                        },
                        [
                            56u8, 94u8, 136u8, 125u8, 219u8, 155u8, 79u8, 241u8, 109u8, 125u8,
                            106u8, 175u8, 5u8, 189u8, 34u8, 232u8, 132u8, 113u8, 157u8, 184u8,
                            10u8, 34u8, 135u8, 184u8, 36u8, 224u8, 234u8, 141u8, 35u8, 69u8, 254u8,
                            125u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Validators pending dispute slashes.
                pub fn unapplied_slashes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<
                        runtime_types::polkadot_core_primitives::CandidateHash,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::disputes::slashing::PendingSlashes,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasSlashing",
                        "UnappliedSlashes",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            54u8, 95u8, 76u8, 24u8, 68u8, 137u8, 201u8, 120u8, 51u8, 146u8, 12u8,
                            14u8, 39u8, 109u8, 69u8, 148u8, 117u8, 193u8, 139u8, 82u8, 23u8, 77u8,
                            0u8, 16u8, 64u8, 125u8, 181u8, 249u8, 23u8, 156u8, 70u8, 90u8,
                        ],
                    )
                }
                /// Validators pending dispute slashes.
                pub fn unapplied_slashes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_parachains::disputes::slashing::PendingSlashes,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasSlashing",
                        "UnappliedSlashes",
                        Vec::new(),
                        [
                            54u8, 95u8, 76u8, 24u8, 68u8, 137u8, 201u8, 120u8, 51u8, 146u8, 12u8,
                            14u8, 39u8, 109u8, 69u8, 148u8, 117u8, 193u8, 139u8, 82u8, 23u8, 77u8,
                            0u8, 16u8, 64u8, 125u8, 181u8, 249u8, 23u8, 156u8, 70u8, 90u8,
                        ],
                    )
                }
                /// `ValidatorSetCount` per session.
                pub fn validator_set_counts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasSlashing",
                        "ValidatorSetCounts",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            121u8, 241u8, 222u8, 61u8, 186u8, 55u8, 206u8, 246u8, 31u8, 128u8,
                            103u8, 53u8, 6u8, 73u8, 13u8, 120u8, 63u8, 56u8, 167u8, 75u8, 113u8,
                            102u8, 221u8, 129u8, 151u8, 186u8, 225u8, 169u8, 128u8, 192u8, 107u8,
                            214u8,
                        ],
                    )
                }
                /// `ValidatorSetCount` per session.
                pub fn validator_set_counts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParasSlashing",
                        "ValidatorSetCounts",
                        Vec::new(),
                        [
                            121u8, 241u8, 222u8, 61u8, 186u8, 55u8, 206u8, 246u8, 31u8, 128u8,
                            103u8, 53u8, 6u8, 73u8, 13u8, 120u8, 63u8, 56u8, 167u8, 75u8, 113u8,
                            102u8, 221u8, 129u8, 151u8, 186u8, 225u8, 169u8, 128u8, 192u8, 107u8,
                            214u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod registrar {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Register {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
                pub genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
                pub validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceRegister {
                pub who: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
                pub id: runtime_types::polkadot_parachain::primitives::Id,
                pub genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
                pub validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Deregister {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Swap {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
                pub other: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RemoveLock {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Reserve;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AddLock {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ScheduleCodeUpgrade {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
                pub new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetCurrentHead {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
                pub new_head: runtime_types::polkadot_parachain::primitives::HeadData,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Register head data and validation code for a reserved Para Id.
                ///
                ///## Arguments
                /// - `origin`: Must be called by a `Signed` origin.
                /// - `id`: The para ID. Must be owned/managed by the `origin` signing account.
                /// - `genesis_head`: The genesis head data of the parachain/thread.
                /// - `validation_code`: The initial validation code of the parachain/thread.
                ///
                ///## Deposits/Fees
                ///The origin signed account must reserve a corresponding deposit for the
                /// registration. Anything already reserved previously for this para
                /// ID is accounted for.
                ///
                ///## Events
                ///The `Registered` event is emitted in case of success.
                pub fn register(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                    genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
                    validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                ) -> ::subxt::tx::Payload<Register> {
                    ::subxt::tx::Payload::new_static(
                        "Registrar",
                        "register",
                        Register { id, genesis_head, validation_code },
                        [
                            154u8, 84u8, 201u8, 125u8, 72u8, 69u8, 188u8, 42u8, 225u8, 14u8, 136u8,
                            48u8, 78u8, 86u8, 99u8, 238u8, 252u8, 255u8, 226u8, 219u8, 214u8, 17u8,
                            19u8, 9u8, 12u8, 13u8, 174u8, 243u8, 37u8, 134u8, 76u8, 23u8,
                        ],
                    )
                }
                ///Force the registration of a Para Id on the relay chain.
                ///
                ///This function must be called by a Root origin.
                ///
                ///The deposit taken can be specified for this registration. Any `ParaId`
                ///can be registered, including sub-1000 IDs which are System Parachains.
                pub fn force_register(
                    &self,
                    who: ::subxt::utils::AccountId32,
                    deposit: ::core::primitive::u128,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                    genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
                    validation_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                ) -> ::subxt::tx::Payload<ForceRegister> {
                    ::subxt::tx::Payload::new_static(
                        "Registrar",
                        "force_register",
                        ForceRegister { who, deposit, id, genesis_head, validation_code },
                        [
                            59u8, 24u8, 236u8, 163u8, 53u8, 49u8, 92u8, 199u8, 38u8, 76u8, 101u8,
                            73u8, 166u8, 105u8, 145u8, 55u8, 89u8, 30u8, 30u8, 137u8, 151u8, 219u8,
                            116u8, 226u8, 168u8, 220u8, 222u8, 6u8, 105u8, 91u8, 254u8, 216u8,
                        ],
                    )
                }
                ///Deregister a Para Id, freeing all data and returning any deposit.
                ///
                ///The caller must be Root, the `para` owner, or the `para` itself. The para must
                /// be a parathread.
                pub fn deregister(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<Deregister> {
                    ::subxt::tx::Payload::new_static(
                        "Registrar",
                        "deregister",
                        Deregister { id },
                        [
                            137u8, 9u8, 146u8, 11u8, 126u8, 125u8, 186u8, 222u8, 246u8, 199u8,
                            94u8, 229u8, 147u8, 245u8, 213u8, 51u8, 203u8, 181u8, 78u8, 87u8, 18u8,
                            255u8, 79u8, 107u8, 234u8, 2u8, 21u8, 212u8, 1u8, 73u8, 173u8, 253u8,
                        ],
                    )
                }
                ///Swap a parachain with another parachain or parathread.
                ///
                ///The origin must be Root, the `para` owner, or the `para` itself.
                ///
                ///The swap will happen only if there is already an opposite swap pending. If there
                /// is not, the swap will be stored in the pending swaps map, ready
                /// for a later confirmatory swap.
                ///
                ///The `ParaId`s remain mapped to the same head data and code so external code can
                /// rely on `ParaId` to be a long-term identifier of a notional
                /// "parachain". However, their scheduling info (i.e. whether
                /// they're a parathread or parachain), auction information
                /// and the auction deposit are switched.
                pub fn swap(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                    other: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<Swap> {
                    ::subxt::tx::Payload::new_static(
                        "Registrar",
                        "swap",
                        Swap { id, other },
                        [
                            238u8, 154u8, 249u8, 250u8, 57u8, 242u8, 47u8, 17u8, 50u8, 70u8, 124u8,
                            189u8, 193u8, 137u8, 107u8, 138u8, 216u8, 137u8, 160u8, 103u8, 192u8,
                            133u8, 7u8, 130u8, 41u8, 39u8, 47u8, 139u8, 202u8, 7u8, 84u8, 214u8,
                        ],
                    )
                }
                ///Remove a manager lock from a para. This will allow the manager of a
                ///previously locked para to deregister or swap a para without using governance.
                ///
                ///Can only be called by the Root origin or the parachain.
                pub fn remove_lock(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<RemoveLock> {
                    ::subxt::tx::Payload::new_static(
                        "Registrar",
                        "remove_lock",
                        RemoveLock { para },
                        [
                            93u8, 50u8, 223u8, 180u8, 185u8, 3u8, 225u8, 27u8, 233u8, 205u8, 101u8,
                            86u8, 122u8, 19u8, 147u8, 8u8, 202u8, 151u8, 80u8, 24u8, 196u8, 2u8,
                            88u8, 250u8, 184u8, 96u8, 158u8, 70u8, 181u8, 201u8, 200u8, 213u8,
                        ],
                    )
                }
                ///Reserve a Para Id on the relay chain.
                ///
                ///This function will reserve a new Para Id to be owned/managed by the origin
                /// account. The origin account is able to register head data and
                /// validation code using `register` to create a parathread. Using
                /// the Slots pallet, a parathread can then be upgraded to get a parachain slot.
                ///
                ///## Arguments
                /// - `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of
                ///   the new para ID.
                ///
                ///## Deposits/Fees
                ///The origin must reserve a deposit of `ParaDeposit` for the registration.
                ///
                ///## Events
                ///The `Reserved` event is emitted in case of success, which provides the ID
                /// reserved for use.
                pub fn reserve(&self) -> ::subxt::tx::Payload<Reserve> {
                    ::subxt::tx::Payload::new_static(
                        "Registrar",
                        "reserve",
                        Reserve {},
                        [
                            22u8, 210u8, 13u8, 54u8, 253u8, 13u8, 89u8, 174u8, 232u8, 119u8, 148u8,
                            206u8, 130u8, 133u8, 199u8, 127u8, 201u8, 205u8, 8u8, 213u8, 108u8,
                            93u8, 135u8, 88u8, 238u8, 171u8, 31u8, 193u8, 23u8, 113u8, 106u8,
                            135u8,
                        ],
                    )
                }
                ///Add a manager lock from a para. This will prevent the manager of a
                ///para to deregister or swap a para.
                ///
                ///Can be called by Root, the parachain, or the parachain manager if the parachain
                /// is unlocked.
                pub fn add_lock(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<AddLock> {
                    ::subxt::tx::Payload::new_static(
                        "Registrar",
                        "add_lock",
                        AddLock { para },
                        [
                            99u8, 199u8, 192u8, 92u8, 180u8, 52u8, 86u8, 165u8, 249u8, 60u8, 72u8,
                            79u8, 233u8, 5u8, 83u8, 194u8, 48u8, 83u8, 249u8, 218u8, 141u8, 234u8,
                            232u8, 59u8, 9u8, 150u8, 147u8, 173u8, 91u8, 154u8, 81u8, 17u8,
                        ],
                    )
                }
                ///Schedule a parachain upgrade.
                ///
                ///Can be called by Root, the parachain, or the parachain manager if the parachain
                /// is unlocked.
                pub fn schedule_code_upgrade(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                    new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                ) -> ::subxt::tx::Payload<ScheduleCodeUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "Registrar",
                        "schedule_code_upgrade",
                        ScheduleCodeUpgrade { para, new_code },
                        [
                            67u8, 11u8, 148u8, 83u8, 36u8, 106u8, 97u8, 77u8, 79u8, 114u8, 249u8,
                            218u8, 207u8, 89u8, 209u8, 120u8, 45u8, 101u8, 69u8, 21u8, 61u8, 158u8,
                            90u8, 83u8, 29u8, 143u8, 55u8, 9u8, 178u8, 75u8, 183u8, 25u8,
                        ],
                    )
                }
                ///Set the parachain's current head.
                ///
                ///Can be called by Root, the parachain, or the parachain manager if the parachain
                /// is unlocked.
                pub fn set_current_head(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                    new_head: runtime_types::polkadot_parachain::primitives::HeadData,
                ) -> ::subxt::tx::Payload<SetCurrentHead> {
                    ::subxt::tx::Payload::new_static(
                        "Registrar",
                        "set_current_head",
                        SetCurrentHead { para, new_head },
                        [
                            103u8, 240u8, 206u8, 26u8, 120u8, 189u8, 94u8, 221u8, 174u8, 225u8,
                            210u8, 176u8, 217u8, 18u8, 94u8, 216u8, 77u8, 205u8, 86u8, 196u8,
                            121u8, 4u8, 230u8, 147u8, 19u8, 224u8, 38u8, 254u8, 199u8, 254u8,
                            245u8, 110u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_common::paras_registrar::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Registered {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                pub manager: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Registered {
                const PALLET: &'static str = "Registrar";
                const EVENT: &'static str = "Registered";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Deregistered {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
            }
            impl ::subxt::events::StaticEvent for Deregistered {
                const PALLET: &'static str = "Registrar";
                const EVENT: &'static str = "Deregistered";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Reserved {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Registrar";
                const EVENT: &'static str = "Reserved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Pending swap operations.
                pub fn pending_swap(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::Id,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Registrar",
                        "PendingSwap",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            121u8, 124u8, 4u8, 120u8, 173u8, 48u8, 227u8, 135u8, 72u8, 74u8, 238u8,
                            230u8, 1u8, 175u8, 33u8, 241u8, 138u8, 82u8, 217u8, 129u8, 138u8,
                            107u8, 59u8, 8u8, 205u8, 244u8, 192u8, 159u8, 171u8, 123u8, 149u8,
                            174u8,
                        ],
                    )
                }
                /// Pending swap operations.
                pub fn pending_swap_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::Id,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Registrar",
                        "PendingSwap",
                        Vec::new(),
                        [
                            121u8, 124u8, 4u8, 120u8, 173u8, 48u8, 227u8, 135u8, 72u8, 74u8, 238u8,
                            230u8, 1u8, 175u8, 33u8, 241u8, 138u8, 82u8, 217u8, 129u8, 138u8,
                            107u8, 59u8, 8u8, 205u8, 244u8, 192u8, 159u8, 171u8, 123u8, 149u8,
                            174u8,
                        ],
                    )
                }
                /// Amount held on deposit for each para and the original depositor.
                ///
                /// The given account ID is responsible for registering the code and initial head
                /// data, but may only do so if it isn't yet registered. (After
                /// that, it's up to governance to do so.)
                pub fn paras(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::paras_registrar::ParaInfo<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Registrar",
                        "Paras",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            149u8, 3u8, 25u8, 145u8, 60u8, 126u8, 219u8, 71u8, 88u8, 241u8, 122u8,
                            99u8, 134u8, 191u8, 60u8, 172u8, 230u8, 230u8, 110u8, 31u8, 43u8, 6u8,
                            146u8, 161u8, 51u8, 21u8, 169u8, 220u8, 240u8, 218u8, 124u8, 56u8,
                        ],
                    )
                }
                /// Amount held on deposit for each para and the original depositor.
                ///
                /// The given account ID is responsible for registering the code and initial head
                /// data, but may only do so if it isn't yet registered. (After
                /// that, it's up to governance to do so.)
                pub fn paras_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::paras_registrar::ParaInfo<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Registrar",
                        "Paras",
                        Vec::new(),
                        [
                            149u8, 3u8, 25u8, 145u8, 60u8, 126u8, 219u8, 71u8, 88u8, 241u8, 122u8,
                            99u8, 134u8, 191u8, 60u8, 172u8, 230u8, 230u8, 110u8, 31u8, 43u8, 6u8,
                            146u8, 161u8, 51u8, 21u8, 169u8, 220u8, 240u8, 218u8, 124u8, 56u8,
                        ],
                    )
                }
                /// The next free `ParaId`.
                pub fn next_free_para_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::Id,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Registrar",
                        "NextFreeParaId",
                        vec![],
                        [
                            139u8, 76u8, 36u8, 150u8, 237u8, 36u8, 143u8, 242u8, 252u8, 29u8,
                            236u8, 168u8, 97u8, 50u8, 175u8, 120u8, 83u8, 118u8, 205u8, 64u8, 95u8,
                            65u8, 7u8, 230u8, 171u8, 86u8, 189u8, 205u8, 231u8, 211u8, 97u8, 29u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The deposit to be paid to run a parathread.
                /// This should include the cost for storing the genesis head and validation code.
                pub fn para_deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Registrar",
                        "ParaDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// The deposit to be paid per byte stored on chain.
                pub fn data_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Registrar",
                        "DataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod slots {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceLease {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
                pub leaser: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub period_begin: ::core::primitive::u32,
                pub period_count: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ClearAllLeases {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TriggerOnboard {
                pub para: runtime_types::polkadot_parachain::primitives::Id,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Just a connect into the `lease_out` call, in case Root wants to force some lease
                /// to happen independently of any other on-chain mechanism to use
                /// it.
                ///
                ///The dispatch origin for this call must match `T::ForceOrigin`.
                pub fn force_lease(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                    leaser: ::subxt::utils::AccountId32,
                    amount: ::core::primitive::u128,
                    period_begin: ::core::primitive::u32,
                    period_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ForceLease> {
                    ::subxt::tx::Payload::new_static(
                        "Slots",
                        "force_lease",
                        ForceLease { para, leaser, amount, period_begin, period_count },
                        [
                            196u8, 2u8, 63u8, 229u8, 18u8, 134u8, 48u8, 4u8, 165u8, 46u8, 173u8,
                            0u8, 189u8, 35u8, 99u8, 84u8, 103u8, 124u8, 233u8, 246u8, 60u8, 172u8,
                            181u8, 205u8, 154u8, 164u8, 36u8, 178u8, 60u8, 164u8, 166u8, 21u8,
                        ],
                    )
                }
                ///Clear all leases for a Para Id, refunding any deposits back to the original
                /// owners.
                ///
                ///The dispatch origin for this call must match `T::ForceOrigin`.
                pub fn clear_all_leases(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<ClearAllLeases> {
                    ::subxt::tx::Payload::new_static(
                        "Slots",
                        "clear_all_leases",
                        ClearAllLeases { para },
                        [
                            16u8, 14u8, 185u8, 45u8, 149u8, 70u8, 177u8, 133u8, 130u8, 173u8,
                            196u8, 244u8, 77u8, 63u8, 218u8, 64u8, 108u8, 83u8, 84u8, 184u8, 175u8,
                            122u8, 36u8, 115u8, 146u8, 117u8, 132u8, 82u8, 2u8, 144u8, 62u8, 179u8,
                        ],
                    )
                }
                ///Try to onboard a parachain that has a lease for the current lease period.
                ///
                ///This function can be useful if there was some state issue with a para that
                /// should have onboarded, but was unable to. As long as they have a
                /// lease period, we can let them onboard from here.
                ///
                ///Origin must be signed, but can be called by anyone.
                pub fn trigger_onboard(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<TriggerOnboard> {
                    ::subxt::tx::Payload::new_static(
                        "Slots",
                        "trigger_onboard",
                        TriggerOnboard { para },
                        [
                            74u8, 158u8, 122u8, 37u8, 34u8, 62u8, 61u8, 218u8, 94u8, 222u8, 1u8,
                            153u8, 131u8, 215u8, 157u8, 180u8, 98u8, 130u8, 151u8, 179u8, 22u8,
                            120u8, 32u8, 207u8, 208u8, 46u8, 248u8, 43u8, 154u8, 118u8, 106u8, 2u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_common::slots::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new `[lease_period]` is beginning.
            pub struct NewLeasePeriod {
                pub lease_period: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NewLeasePeriod {
                const PALLET: &'static str = "Slots";
                const EVENT: &'static str = "NewLeasePeriod";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A para has won the right to a continuous set of lease periods as a parachain.
            ///First balance is any extra amount reserved on top of the para's existing deposit.
            ///Second balance is the total amount reserved.
            pub struct Leased {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                pub leaser: ::subxt::utils::AccountId32,
                pub period_begin: ::core::primitive::u32,
                pub period_count: ::core::primitive::u32,
                pub extra_reserved: ::core::primitive::u128,
                pub total_amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Leased {
                const PALLET: &'static str = "Slots";
                const EVENT: &'static str = "Leased";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Amounts held on deposit for each (possibly future) leased parachain.
                ///
                /// The actual amount locked on its behalf by any account at any time is the maximum
                /// of the second values of the items in this list whose first value
                /// is the account.
                ///
                /// The first item in the list is the amount locked for the current Lease Period.
                /// Following items are for the subsequent lease periods.
                ///
                /// The default value (an empty list) implies that the parachain no longer exists
                /// (or never existed) as far as this pallet is concerned.
                ///
                /// If a parachain doesn't exist *yet* but is scheduled to exist in the future, then
                /// it will be left-padded with one or more `None`s to denote the
                /// fact that nothing is held on deposit for the non-existent chain
                /// currently, but is held at some point in the future.
                ///
                /// It is illegal for a `None` value to trail in the list.
                pub fn leases(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        ::core::option::Option<(
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        )>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Slots",
                        "Leases",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            7u8, 104u8, 17u8, 66u8, 157u8, 89u8, 238u8, 38u8, 233u8, 241u8, 110u8,
                            67u8, 132u8, 101u8, 243u8, 62u8, 73u8, 7u8, 9u8, 172u8, 22u8, 51u8,
                            118u8, 87u8, 3u8, 224u8, 120u8, 88u8, 139u8, 11u8, 96u8, 147u8,
                        ],
                    )
                }
                /// Amounts held on deposit for each (possibly future) leased parachain.
                ///
                /// The actual amount locked on its behalf by any account at any time is the maximum
                /// of the second values of the items in this list whose first value
                /// is the account.
                ///
                /// The first item in the list is the amount locked for the current Lease Period.
                /// Following items are for the subsequent lease periods.
                ///
                /// The default value (an empty list) implies that the parachain no longer exists
                /// (or never existed) as far as this pallet is concerned.
                ///
                /// If a parachain doesn't exist *yet* but is scheduled to exist in the future, then
                /// it will be left-padded with one or more `None`s to denote the
                /// fact that nothing is held on deposit for the non-existent chain
                /// currently, but is held at some point in the future.
                ///
                /// It is illegal for a `None` value to trail in the list.
                pub fn leases_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        ::core::option::Option<(
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        )>,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Slots",
                        "Leases",
                        Vec::new(),
                        [
                            7u8, 104u8, 17u8, 66u8, 157u8, 89u8, 238u8, 38u8, 233u8, 241u8, 110u8,
                            67u8, 132u8, 101u8, 243u8, 62u8, 73u8, 7u8, 9u8, 172u8, 22u8, 51u8,
                            118u8, 87u8, 3u8, 224u8, 120u8, 88u8, 139u8, 11u8, 96u8, 147u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The number of blocks over which a single period lasts.
                pub fn lease_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Slots",
                        "LeasePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The number of blocks to offset each lease period by.
                pub fn lease_offset(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Slots",
                        "LeaseOffset",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod auctions {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NewAuction {
                #[codec(compact)]
                pub duration: ::core::primitive::u32,
                #[codec(compact)]
                pub lease_period_index: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Bid {
                #[codec(compact)]
                pub para: runtime_types::polkadot_parachain::primitives::Id,
                #[codec(compact)]
                pub auction_index: ::core::primitive::u32,
                #[codec(compact)]
                pub first_slot: ::core::primitive::u32,
                #[codec(compact)]
                pub last_slot: ::core::primitive::u32,
                #[codec(compact)]
                pub amount: ::core::primitive::u128,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CancelAuction;
            pub struct TransactionApi;
            impl TransactionApi {
                ///Create a new auction.
                ///
                ///This can only happen when there isn't already an auction in progress and may
                /// only be called by the root origin. Accepts the `duration` of
                /// this auction and the `lease_period_index` of the initial lease
                /// period of the four that are to be auctioned.
                pub fn new_auction(
                    &self,
                    duration: ::core::primitive::u32,
                    lease_period_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<NewAuction> {
                    ::subxt::tx::Payload::new_static(
                        "Auctions",
                        "new_auction",
                        NewAuction { duration, lease_period_index },
                        [
                            171u8, 40u8, 200u8, 164u8, 213u8, 10u8, 145u8, 164u8, 212u8, 14u8,
                            117u8, 215u8, 248u8, 59u8, 34u8, 79u8, 50u8, 176u8, 164u8, 143u8, 92u8,
                            82u8, 207u8, 37u8, 103u8, 252u8, 255u8, 142u8, 239u8, 134u8, 114u8,
                            151u8,
                        ],
                    )
                }
                ///Make a new bid from an account (including a parachain account) for deploying a
                /// new parachain.
                ///
                ///Multiple simultaneous bids from the same bidder are allowed only as long as all
                /// active bids overlap each other (i.e. are mutually exclusive).
                /// Bids cannot be redacted.
                ///
                /// - `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by
                ///   (and
                ///funded by) the same account.
                /// - `auction_index` is the index of the auction to bid on. Should just be the
                ///   present
                ///value of `AuctionCounter`.
                /// - `first_slot` is the first lease period index of the range to bid on. This is
                ///   the
                ///absolute lease period index value, not an auction-specific offset.
                /// - `last_slot` is the last lease period index of the range to bid on. This is the
                ///absolute lease period index value, not an auction-specific offset.
                /// - `amount` is the amount to bid to be held as deposit for the parachain should
                ///   the
                ///bid win. This amount is held throughout the range.
                pub fn bid(
                    &self,
                    para: runtime_types::polkadot_parachain::primitives::Id,
                    auction_index: ::core::primitive::u32,
                    first_slot: ::core::primitive::u32,
                    last_slot: ::core::primitive::u32,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<Bid> {
                    ::subxt::tx::Payload::new_static(
                        "Auctions",
                        "bid",
                        Bid { para, auction_index, first_slot, last_slot, amount },
                        [
                            243u8, 233u8, 248u8, 221u8, 239u8, 59u8, 65u8, 63u8, 125u8, 129u8,
                            202u8, 165u8, 30u8, 228u8, 32u8, 73u8, 225u8, 38u8, 128u8, 98u8, 102u8,
                            46u8, 203u8, 32u8, 70u8, 74u8, 136u8, 163u8, 83u8, 211u8, 227u8, 139u8,
                        ],
                    )
                }
                ///Cancel an in-progress auction.
                ///
                ///Can only be called by Root origin.
                pub fn cancel_auction(&self) -> ::subxt::tx::Payload<CancelAuction> {
                    ::subxt::tx::Payload::new_static(
                        "Auctions",
                        "cancel_auction",
                        CancelAuction {},
                        [
                            182u8, 223u8, 178u8, 136u8, 1u8, 115u8, 229u8, 78u8, 166u8, 128u8,
                            28u8, 106u8, 6u8, 248u8, 46u8, 55u8, 110u8, 120u8, 213u8, 11u8, 90u8,
                            217u8, 42u8, 120u8, 47u8, 83u8, 126u8, 216u8, 236u8, 251u8, 255u8,
                            50u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_common::auctions::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An auction started. Provides its index and the block number where it will begin to
            ///close and the first lease period of the quadruplet that is auctioned.
            pub struct AuctionStarted {
                pub auction_index: ::core::primitive::u32,
                pub lease_period: ::core::primitive::u32,
                pub ending: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AuctionStarted {
                const PALLET: &'static str = "Auctions";
                const EVENT: &'static str = "AuctionStarted";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An auction ended. All funds become unreserved.
            pub struct AuctionClosed {
                pub auction_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AuctionClosed {
                const PALLET: &'static str = "Auctions";
                const EVENT: &'static str = "AuctionClosed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Funds were reserved for a winning bid. First balance is the extra amount reserved.
            ///Second is the total.
            pub struct Reserved {
                pub bidder: ::subxt::utils::AccountId32,
                pub extra_reserved: ::core::primitive::u128,
                pub total_amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Auctions";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Funds were unreserved since bidder is no longer active. `[bidder, amount]`
            pub struct Unreserved {
                pub bidder: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Auctions";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Someone attempted to lease the same slot twice for a parachain. The amount is held
            /// in reserve but no parachain slot has been leased.
            pub struct ReserveConfiscated {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                pub leaser: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for ReserveConfiscated {
                const PALLET: &'static str = "Auctions";
                const EVENT: &'static str = "ReserveConfiscated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A new bid has been accepted as the current winner.
            pub struct BidAccepted {
                pub bidder: ::subxt::utils::AccountId32,
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                pub amount: ::core::primitive::u128,
                pub first_slot: ::core::primitive::u32,
                pub last_slot: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BidAccepted {
                const PALLET: &'static str = "Auctions";
                const EVENT: &'static str = "BidAccepted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The winning offset was chosen for an auction. This will map into the `Winning`
            /// storage map.
            pub struct WinningOffset {
                pub auction_index: ::core::primitive::u32,
                pub block_number: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for WinningOffset {
                const PALLET: &'static str = "Auctions";
                const EVENT: &'static str = "WinningOffset";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Number of auctions started so far.
                pub fn auction_counter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Auctions",
                        "AuctionCounter",
                        vec![],
                        [
                            67u8, 247u8, 96u8, 152u8, 0u8, 224u8, 230u8, 98u8, 194u8, 107u8, 3u8,
                            203u8, 51u8, 201u8, 149u8, 22u8, 184u8, 80u8, 251u8, 239u8, 253u8,
                            19u8, 58u8, 192u8, 65u8, 96u8, 189u8, 54u8, 175u8, 130u8, 143u8, 181u8,
                        ],
                    )
                }
                /// Information relating to the current auction, if there is one.
                ///
                /// The first item in the tuple is the lease period index that the first of the four
                /// contiguous lease periods on auction is for. The second is the block number when
                /// the auction will "begin to end", i.e. the first block of the
                /// Ending Period of the auction.
                pub fn auction_info(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Auctions",
                        "AuctionInfo",
                        vec![],
                        [
                            73u8, 216u8, 173u8, 230u8, 132u8, 78u8, 83u8, 62u8, 200u8, 69u8, 17u8,
                            73u8, 57u8, 107u8, 160u8, 90u8, 147u8, 84u8, 29u8, 110u8, 144u8, 215u8,
                            169u8, 110u8, 217u8, 77u8, 109u8, 204u8, 1u8, 164u8, 95u8, 83u8,
                        ],
                    )
                }
                /// Amounts currently reserved in the accounts of the bidders currently winning
                /// (sub-)ranges.
                pub fn reserved_amounts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Auctions",
                        "ReservedAmounts",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            120u8, 85u8, 180u8, 244u8, 154u8, 135u8, 87u8, 79u8, 75u8, 169u8,
                            220u8, 117u8, 227u8, 85u8, 198u8, 214u8, 28u8, 126u8, 66u8, 188u8,
                            137u8, 111u8, 110u8, 152u8, 18u8, 233u8, 76u8, 166u8, 55u8, 233u8,
                            93u8, 62u8,
                        ],
                    )
                }
                /// Amounts currently reserved in the accounts of the bidders currently winning
                /// (sub-)ranges.
                pub fn reserved_amounts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Auctions",
                        "ReservedAmounts",
                        Vec::new(),
                        [
                            120u8, 85u8, 180u8, 244u8, 154u8, 135u8, 87u8, 79u8, 75u8, 169u8,
                            220u8, 117u8, 227u8, 85u8, 198u8, 214u8, 28u8, 126u8, 66u8, 188u8,
                            137u8, 111u8, 110u8, 152u8, 18u8, 233u8, 76u8, 166u8, 55u8, 233u8,
                            93u8, 62u8,
                        ],
                    )
                }
                /// The winning bids for each of the 10 ranges at each sample in the final Ending
                /// Period of the current auction. The map's key is the 0-based
                /// index into the Sample Size. The first sample of the ending
                /// period is 0; the last is `Sample Size - 1`.
                pub fn winning(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    [::core::option::Option<(
                        ::subxt::utils::AccountId32,
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u128,
                    )>; 36usize],
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Auctions",
                        "Winning",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            63u8, 56u8, 143u8, 200u8, 12u8, 71u8, 187u8, 73u8, 215u8, 93u8, 222u8,
                            102u8, 5u8, 113u8, 6u8, 170u8, 95u8, 228u8, 28u8, 58u8, 109u8, 62u8,
                            3u8, 125u8, 211u8, 139u8, 194u8, 30u8, 151u8, 147u8, 47u8, 205u8,
                        ],
                    )
                }
                /// The winning bids for each of the 10 ranges at each sample in the final Ending
                /// Period of the current auction. The map's key is the 0-based
                /// index into the Sample Size. The first sample of the ending
                /// period is 0; the last is `Sample Size - 1`.
                pub fn winning_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    [::core::option::Option<(
                        ::subxt::utils::AccountId32,
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u128,
                    )>; 36usize],
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Auctions",
                        "Winning",
                        Vec::new(),
                        [
                            63u8, 56u8, 143u8, 200u8, 12u8, 71u8, 187u8, 73u8, 215u8, 93u8, 222u8,
                            102u8, 5u8, 113u8, 6u8, 170u8, 95u8, 228u8, 28u8, 58u8, 109u8, 62u8,
                            3u8, 125u8, 211u8, 139u8, 194u8, 30u8, 151u8, 147u8, 47u8, 205u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The number of blocks over which an auction may be retroactively ended.
                pub fn ending_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Auctions",
                        "EndingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The length of each sample to take during the ending period.
                ///
                /// `EndingPeriod` / `SampleLength` = Total # of Samples
                pub fn sample_length(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Auctions",
                        "SampleLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn slot_range_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Auctions",
                        "SlotRangeCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn lease_periods_per_slot(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Auctions",
                        "LeasePeriodsPerSlot",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod crowdloan {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Create {
                #[codec(compact)]
                pub index: runtime_types::polkadot_parachain::primitives::Id,
                #[codec(compact)]
                pub cap: ::core::primitive::u128,
                #[codec(compact)]
                pub first_period: ::core::primitive::u32,
                #[codec(compact)]
                pub last_period: ::core::primitive::u32,
                #[codec(compact)]
                pub end: ::core::primitive::u32,
                pub verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Contribute {
                #[codec(compact)]
                pub index: runtime_types::polkadot_parachain::primitives::Id,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
                pub signature: ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Withdraw {
                pub who: ::subxt::utils::AccountId32,
                #[codec(compact)]
                pub index: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Refund {
                #[codec(compact)]
                pub index: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Dissolve {
                #[codec(compact)]
                pub index: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Edit {
                #[codec(compact)]
                pub index: runtime_types::polkadot_parachain::primitives::Id,
                #[codec(compact)]
                pub cap: ::core::primitive::u128,
                #[codec(compact)]
                pub first_period: ::core::primitive::u32,
                #[codec(compact)]
                pub last_period: ::core::primitive::u32,
                #[codec(compact)]
                pub end: ::core::primitive::u32,
                pub verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AddMemo {
                pub index: runtime_types::polkadot_parachain::primitives::Id,
                pub memo: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Poke {
                pub index: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ContributeAll {
                #[codec(compact)]
                pub index: runtime_types::polkadot_parachain::primitives::Id,
                pub signature: ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Create a new crowdloaning campaign for a parachain slot with the given lease
                /// period range.
                ///
                ///This applies a lock to your parachain configuration, ensuring that it cannot be
                /// changed by the parachain manager.
                pub fn create(
                    &self,
                    index: runtime_types::polkadot_parachain::primitives::Id,
                    cap: ::core::primitive::u128,
                    first_period: ::core::primitive::u32,
                    last_period: ::core::primitive::u32,
                    end: ::core::primitive::u32,
                    verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
                ) -> ::subxt::tx::Payload<Create> {
                    ::subxt::tx::Payload::new_static(
                        "Crowdloan",
                        "create",
                        Create { index, cap, first_period, last_period, end, verifier },
                        [
                            78u8, 52u8, 156u8, 23u8, 104u8, 251u8, 20u8, 233u8, 42u8, 231u8, 16u8,
                            192u8, 164u8, 68u8, 98u8, 129u8, 88u8, 126u8, 123u8, 4u8, 210u8, 161u8,
                            190u8, 90u8, 67u8, 235u8, 74u8, 184u8, 180u8, 197u8, 248u8, 238u8,
                        ],
                    )
                }
                ///Contribute to a crowd sale. This will transfer some balance over to fund a
                /// parachain slot. It will be withdrawable when the crowdloan has
                /// ended and the funds are unused.
                pub fn contribute(
                    &self,
                    index: runtime_types::polkadot_parachain::primitives::Id,
                    value: ::core::primitive::u128,
                    signature: ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
                ) -> ::subxt::tx::Payload<Contribute> {
                    ::subxt::tx::Payload::new_static(
                        "Crowdloan",
                        "contribute",
                        Contribute { index, value, signature },
                        [
                            159u8, 180u8, 248u8, 203u8, 128u8, 231u8, 28u8, 84u8, 14u8, 214u8,
                            69u8, 217u8, 62u8, 201u8, 169u8, 160u8, 45u8, 160u8, 125u8, 255u8,
                            95u8, 140u8, 58u8, 3u8, 224u8, 157u8, 199u8, 229u8, 72u8, 40u8, 218u8,
                            55u8,
                        ],
                    )
                }
                ///Withdraw full balance of a specific contributor.
                ///
                ///Origin must be signed, but can come from anyone.
                ///
                ///The fund must be either in, or ready for, retirement. For a fund to be *in*
                /// retirement, then the retirement flag must be set. For a fund to
                /// be ready for retirement, then:
                /// - it must not already be in retirement;
                /// - the amount of raised funds must be bigger than the _free_ balance of the
                ///   account;
                /// - and either:
                ///  - the block number must be at least `end`; or
                ///  - the current lease period must be greater than the fund's `last_period`.
                ///
                ///In this case, the fund's retirement flag is set and its `end` is reset to the
                /// current block number.
                ///
                /// - `who`: The account whose contribution should be withdrawn.
                /// - `index`: The parachain to whose crowdloan the contribution was made.
                pub fn withdraw(
                    &self,
                    who: ::subxt::utils::AccountId32,
                    index: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<Withdraw> {
                    ::subxt::tx::Payload::new_static(
                        "Crowdloan",
                        "withdraw",
                        Withdraw { who, index },
                        [
                            147u8, 177u8, 116u8, 152u8, 9u8, 102u8, 4u8, 201u8, 204u8, 145u8,
                            104u8, 226u8, 86u8, 211u8, 66u8, 109u8, 109u8, 139u8, 229u8, 97u8,
                            215u8, 101u8, 255u8, 181u8, 121u8, 139u8, 165u8, 169u8, 112u8, 173u8,
                            213u8, 121u8,
                        ],
                    )
                }
                ///Automatically refund contributors of an ended crowdloan.
                ///Due to weight restrictions, this function may need to be called multiple
                ///times to fully refund all users. We will refund `RemoveKeysLimit` users at a
                /// time.
                ///
                ///Origin must be signed, but can come from anyone.
                pub fn refund(
                    &self,
                    index: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<Refund> {
                    ::subxt::tx::Payload::new_static(
                        "Crowdloan",
                        "refund",
                        Refund { index },
                        [
                            223u8, 64u8, 5u8, 135u8, 15u8, 234u8, 60u8, 114u8, 199u8, 216u8, 73u8,
                            165u8, 198u8, 34u8, 140u8, 142u8, 214u8, 254u8, 203u8, 163u8, 224u8,
                            120u8, 104u8, 54u8, 12u8, 126u8, 72u8, 147u8, 20u8, 180u8, 251u8,
                            208u8,
                        ],
                    )
                }
                ///Remove a fund after the retirement period has ended and all funds have been
                /// returned.
                pub fn dissolve(
                    &self,
                    index: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<Dissolve> {
                    ::subxt::tx::Payload::new_static(
                        "Crowdloan",
                        "dissolve",
                        Dissolve { index },
                        [
                            100u8, 67u8, 105u8, 3u8, 213u8, 149u8, 201u8, 146u8, 241u8, 62u8, 31u8,
                            108u8, 58u8, 30u8, 241u8, 141u8, 134u8, 115u8, 56u8, 131u8, 60u8, 75u8,
                            143u8, 227u8, 11u8, 32u8, 31u8, 230u8, 165u8, 227u8, 170u8, 126u8,
                        ],
                    )
                }
                ///Edit the configuration for an in-progress crowdloan.
                ///
                ///Can only be called by Root origin.
                pub fn edit(
                    &self,
                    index: runtime_types::polkadot_parachain::primitives::Id,
                    cap: ::core::primitive::u128,
                    first_period: ::core::primitive::u32,
                    last_period: ::core::primitive::u32,
                    end: ::core::primitive::u32,
                    verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
                ) -> ::subxt::tx::Payload<Edit> {
                    ::subxt::tx::Payload::new_static(
                        "Crowdloan",
                        "edit",
                        Edit { index, cap, first_period, last_period, end, verifier },
                        [
                            222u8, 124u8, 94u8, 221u8, 36u8, 183u8, 67u8, 114u8, 198u8, 107u8,
                            154u8, 174u8, 142u8, 47u8, 3u8, 181u8, 72u8, 29u8, 2u8, 83u8, 81u8,
                            47u8, 168u8, 142u8, 139u8, 63u8, 136u8, 191u8, 41u8, 252u8, 221u8,
                            56u8,
                        ],
                    )
                }
                ///Add an optional memo to an existing crowdloan contribution.
                ///
                ///Origin must be Signed, and the user must have contributed to the crowdloan.
                pub fn add_memo(
                    &self,
                    index: runtime_types::polkadot_parachain::primitives::Id,
                    memo: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<AddMemo> {
                    ::subxt::tx::Payload::new_static(
                        "Crowdloan",
                        "add_memo",
                        AddMemo { index, memo },
                        [
                            104u8, 199u8, 143u8, 251u8, 28u8, 49u8, 144u8, 186u8, 83u8, 108u8,
                            26u8, 127u8, 22u8, 141u8, 48u8, 62u8, 194u8, 193u8, 97u8, 10u8, 84u8,
                            89u8, 236u8, 191u8, 40u8, 8u8, 1u8, 250u8, 112u8, 165u8, 221u8, 112u8,
                        ],
                    )
                }
                ///Poke the fund into `NewRaise`
                ///
                ///Origin must be Signed, and the fund has non-zero raise.
                pub fn poke(
                    &self,
                    index: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<Poke> {
                    ::subxt::tx::Payload::new_static(
                        "Crowdloan",
                        "poke",
                        Poke { index },
                        [
                            118u8, 60u8, 131u8, 17u8, 27u8, 153u8, 57u8, 24u8, 191u8, 211u8, 101u8,
                            123u8, 34u8, 145u8, 193u8, 113u8, 244u8, 162u8, 148u8, 143u8, 81u8,
                            86u8, 136u8, 23u8, 48u8, 185u8, 52u8, 60u8, 216u8, 243u8, 63u8, 102u8,
                        ],
                    )
                }
                ///Contribute your entire balance to a crowd sale. This will transfer the entire
                /// balance of a user over to fund a parachain slot. It will be
                /// withdrawable when the crowdloan has ended and the funds are unused.
                pub fn contribute_all(
                    &self,
                    index: runtime_types::polkadot_parachain::primitives::Id,
                    signature: ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
                ) -> ::subxt::tx::Payload<ContributeAll> {
                    ::subxt::tx::Payload::new_static(
                        "Crowdloan",
                        "contribute_all",
                        ContributeAll { index, signature },
                        [
                            94u8, 61u8, 105u8, 107u8, 204u8, 18u8, 223u8, 242u8, 19u8, 162u8,
                            205u8, 130u8, 203u8, 73u8, 42u8, 85u8, 208u8, 157u8, 115u8, 112u8,
                            168u8, 10u8, 163u8, 80u8, 222u8, 71u8, 23u8, 194u8, 142u8, 4u8, 82u8,
                            253u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_common::crowdloan::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Create a new crowdloaning campaign.
            pub struct Created {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Contributed to a crowd sale.
            pub struct Contributed {
                pub who: ::subxt::utils::AccountId32,
                pub fund_index: runtime_types::polkadot_parachain::primitives::Id,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Contributed {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "Contributed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Withdrew full balance of a contributor.
            pub struct Withdrew {
                pub who: ::subxt::utils::AccountId32,
                pub fund_index: runtime_types::polkadot_parachain::primitives::Id,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdrew {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "Withdrew";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The loans in a fund have been partially dissolved, i.e. there are some left
            ///over child keys that still need to be killed.
            pub struct PartiallyRefunded {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
            }
            impl ::subxt::events::StaticEvent for PartiallyRefunded {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "PartiallyRefunded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///All loans in a fund have been refunded.
            pub struct AllRefunded {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
            }
            impl ::subxt::events::StaticEvent for AllRefunded {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "AllRefunded";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Fund is dissolved.
            pub struct Dissolved {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
            }
            impl ::subxt::events::StaticEvent for Dissolved {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "Dissolved";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The result of trying to submit a new bid to the Slots pallet.
            pub struct HandleBidResult {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for HandleBidResult {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "HandleBidResult";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The configuration to a crowdloan has been edited.
            pub struct Edited {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
            }
            impl ::subxt::events::StaticEvent for Edited {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "Edited";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A memo has been updated.
            pub struct MemoUpdated {
                pub who: ::subxt::utils::AccountId32,
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                pub memo: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for MemoUpdated {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "MemoUpdated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A parachain has been moved to `NewRaise`
            pub struct AddedToNewRaise {
                pub para_id: runtime_types::polkadot_parachain::primitives::Id,
            }
            impl ::subxt::events::StaticEvent for AddedToNewRaise {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "AddedToNewRaise";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Info on all of the funds.
                pub fn funds(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::crowdloan::FundInfo<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Crowdloan",
                        "Funds",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            231u8, 126u8, 89u8, 84u8, 167u8, 23u8, 211u8, 70u8, 203u8, 124u8, 20u8,
                            162u8, 112u8, 38u8, 201u8, 207u8, 82u8, 202u8, 80u8, 228u8, 4u8, 41u8,
                            95u8, 190u8, 193u8, 185u8, 178u8, 85u8, 179u8, 102u8, 53u8, 63u8,
                        ],
                    )
                }
                /// Info on all of the funds.
                pub fn funds_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::crowdloan::FundInfo<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Crowdloan",
                        "Funds",
                        Vec::new(),
                        [
                            231u8, 126u8, 89u8, 84u8, 167u8, 23u8, 211u8, 70u8, 203u8, 124u8, 20u8,
                            162u8, 112u8, 38u8, 201u8, 207u8, 82u8, 202u8, 80u8, 228u8, 4u8, 41u8,
                            95u8, 190u8, 193u8, 185u8, 178u8, 85u8, 179u8, 102u8, 53u8, 63u8,
                        ],
                    )
                }
                /// The funds that have had additional contributions during the last block. This is
                /// used in order to determine which funds should submit new or
                /// updated bids.
                pub fn new_raise(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::polkadot_parachain::primitives::Id>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Crowdloan",
                        "NewRaise",
                        vec![],
                        [
                            8u8, 180u8, 9u8, 197u8, 254u8, 198u8, 89u8, 112u8, 29u8, 153u8, 243u8,
                            196u8, 92u8, 204u8, 135u8, 232u8, 93u8, 239u8, 147u8, 103u8, 130u8,
                            28u8, 128u8, 124u8, 4u8, 236u8, 29u8, 248u8, 27u8, 165u8, 111u8, 147u8,
                        ],
                    )
                }
                /// The number of auctions that have entered into their ending period so far.
                pub fn endings_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Crowdloan",
                        "EndingsCount",
                        vec![],
                        [
                            12u8, 159u8, 166u8, 75u8, 192u8, 33u8, 21u8, 244u8, 149u8, 200u8, 49u8,
                            54u8, 191u8, 174u8, 202u8, 86u8, 76u8, 115u8, 189u8, 35u8, 192u8,
                            175u8, 156u8, 188u8, 41u8, 23u8, 92u8, 36u8, 141u8, 235u8, 248u8,
                            143u8,
                        ],
                    )
                }
                /// Tracker for the next available fund index
                pub fn next_fund_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Crowdloan",
                        "NextFundIndex",
                        vec![],
                        [
                            1u8, 215u8, 164u8, 194u8, 231u8, 34u8, 207u8, 19u8, 149u8, 187u8, 3u8,
                            176u8, 194u8, 240u8, 180u8, 169u8, 214u8, 194u8, 202u8, 240u8, 209u8,
                            6u8, 244u8, 46u8, 54u8, 142u8, 61u8, 220u8, 240u8, 96u8, 10u8, 168u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// `PalletId` for the crowdloan pallet. An appropriate value could be
                /// `PalletId(*b"py/cfund")`
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Crowdloan",
                        "PalletId",
                        [
                            139u8, 109u8, 228u8, 151u8, 252u8, 32u8, 130u8, 69u8, 112u8, 154u8,
                            174u8, 45u8, 83u8, 245u8, 51u8, 132u8, 173u8, 5u8, 186u8, 24u8, 243u8,
                            9u8, 12u8, 214u8, 80u8, 74u8, 69u8, 189u8, 30u8, 94u8, 22u8, 39u8,
                        ],
                    )
                }
                /// The minimum amount that may be contributed into a crowdloan. Should almost
                /// certainly be at least `ExistentialDeposit`.
                pub fn min_contribution(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Crowdloan",
                        "MinContribution",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                /// Max number of storage keys to remove per extrinsic call.
                pub fn remove_keys_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Crowdloan",
                        "RemoveKeysLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xcm_pallet {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Send {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TeleportAssets {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                pub fee_asset_item: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReserveTransferAssets {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                pub fee_asset_item: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Execute {
                pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceXcmVersion {
                pub location:
                    ::std::boxed::Box<runtime_types::xcm::v3::multilocation::MultiLocation>,
                pub xcm_version: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceDefaultXcmVersion {
                pub maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceSubscribeVersionNotify {
                pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceUnsubscribeVersionNotify {
                pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LimitedReserveTransferAssets {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                pub fee_asset_item: ::core::primitive::u32,
                pub weight_limit: runtime_types::xcm::v3::WeightLimit,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LimitedTeleportAssets {
                pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                pub fee_asset_item: ::core::primitive::u32,
                pub weight_limit: runtime_types::xcm::v3::WeightLimit,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn send(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    message: runtime_types::xcm::VersionedXcm,
                ) -> ::subxt::tx::Payload<Send> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "send",
                        Send {
                            dest: ::std::boxed::Box::new(dest),
                            message: ::std::boxed::Box::new(message),
                        },
                        [
                            246u8, 35u8, 227u8, 112u8, 223u8, 7u8, 44u8, 186u8, 60u8, 225u8, 153u8,
                            249u8, 104u8, 51u8, 123u8, 227u8, 143u8, 65u8, 232u8, 209u8, 178u8,
                            104u8, 70u8, 56u8, 230u8, 14u8, 75u8, 83u8, 250u8, 160u8, 9u8, 39u8,
                        ],
                    )
                }
                ///Teleport some assets from the local chain to some destination chain.
                ///
                ///Fee payment on the destination side is made from the asset in the `assets`
                /// vector of index `fee_asset_item`. The weight limit for fees is
                /// not provided and thus is unlimited, with all fees taken as
                /// needed from the asset.
                ///
                /// - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
                /// - `dest`: Destination context for the assets. Will typically be `X2(Parent,
                ///   Parachain(..))` to send
                ///  from parachain to parachain, or `X1(Parachain(..))` to send from relay to
                /// parachain.
                /// - `beneficiary`: A beneficiary location for the assets in the context of `dest`.
                ///   Will generally be
                ///  an `AccountId32` value.
                /// - `assets`: The assets to be withdrawn. The first item should be the currency
                ///   used to to pay the fee on the
                ///  `dest` side. May not be empty.
                /// - `fee_asset_item`: The index into `assets` of the item which should be used to
                ///   pay
                ///  fees.
                pub fn teleport_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<TeleportAssets> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "teleport_assets",
                        TeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            187u8, 42u8, 2u8, 96u8, 105u8, 125u8, 74u8, 53u8, 2u8, 21u8, 31u8,
                            160u8, 201u8, 197u8, 157u8, 190u8, 40u8, 145u8, 5u8, 99u8, 194u8, 41u8,
                            114u8, 60u8, 165u8, 186u8, 15u8, 226u8, 85u8, 113u8, 159u8, 136u8,
                        ],
                    )
                }
                ///Transfer some assets from the local chain to the sovereign account of a
                /// destination chain and forward a notification XCM.
                ///
                ///Fee payment on the destination side is made from the asset in the `assets`
                /// vector of index `fee_asset_item`. The weight limit for fees is
                /// not provided and thus is unlimited, with all fees taken as
                /// needed from the asset.
                ///
                /// - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
                /// - `dest`: Destination context for the assets. Will typically be `X2(Parent,
                ///   Parachain(..))` to send
                ///  from parachain to parachain, or `X1(Parachain(..))` to send from relay to
                /// parachain.
                /// - `beneficiary`: A beneficiary location for the assets in the context of `dest`.
                ///   Will generally be
                ///  an `AccountId32` value.
                /// - `assets`: The assets to be withdrawn. This should include the assets used to
                ///   pay the fee on the
                ///  `dest` side.
                /// - `fee_asset_item`: The index into `assets` of the item which should be used to
                ///   pay
                ///  fees.
                pub fn reserve_transfer_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ReserveTransferAssets> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "reserve_transfer_assets",
                        ReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            249u8, 177u8, 76u8, 204u8, 186u8, 165u8, 16u8, 186u8, 129u8, 239u8,
                            65u8, 252u8, 9u8, 132u8, 32u8, 164u8, 117u8, 177u8, 40u8, 21u8, 196u8,
                            246u8, 147u8, 2u8, 95u8, 110u8, 68u8, 162u8, 148u8, 9u8, 59u8, 170u8,
                        ],
                    )
                }
                ///Execute an XCM message from a local, signed, origin.
                ///
                ///An event is deposited indicating whether `msg` could be executed completely or
                /// only partially.
                ///
                ///No more than `max_weight` will be used in its attempted execution. If this is
                /// less than the maximum amount of weight that the message could
                /// take to be executed, then no execution attempt will be made.
                ///
                ///NOTE: A successful return to this does *not* imply that the `msg` was executed
                /// successfully to completion; only that *some* of it was executed.
                pub fn execute(
                    &self,
                    message: runtime_types::xcm::VersionedXcm,
                    max_weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<Execute> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "execute",
                        Execute { message: ::std::boxed::Box::new(message), max_weight },
                        [
                            102u8, 41u8, 146u8, 29u8, 241u8, 205u8, 95u8, 153u8, 228u8, 141u8,
                            11u8, 228u8, 13u8, 44u8, 75u8, 204u8, 174u8, 35u8, 155u8, 104u8, 204u8,
                            82u8, 239u8, 98u8, 249u8, 187u8, 193u8, 1u8, 122u8, 88u8, 162u8, 200u8,
                        ],
                    )
                }
                ///Extoll that a particular destination can be communicated with through a
                /// particular version of XCM.
                ///
                /// - `origin`: Must be Root.
                /// - `location`: The destination that is being described.
                /// - `xcm_version`: The latest version of XCM that `location` supports.
                pub fn force_xcm_version(
                    &self,
                    location: runtime_types::xcm::v3::multilocation::MultiLocation,
                    xcm_version: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<ForceXcmVersion> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "force_xcm_version",
                        ForceXcmVersion { location: ::std::boxed::Box::new(location), xcm_version },
                        [
                            68u8, 48u8, 95u8, 61u8, 152u8, 95u8, 213u8, 126u8, 209u8, 176u8, 230u8,
                            160u8, 164u8, 42u8, 128u8, 62u8, 175u8, 3u8, 161u8, 170u8, 20u8, 31u8,
                            216u8, 122u8, 31u8, 77u8, 64u8, 182u8, 121u8, 41u8, 23u8, 80u8,
                        ],
                    )
                }
                ///Set a safe XCM version (the version that XCM should be encoded with if the most
                /// recent version a destination can accept is unknown).
                ///
                /// - `origin`: Must be Root.
                /// - `maybe_xcm_version`: The default XCM encoding version, or `None` to disable.
                pub fn force_default_xcm_version(
                    &self,
                    maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<ForceDefaultXcmVersion> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "force_default_xcm_version",
                        ForceDefaultXcmVersion { maybe_xcm_version },
                        [
                            38u8, 36u8, 59u8, 231u8, 18u8, 79u8, 76u8, 9u8, 200u8, 125u8, 214u8,
                            166u8, 37u8, 99u8, 111u8, 161u8, 135u8, 2u8, 133u8, 157u8, 165u8, 18u8,
                            152u8, 81u8, 209u8, 255u8, 137u8, 237u8, 28u8, 126u8, 224u8, 141u8,
                        ],
                    )
                }
                ///Ask a location to notify us regarding their XCM version and any changes to it.
                ///
                /// - `origin`: Must be Root.
                /// - `location`: The location to which we should subscribe for XCM version
                ///   notifications.
                pub fn force_subscribe_version_notify(
                    &self,
                    location: runtime_types::xcm::VersionedMultiLocation,
                ) -> ::subxt::tx::Payload<ForceSubscribeVersionNotify> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "force_subscribe_version_notify",
                        ForceSubscribeVersionNotify { location: ::std::boxed::Box::new(location) },
                        [
                            236u8, 37u8, 153u8, 26u8, 174u8, 187u8, 154u8, 38u8, 179u8, 223u8,
                            130u8, 32u8, 128u8, 30u8, 148u8, 229u8, 7u8, 185u8, 174u8, 9u8, 96u8,
                            215u8, 189u8, 178u8, 148u8, 141u8, 249u8, 118u8, 7u8, 238u8, 1u8, 49u8,
                        ],
                    )
                }
                ///Require that a particular destination should no longer notify us regarding any
                /// XCM version changes.
                ///
                /// - `origin`: Must be Root.
                /// - `location`: The location to which we are currently subscribed for XCM version
                ///  notifications which we no longer desire.
                pub fn force_unsubscribe_version_notify(
                    &self,
                    location: runtime_types::xcm::VersionedMultiLocation,
                ) -> ::subxt::tx::Payload<ForceUnsubscribeVersionNotify> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "force_unsubscribe_version_notify",
                        ForceUnsubscribeVersionNotify {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            154u8, 169u8, 145u8, 211u8, 185u8, 71u8, 9u8, 63u8, 3u8, 158u8, 187u8,
                            173u8, 115u8, 166u8, 100u8, 66u8, 12u8, 40u8, 198u8, 40u8, 213u8,
                            104u8, 95u8, 183u8, 215u8, 53u8, 94u8, 158u8, 106u8, 56u8, 149u8, 52u8,
                        ],
                    )
                }
                ///Transfer some assets from the local chain to the sovereign account of a
                /// destination chain and forward a notification XCM.
                ///
                ///Fee payment on the destination side is made from the asset in the `assets`
                /// vector of index `fee_asset_item`, up to enough to pay for
                /// `weight_limit` of weight. If more weight is needed than
                /// `weight_limit`, then the operation will fail and the assets send may be
                /// at risk.
                ///
                /// - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
                /// - `dest`: Destination context for the assets. Will typically be `X2(Parent,
                ///   Parachain(..))` to send
                ///  from parachain to parachain, or `X1(Parachain(..))` to send from relay to
                /// parachain.
                /// - `beneficiary`: A beneficiary location for the assets in the context of `dest`.
                ///   Will generally be
                ///  an `AccountId32` value.
                /// - `assets`: The assets to be withdrawn. This should include the assets used to
                ///   pay the fee on the
                ///  `dest` side.
                /// - `fee_asset_item`: The index into `assets` of the item which should be used to
                ///   pay
                ///  fees.
                /// - `weight_limit`: The remote-side weight limit, if any, for the XCM fee
                ///   purchase.
                pub fn limited_reserve_transfer_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                    weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<LimitedReserveTransferAssets> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "limited_reserve_transfer_assets",
                        LimitedReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            131u8, 191u8, 89u8, 27u8, 236u8, 142u8, 130u8, 129u8, 245u8, 95u8,
                            159u8, 96u8, 252u8, 80u8, 28u8, 40u8, 128u8, 55u8, 41u8, 123u8, 22u8,
                            18u8, 0u8, 236u8, 77u8, 68u8, 135u8, 181u8, 40u8, 47u8, 92u8, 240u8,
                        ],
                    )
                }
                ///Teleport some assets from the local chain to some destination chain.
                ///
                ///Fee payment on the destination side is made from the asset in the `assets`
                /// vector of index `fee_asset_item`, up to enough to pay for
                /// `weight_limit` of weight. If more weight is needed than
                /// `weight_limit`, then the operation will fail and the assets send may be
                /// at risk.
                ///
                /// - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
                /// - `dest`: Destination context for the assets. Will typically be `X2(Parent,
                ///   Parachain(..))` to send
                ///  from parachain to parachain, or `X1(Parachain(..))` to send from relay to
                /// parachain.
                /// - `beneficiary`: A beneficiary location for the assets in the context of `dest`.
                ///   Will generally be
                ///  an `AccountId32` value.
                /// - `assets`: The assets to be withdrawn. The first item should be the currency
                ///   used to to pay the fee on the
                ///  `dest` side. May not be empty.
                /// - `fee_asset_item`: The index into `assets` of the item which should be used to
                ///   pay
                ///  fees.
                /// - `weight_limit`: The remote-side weight limit, if any, for the XCM fee
                ///   purchase.
                pub fn limited_teleport_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                    weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<LimitedTeleportAssets> {
                    ::subxt::tx::Payload::new_static(
                        "XcmPallet",
                        "limited_teleport_assets",
                        LimitedTeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            234u8, 19u8, 104u8, 174u8, 98u8, 159u8, 205u8, 110u8, 240u8, 78u8,
                            186u8, 138u8, 236u8, 116u8, 104u8, 215u8, 57u8, 178u8, 166u8, 208u8,
                            197u8, 113u8, 101u8, 56u8, 23u8, 56u8, 84u8, 14u8, 173u8, 70u8, 211u8,
                            201u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Execution of an XCM message was attempted.
            ///
            ///\[ outcome \]
            pub struct Attempted(pub runtime_types::xcm::v3::traits::Outcome);
            impl ::subxt::events::StaticEvent for Attempted {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "Attempted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A XCM message was sent.
            ///
            ///\[ origin, destination, message \]
            pub struct Sent(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::Xcm,
            );
            impl ::subxt::events::StaticEvent for Sent {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "Sent";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Query response received which does not match a registered query. This may be because
            /// a matching query was never registered, it may be because it is a
            /// duplicate response, or because the query timed out.
            ///
            ///\[ origin location, id \]
            pub struct UnexpectedResponse(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
            );
            impl ::subxt::events::StaticEvent for UnexpectedResponse {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "UnexpectedResponse";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Query response has been received and is ready for taking with `take_response`. There
            /// is no registered notification call.
            ///
            ///\[ id, response \]
            pub struct ResponseReady(
                pub ::core::primitive::u64,
                pub runtime_types::xcm::v3::Response,
            );
            impl ::subxt::events::StaticEvent for ResponseReady {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "ResponseReady";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Query response has been received and query is removed. The registered notification
            /// has been dispatched and executed successfully.
            ///
            ///\[ id, pallet index, call index \]
            pub struct Notified(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
            );
            impl ::subxt::events::StaticEvent for Notified {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "Notified";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Query response has been received and query is removed. The registered notification
            /// could not be dispatched because the dispatch weight is greater than the
            /// maximum weight originally budgeted by this runtime for the query result.
            ///
            ///\[ id, pallet index, call index, actual weight, max budgeted weight \]
            pub struct NotifyOverweight(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
                pub runtime_types::sp_weights::weight_v2::Weight,
                pub runtime_types::sp_weights::weight_v2::Weight,
            );
            impl ::subxt::events::StaticEvent for NotifyOverweight {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "NotifyOverweight";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Query response has been received and query is removed. There was a general error
            /// with dispatching the notification call.
            ///
            ///\[ id, pallet index, call index \]
            pub struct NotifyDispatchError(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
            );
            impl ::subxt::events::StaticEvent for NotifyDispatchError {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "NotifyDispatchError";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Query response has been received and query is removed. The dispatch was unable to be
            ///decoded into a `Call`; this might be due to dispatch function having a signature
            /// which is not `(origin, QueryId, Response)`.
            ///
            ///\[ id, pallet index, call index \]
            pub struct NotifyDecodeFailed(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
            );
            impl ::subxt::events::StaticEvent for NotifyDecodeFailed {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "NotifyDecodeFailed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Expected query response has been received but the origin location of the response
            /// does not match that expected. The query remains registered for a later,
            /// valid, response to be received and acted upon.
            ///
            ///\[ origin location, id, expected location \]
            pub struct InvalidResponder(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
                pub ::core::option::Option<runtime_types::xcm::v3::multilocation::MultiLocation>,
            );
            impl ::subxt::events::StaticEvent for InvalidResponder {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "InvalidResponder";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Expected query response has been received but the expected origin location placed in
            ///storage by this runtime previously cannot be decoded. The query remains registered.
            ///
            ///This is unexpected (since a location placed in storage in a previously executing
            ///runtime should be readable prior to query timeout) and dangerous since the possibly
            ///valid response will be dropped. Manual governance intervention is probably going to
            /// be needed.
            ///
            ///\[ origin location, id \]
            pub struct InvalidResponderVersion(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
            );
            impl ::subxt::events::StaticEvent for InvalidResponderVersion {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "InvalidResponderVersion";
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Received query response has been read and removed.
            ///
            ///\[ id \]
            pub struct ResponseTaken(pub ::core::primitive::u64);
            impl ::subxt::events::StaticEvent for ResponseTaken {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "ResponseTaken";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some assets have been placed in an asset trap.
            ///
            ///\[ hash, origin, assets \]
            pub struct AssetsTrapped(
                pub ::subxt::utils::H256,
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::VersionedMultiAssets,
            );
            impl ::subxt::events::StaticEvent for AssetsTrapped {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "AssetsTrapped";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///An XCM version change notification message has been attempted to be sent.
            ///
            ///The cost of sending it (borne by the chain) is included.
            ///
            ///\[ destination, result, cost \]
            pub struct VersionChangeNotified(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u32,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for VersionChangeNotified {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "VersionChangeNotified";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The supported version of a location has been changed. This might be through an
            ///automatic notification or a manual intervention.
            ///
            ///\[ location, XCM version \]
            pub struct SupportedVersionChanged(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u32,
            );
            impl ::subxt::events::StaticEvent for SupportedVersionChanged {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "SupportedVersionChanged";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A given location which had a version change subscription was dropped owing to an
            /// error sending the notification to it.
            ///
            ///\[ location, query ID, error \]
            pub struct NotifyTargetSendFail(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
                pub runtime_types::xcm::v3::traits::Error,
            );
            impl ::subxt::events::StaticEvent for NotifyTargetSendFail {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "NotifyTargetSendFail";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A given location which had a version change subscription was dropped owing to an
            /// error migrating the location to our new XCM format.
            ///
            ///\[ location, query ID \]
            pub struct NotifyTargetMigrationFail(
                pub runtime_types::xcm::VersionedMultiLocation,
                pub ::core::primitive::u64,
            );
            impl ::subxt::events::StaticEvent for NotifyTargetMigrationFail {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "NotifyTargetMigrationFail";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Expected query response has been received but the expected querier location placed
            /// in storage by this runtime previously cannot be decoded. The query
            /// remains registered.
            ///
            ///This is unexpected (since a location placed in storage in a previously executing
            ///runtime should be readable prior to query timeout) and dangerous since the possibly
            ///valid response will be dropped. Manual governance intervention is probably going to
            /// be needed.
            ///
            ///\[ origin location, id \]
            pub struct InvalidQuerierVersion(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
            );
            impl ::subxt::events::StaticEvent for InvalidQuerierVersion {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "InvalidQuerierVersion";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Expected query response has been received but the querier location of the response
            /// does not match the expected. The query remains registered for a later,
            /// valid, response to be received and acted upon.
            ///
            ///\[ origin location, id, expected querier, maybe actual querier \]
            pub struct InvalidQuerier(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::option::Option<runtime_types::xcm::v3::multilocation::MultiLocation>,
            );
            impl ::subxt::events::StaticEvent for InvalidQuerier {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "InvalidQuerier";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A remote has requested XCM version change notification from us and we have honored
            /// it. A version information message is sent to them and its cost is
            /// included.
            ///
            ///\[ destination location, cost \]
            pub struct VersionNotifyStarted(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for VersionNotifyStarted {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "VersionNotifyStarted";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///We have requested that a remote chain sends us XCM version change notifications.
            ///
            ///\[ destination location, cost \]
            pub struct VersionNotifyRequested(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for VersionNotifyRequested {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "VersionNotifyRequested";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///We have requested that a remote chain stops sending us XCM version change
            /// notifications.
            ///
            ///\[ destination location, cost \]
            pub struct VersionNotifyUnrequested(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for VersionNotifyUnrequested {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "VersionNotifyUnrequested";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Fees were paid from a location for an operation (often for using `SendXcm`).
            ///
            ///\[ paying location, fees \]
            pub struct FeesPaid(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for FeesPaid {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "FeesPaid";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some assets have been claimed from an asset trap
            ///
            ///\[ hash, origin, assets \]
            pub struct AssetsClaimed(
                pub ::subxt::utils::H256,
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::VersionedMultiAssets,
            );
            impl ::subxt::events::StaticEvent for AssetsClaimed {
                const PALLET: &'static str = "XcmPallet";
                const EVENT: &'static str = "AssetsClaimed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The latest available query index.
                pub fn query_counter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "QueryCounter",
                        vec![],
                        [
                            137u8, 58u8, 184u8, 88u8, 247u8, 22u8, 151u8, 64u8, 50u8, 77u8, 49u8,
                            10u8, 234u8, 84u8, 213u8, 156u8, 26u8, 200u8, 214u8, 225u8, 125u8,
                            231u8, 42u8, 93u8, 159u8, 168u8, 86u8, 201u8, 116u8, 153u8, 41u8,
                            127u8,
                        ],
                    )
                }
                /// The ongoing queries.
                pub fn queries(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "Queries",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            72u8, 239u8, 157u8, 117u8, 200u8, 28u8, 80u8, 70u8, 205u8, 253u8,
                            147u8, 30u8, 130u8, 72u8, 154u8, 95u8, 183u8, 162u8, 165u8, 203u8,
                            128u8, 98u8, 216u8, 172u8, 98u8, 220u8, 16u8, 236u8, 216u8, 68u8, 33u8,
                            184u8,
                        ],
                    )
                }
                /// The ongoing queries.
                pub fn queries_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "Queries",
                        Vec::new(),
                        [
                            72u8, 239u8, 157u8, 117u8, 200u8, 28u8, 80u8, 70u8, 205u8, 253u8,
                            147u8, 30u8, 130u8, 72u8, 154u8, 95u8, 183u8, 162u8, 165u8, 203u8,
                            128u8, 98u8, 216u8, 172u8, 98u8, 220u8, 16u8, 236u8, 216u8, 68u8, 33u8,
                            184u8,
                        ],
                    )
                }
                /// The existing asset traps.
                ///
                /// Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is
                /// the number of times this pair has been trapped (usually just 1
                /// if it exists at all).
                pub fn asset_traps(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "AssetTraps",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            4u8, 185u8, 92u8, 4u8, 7u8, 71u8, 214u8, 1u8, 141u8, 59u8, 87u8, 55u8,
                            149u8, 26u8, 125u8, 8u8, 88u8, 31u8, 240u8, 138u8, 133u8, 28u8, 37u8,
                            131u8, 107u8, 218u8, 86u8, 152u8, 147u8, 44u8, 19u8, 239u8,
                        ],
                    )
                }
                /// The existing asset traps.
                ///
                /// Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is
                /// the number of times this pair has been trapped (usually just 1
                /// if it exists at all).
                pub fn asset_traps_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "AssetTraps",
                        Vec::new(),
                        [
                            4u8, 185u8, 92u8, 4u8, 7u8, 71u8, 214u8, 1u8, 141u8, 59u8, 87u8, 55u8,
                            149u8, 26u8, 125u8, 8u8, 88u8, 31u8, 240u8, 138u8, 133u8, 28u8, 37u8,
                            131u8, 107u8, 218u8, 86u8, 152u8, 147u8, 44u8, 19u8, 239u8,
                        ],
                    )
                }
                /// Default version to encode XCM when latest version of destination is unknown. If
                /// `None`, then the destinations whose XCM version is unknown are
                /// considered unreachable.
                pub fn safe_xcm_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "SafeXcmVersion",
                        vec![],
                        [
                            1u8, 223u8, 218u8, 204u8, 222u8, 129u8, 137u8, 237u8, 197u8, 142u8,
                            233u8, 66u8, 229u8, 153u8, 138u8, 222u8, 113u8, 164u8, 135u8, 213u8,
                            233u8, 34u8, 24u8, 23u8, 215u8, 59u8, 40u8, 188u8, 45u8, 244u8, 205u8,
                            199u8,
                        ],
                    )
                }
                /// The Latest versions that we know various locations support.
                pub fn supported_version(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "SupportedVersion",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            16u8, 172u8, 183u8, 14u8, 63u8, 199u8, 42u8, 204u8, 218u8, 197u8,
                            129u8, 40u8, 32u8, 213u8, 50u8, 170u8, 231u8, 123u8, 188u8, 83u8,
                            250u8, 148u8, 133u8, 78u8, 249u8, 33u8, 122u8, 55u8, 22u8, 179u8, 98u8,
                            113u8,
                        ],
                    )
                }
                /// The Latest versions that we know various locations support.
                pub fn supported_version_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "SupportedVersion",
                        Vec::new(),
                        [
                            16u8, 172u8, 183u8, 14u8, 63u8, 199u8, 42u8, 204u8, 218u8, 197u8,
                            129u8, 40u8, 32u8, 213u8, 50u8, 170u8, 231u8, 123u8, 188u8, 83u8,
                            250u8, 148u8, 133u8, 78u8, 249u8, 33u8, 122u8, 55u8, 22u8, 179u8, 98u8,
                            113u8,
                        ],
                    )
                }
                /// All locations that we have requested version notifications from.
                pub fn version_notifiers(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "VersionNotifiers",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            137u8, 87u8, 59u8, 219u8, 207u8, 188u8, 145u8, 38u8, 197u8, 219u8,
                            197u8, 179u8, 102u8, 25u8, 184u8, 83u8, 31u8, 63u8, 251u8, 21u8, 211u8,
                            124u8, 23u8, 40u8, 4u8, 43u8, 113u8, 158u8, 233u8, 192u8, 38u8, 177u8,
                        ],
                    )
                }
                /// All locations that we have requested version notifications from.
                pub fn version_notifiers_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "VersionNotifiers",
                        Vec::new(),
                        [
                            137u8, 87u8, 59u8, 219u8, 207u8, 188u8, 145u8, 38u8, 197u8, 219u8,
                            197u8, 179u8, 102u8, 25u8, 184u8, 83u8, 31u8, 63u8, 251u8, 21u8, 211u8,
                            124u8, 23u8, 40u8, 4u8, 43u8, 113u8, 158u8, 233u8, 192u8, 38u8, 177u8,
                        ],
                    )
                }
                /// The target locations that are subscribed to our version changes, as well as the
                /// most recent of our versions we informed them of.
                pub fn version_notify_targets(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u64,
                        runtime_types::sp_weights::weight_v2::Weight,
                        ::core::primitive::u32,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "VersionNotifyTargets",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            138u8, 26u8, 26u8, 108u8, 21u8, 255u8, 143u8, 241u8, 15u8, 163u8, 22u8,
                            155u8, 221u8, 63u8, 58u8, 104u8, 4u8, 186u8, 66u8, 178u8, 67u8, 178u8,
                            220u8, 78u8, 1u8, 77u8, 45u8, 214u8, 98u8, 240u8, 120u8, 254u8,
                        ],
                    )
                }
                /// The target locations that are subscribed to our version changes, as well as the
                /// most recent of our versions we informed them of.
                pub fn version_notify_targets_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u64,
                        runtime_types::sp_weights::weight_v2::Weight,
                        ::core::primitive::u32,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "VersionNotifyTargets",
                        Vec::new(),
                        [
                            138u8, 26u8, 26u8, 108u8, 21u8, 255u8, 143u8, 241u8, 15u8, 163u8, 22u8,
                            155u8, 221u8, 63u8, 58u8, 104u8, 4u8, 186u8, 66u8, 178u8, 67u8, 178u8,
                            220u8, 78u8, 1u8, 77u8, 45u8, 214u8, 98u8, 240u8, 120u8, 254u8,
                        ],
                    )
                }
                /// Destinations whose latest XCM version we would like to know. Duplicates not
                /// allowed, and the `u32` counter is the number of times that a
                /// send to the destination has been attempted, which is used as a
                /// prioritization.
                pub fn version_discovery_queue(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::xcm::VersionedMultiLocation,
                        ::core::primitive::u32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "VersionDiscoveryQueue",
                        vec![],
                        [
                            134u8, 60u8, 255u8, 145u8, 139u8, 29u8, 38u8, 47u8, 209u8, 218u8,
                            127u8, 123u8, 2u8, 196u8, 52u8, 99u8, 143u8, 112u8, 0u8, 133u8, 99u8,
                            218u8, 187u8, 171u8, 175u8, 153u8, 149u8, 1u8, 57u8, 45u8, 118u8, 79u8,
                        ],
                    )
                }
                /// The current migration's stage, if any.
                pub fn current_migration(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::VersionMigrationStage,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "CurrentMigration",
                        vec![],
                        [
                            137u8, 144u8, 168u8, 185u8, 158u8, 90u8, 127u8, 243u8, 227u8, 134u8,
                            150u8, 73u8, 15u8, 99u8, 23u8, 47u8, 68u8, 18u8, 39u8, 16u8, 24u8,
                            43u8, 161u8, 56u8, 66u8, 111u8, 16u8, 7u8, 252u8, 125u8, 100u8, 225u8,
                        ],
                    )
                }
                /// Fungible assets which we know are locked on a remote chain.
                pub fn remote_locked_fungibles(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _2: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedAssetId>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::RemoteLockedFungibleRecord,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "RemoteLockedFungibles",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            26u8, 71u8, 1u8, 2u8, 214u8, 3u8, 65u8, 62u8, 133u8, 85u8, 151u8,
                            180u8, 225u8, 180u8, 40u8, 49u8, 133u8, 107u8, 190u8, 102u8, 1u8,
                            111u8, 144u8, 240u8, 0u8, 209u8, 198u8, 76u8, 143u8, 121u8, 2u8, 118u8,
                        ],
                    )
                }
                /// Fungible assets which we know are locked on a remote chain.
                pub fn remote_locked_fungibles_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::RemoteLockedFungibleRecord,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "RemoteLockedFungibles",
                        Vec::new(),
                        [
                            26u8, 71u8, 1u8, 2u8, 214u8, 3u8, 65u8, 62u8, 133u8, 85u8, 151u8,
                            180u8, 225u8, 180u8, 40u8, 49u8, 133u8, 107u8, 190u8, 102u8, 1u8,
                            111u8, 144u8, 240u8, 0u8, 209u8, 198u8, 76u8, 143u8, 121u8, 2u8, 118u8,
                        ],
                    )
                }
                /// Fungible assets which we know are locked on this chain.
                pub fn locked_fungibles(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u128,
                        runtime_types::xcm::VersionedMultiLocation,
                    )>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "LockedFungibles",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            158u8, 103u8, 153u8, 216u8, 19u8, 122u8, 251u8, 183u8, 15u8, 143u8,
                            161u8, 105u8, 168u8, 100u8, 76u8, 220u8, 56u8, 129u8, 185u8, 251u8,
                            220u8, 166u8, 3u8, 100u8, 48u8, 147u8, 123u8, 94u8, 226u8, 112u8, 59u8,
                            171u8,
                        ],
                    )
                }
                /// Fungible assets which we know are locked on this chain.
                pub fn locked_fungibles_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u128,
                        runtime_types::xcm::VersionedMultiLocation,
                    )>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmPallet",
                        "LockedFungibles",
                        Vec::new(),
                        [
                            158u8, 103u8, 153u8, 216u8, 19u8, 122u8, 251u8, 183u8, 15u8, 143u8,
                            161u8, 105u8, 168u8, 100u8, 76u8, 220u8, 56u8, 129u8, 185u8, 251u8,
                            220u8, 166u8, 3u8, 100u8, 48u8, 147u8, 123u8, 94u8, 226u8, 112u8, 59u8,
                            171u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod beefy {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReportEquivocation {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_beefy::EquivocationProof<
                        ::core::primitive::u32,
                        runtime_types::sp_consensus_beefy::crypto::Public,
                        runtime_types::sp_consensus_beefy::crypto::Signature,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReportEquivocationUnsigned {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_beefy::EquivocationProof<
                        ::core::primitive::u32,
                        runtime_types::sp_consensus_beefy::crypto::Public,
                        runtime_types::sp_consensus_beefy::crypto::Signature,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Report voter equivocation/misbehavior. This method will verify the
                ///equivocation proof and validate the given key ownership proof
                ///against the extracted offender. If both are valid, the offence
                ///will be reported.
                pub fn report_equivocation(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_beefy::EquivocationProof<
                        ::core::primitive::u32,
                        runtime_types::sp_consensus_beefy::crypto::Public,
                        runtime_types::sp_consensus_beefy::crypto::Signature,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<ReportEquivocation> {
                    ::subxt::tx::Payload::new_static(
                        "Beefy",
                        "report_equivocation",
                        ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            84u8, 177u8, 52u8, 210u8, 50u8, 121u8, 162u8, 113u8, 51u8, 47u8, 246u8,
                            4u8, 141u8, 154u8, 145u8, 172u8, 197u8, 33u8, 210u8, 199u8, 65u8,
                            118u8, 66u8, 43u8, 218u8, 221u8, 225u8, 165u8, 17u8, 95u8, 215u8, 46u8,
                        ],
                    )
                }
                ///Report voter equivocation/misbehavior. This method will verify the
                ///equivocation proof and validate the given key ownership proof
                ///against the extracted offender. If both are valid, the offence
                ///will be reported.
                ///
                ///This extrinsic must be called unsigned and it is expected that only
                ///block authors will call it (validated in `ValidateUnsigned`), as such
                ///if the block author is defined it will be defined as the equivocation
                ///reporter.
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_beefy::EquivocationProof<
                        ::core::primitive::u32,
                        runtime_types::sp_consensus_beefy::crypto::Public,
                        runtime_types::sp_consensus_beefy::crypto::Signature,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<ReportEquivocationUnsigned> {
                    ::subxt::tx::Payload::new_static(
                        "Beefy",
                        "report_equivocation_unsigned",
                        ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            23u8, 152u8, 85u8, 174u8, 25u8, 45u8, 120u8, 230u8, 176u8, 192u8,
                            110u8, 8u8, 220u8, 213u8, 198u8, 12u8, 28u8, 153u8, 199u8, 135u8, 70u8,
                            227u8, 188u8, 122u8, 195u8, 203u8, 117u8, 227u8, 52u8, 126u8, 210u8,
                            101u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The current authorities set
                pub fn authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::sp_consensus_beefy::crypto::Public,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Beefy",
                        "Authorities",
                        vec![],
                        [
                            180u8, 103u8, 249u8, 204u8, 109u8, 0u8, 211u8, 102u8, 59u8, 184u8,
                            31u8, 52u8, 140u8, 248u8, 10u8, 127u8, 19u8, 50u8, 254u8, 116u8, 124u8,
                            5u8, 94u8, 42u8, 9u8, 138u8, 159u8, 94u8, 26u8, 136u8, 236u8, 141u8,
                        ],
                    )
                }
                /// The current validator set id
                pub fn validator_set_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Beefy",
                        "ValidatorSetId",
                        vec![],
                        [
                            132u8, 47u8, 139u8, 239u8, 214u8, 179u8, 24u8, 63u8, 55u8, 154u8,
                            248u8, 206u8, 73u8, 7u8, 52u8, 135u8, 54u8, 111u8, 250u8, 106u8, 71u8,
                            78u8, 44u8, 44u8, 235u8, 177u8, 36u8, 112u8, 17u8, 122u8, 252u8, 80u8,
                        ],
                    )
                }
                /// Authorities set scheduled to be used with the next session
                pub fn next_authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::sp_consensus_beefy::crypto::Public,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Beefy",
                        "NextAuthorities",
                        vec![],
                        [
                            64u8, 174u8, 216u8, 177u8, 95u8, 133u8, 175u8, 16u8, 171u8, 110u8, 7u8,
                            244u8, 111u8, 89u8, 57u8, 46u8, 52u8, 28u8, 150u8, 117u8, 156u8, 47u8,
                            91u8, 135u8, 196u8, 102u8, 46u8, 4u8, 224u8, 155u8, 83u8, 36u8,
                        ],
                    )
                }
                /// A mapping from BEEFY set ID to the index of the *most recent* session for which
                /// its members were responsible.
                ///
                /// This is only used for validating equivocation proofs. An equivocation proof must
                /// contains a key-ownership proof for a given session, therefore we need a way to
                /// tie together sessions and BEEFY set ids, i.e. we need to
                /// validate that a validator was the owner of a given key on a
                /// given session, and what the active set ID was during that
                /// session.
                ///
                /// TWOX-NOTE: `ValidatorSetId` is not under user control.
                pub fn set_id_session(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Beefy",
                        "SetIdSession",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
                            166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
                            108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8,
                            134u8,
                        ],
                    )
                }
                /// A mapping from BEEFY set ID to the index of the *most recent* session for which
                /// its members were responsible.
                ///
                /// This is only used for validating equivocation proofs. An equivocation proof must
                /// contains a key-ownership proof for a given session, therefore we need a way to
                /// tie together sessions and BEEFY set ids, i.e. we need to
                /// validate that a validator was the owner of a given key on a
                /// given session, and what the active set ID was during that
                /// session.
                ///
                /// TWOX-NOTE: `ValidatorSetId` is not under user control.
                pub fn set_id_session_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Beefy",
                        "SetIdSession",
                        Vec::new(),
                        [
                            91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
                            166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
                            108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8,
                            134u8,
                        ],
                    )
                }
                /// Block number where BEEFY consensus is enabled/started.
                /// If changing this, make sure `Self::ValidatorSetId` is also reset to
                /// `GENESIS_AUTHORITY_SET_ID` in the state of the new block number configured here.
                pub fn genesis_block(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Beefy",
                        "GenesisBlock",
                        vec![],
                        [
                            51u8, 60u8, 5u8, 99u8, 130u8, 62u8, 90u8, 203u8, 124u8, 95u8, 240u8,
                            82u8, 91u8, 91u8, 50u8, 123u8, 49u8, 255u8, 120u8, 183u8, 235u8, 48u8,
                            110u8, 97u8, 78u8, 103u8, 63u8, 138u8, 81u8, 49u8, 89u8, 52u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The maximum number of authorities that can be added.
                pub fn max_authorities(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Beefy",
                        "MaxAuthorities",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The maximum number of entries to keep in the set id to session index mapping.
                ///
                /// Since the `SetIdSession` map is only used for validating equivocations this
                /// value should relate to the bonding duration of whatever staking system is
                /// being used (if any). If equivocation handling is not enabled then this value
                /// can be zero.
                pub fn max_set_id_session_entries(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Beefy",
                        "MaxSetIdSessionEntries",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod mmr_leaf {
        use super::{root_mod, runtime_types};
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Details of current BEEFY authority set.
                pub fn beefy_authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_beefy::mmr::BeefyAuthoritySet<::subxt::utils::H256>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MmrLeaf",
                        "BeefyAuthorities",
                        vec![],
                        [
                            238u8, 154u8, 245u8, 133u8, 41u8, 170u8, 91u8, 75u8, 59u8, 169u8,
                            160u8, 202u8, 204u8, 13u8, 89u8, 0u8, 153u8, 166u8, 54u8, 255u8, 64u8,
                            63u8, 164u8, 33u8, 4u8, 193u8, 79u8, 231u8, 10u8, 95u8, 40u8, 86u8,
                        ],
                    )
                }
                /// Details of next BEEFY authority set.
                ///
                /// This storage entry is used as cache for calls to
                /// `update_beefy_next_authority_set`.
                pub fn beefy_next_authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_beefy::mmr::BeefyAuthoritySet<::subxt::utils::H256>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MmrLeaf",
                        "BeefyNextAuthorities",
                        vec![],
                        [
                            39u8, 40u8, 15u8, 157u8, 20u8, 100u8, 124u8, 98u8, 13u8, 243u8, 221u8,
                            133u8, 245u8, 210u8, 99u8, 159u8, 240u8, 158u8, 33u8, 140u8, 142u8,
                            216u8, 86u8, 227u8, 42u8, 224u8, 148u8, 200u8, 70u8, 105u8, 87u8,
                            155u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod paras_sudo_wrapper {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SudoScheduleParaInitialize {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
                pub genesis: runtime_types::polkadot_runtime_parachains::paras::ParaGenesisArgs,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SudoScheduleParaCleanup {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SudoScheduleParathreadUpgrade {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SudoScheduleParachainDowngrade {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SudoQueueDownwardXcm {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
                pub xcm: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SudoEstablishHrmpChannel {
                pub sender: runtime_types::polkadot_parachain::primitives::Id,
                pub recipient: runtime_types::polkadot_parachain::primitives::Id,
                pub max_capacity: ::core::primitive::u32,
                pub max_message_size: ::core::primitive::u32,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Schedule a para to be initialized at the start of the next session.
                pub fn sudo_schedule_para_initialize(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                    genesis: runtime_types::polkadot_runtime_parachains::paras::ParaGenesisArgs,
                ) -> ::subxt::tx::Payload<SudoScheduleParaInitialize> {
                    ::subxt::tx::Payload::new_static(
                        "ParasSudoWrapper",
                        "sudo_schedule_para_initialize",
                        SudoScheduleParaInitialize { id, genesis },
                        [
                            161u8, 13u8, 138u8, 8u8, 151u8, 36u8, 75u8, 99u8, 66u8, 74u8, 138u8,
                            253u8, 177u8, 201u8, 241u8, 192u8, 179u8, 243u8, 201u8, 47u8, 186u8,
                            103u8, 45u8, 247u8, 1u8, 172u8, 126u8, 2u8, 193u8, 13u8, 171u8, 0u8,
                        ],
                    )
                }
                ///Schedule a para to be cleaned up at the start of the next session.
                pub fn sudo_schedule_para_cleanup(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<SudoScheduleParaCleanup> {
                    ::subxt::tx::Payload::new_static(
                        "ParasSudoWrapper",
                        "sudo_schedule_para_cleanup",
                        SudoScheduleParaCleanup { id },
                        [
                            243u8, 249u8, 108u8, 82u8, 119u8, 200u8, 221u8, 147u8, 17u8, 191u8,
                            73u8, 108u8, 149u8, 254u8, 32u8, 114u8, 151u8, 89u8, 127u8, 39u8,
                            179u8, 69u8, 39u8, 211u8, 109u8, 237u8, 61u8, 87u8, 251u8, 89u8, 238u8,
                            226u8,
                        ],
                    )
                }
                ///Upgrade a parathread to a parachain
                pub fn sudo_schedule_parathread_upgrade(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<SudoScheduleParathreadUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "ParasSudoWrapper",
                        "sudo_schedule_parathread_upgrade",
                        SudoScheduleParathreadUpgrade { id },
                        [
                            168u8, 153u8, 55u8, 74u8, 132u8, 51u8, 111u8, 167u8, 245u8, 23u8, 94u8,
                            223u8, 122u8, 210u8, 93u8, 53u8, 186u8, 145u8, 72u8, 9u8, 5u8, 193u8,
                            4u8, 146u8, 175u8, 200u8, 98u8, 111u8, 110u8, 161u8, 122u8, 229u8,
                        ],
                    )
                }
                ///Downgrade a parachain to a parathread
                pub fn sudo_schedule_parachain_downgrade(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<SudoScheduleParachainDowngrade> {
                    ::subxt::tx::Payload::new_static(
                        "ParasSudoWrapper",
                        "sudo_schedule_parachain_downgrade",
                        SudoScheduleParachainDowngrade { id },
                        [
                            239u8, 188u8, 61u8, 93u8, 81u8, 236u8, 141u8, 47u8, 250u8, 150u8, 33u8,
                            165u8, 84u8, 41u8, 221u8, 228u8, 222u8, 81u8, 159u8, 131u8, 41u8,
                            244u8, 160u8, 31u8, 49u8, 179u8, 200u8, 97u8, 67u8, 100u8, 110u8,
                            196u8,
                        ],
                    )
                }
                ///Send a downward XCM to the given para.
                ///
                ///The given parachain should exist and the payload should not exceed the
                /// preconfigured size `config.max_downward_message_size`.
                pub fn sudo_queue_downward_xcm(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                    xcm: runtime_types::xcm::VersionedXcm,
                ) -> ::subxt::tx::Payload<SudoQueueDownwardXcm> {
                    ::subxt::tx::Payload::new_static(
                        "ParasSudoWrapper",
                        "sudo_queue_downward_xcm",
                        SudoQueueDownwardXcm { id, xcm: ::std::boxed::Box::new(xcm) },
                        [
                            192u8, 40u8, 195u8, 123u8, 178u8, 1u8, 130u8, 171u8, 15u8, 56u8, 103u8,
                            58u8, 252u8, 97u8, 136u8, 151u8, 29u8, 219u8, 102u8, 138u8, 178u8,
                            69u8, 89u8, 162u8, 165u8, 87u8, 112u8, 46u8, 106u8, 67u8, 152u8, 237u8,
                        ],
                    )
                }
                ///Forcefully establish a channel from the sender to the recipient.
                ///
                ///This is equivalent to sending an `Hrmp::hrmp_init_open_channel` extrinsic
                /// followed by `Hrmp::hrmp_accept_open_channel`.
                pub fn sudo_establish_hrmp_channel(
                    &self,
                    sender: runtime_types::polkadot_parachain::primitives::Id,
                    recipient: runtime_types::polkadot_parachain::primitives::Id,
                    max_capacity: ::core::primitive::u32,
                    max_message_size: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<SudoEstablishHrmpChannel> {
                    ::subxt::tx::Payload::new_static(
                        "ParasSudoWrapper",
                        "sudo_establish_hrmp_channel",
                        SudoEstablishHrmpChannel {
                            sender,
                            recipient,
                            max_capacity,
                            max_message_size,
                        },
                        [
                            46u8, 69u8, 133u8, 33u8, 98u8, 44u8, 27u8, 190u8, 248u8, 70u8, 254u8,
                            61u8, 67u8, 234u8, 122u8, 6u8, 192u8, 147u8, 170u8, 221u8, 89u8, 154u8,
                            90u8, 53u8, 48u8, 137u8, 118u8, 207u8, 213u8, 240u8, 197u8, 87u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod assigned_slots {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AssignPermParachainSlot {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AssignTempParachainSlot {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
                pub lease_period_start:
                    runtime_types::polkadot_runtime_common::assigned_slots::SlotLeasePeriodStart,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnassignParachainSlot {
                pub id: runtime_types::polkadot_parachain::primitives::Id,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Assign a permanent parachain slot and immediately create a lease for it.
                pub fn assign_perm_parachain_slot(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<AssignPermParachainSlot> {
                    ::subxt::tx::Payload::new_static(
                        "AssignedSlots",
                        "assign_perm_parachain_slot",
                        AssignPermParachainSlot { id },
                        [
                            118u8, 248u8, 251u8, 88u8, 24u8, 122u8, 7u8, 247u8, 54u8, 81u8, 137u8,
                            86u8, 153u8, 151u8, 188u8, 9u8, 186u8, 83u8, 253u8, 45u8, 135u8, 149u8,
                            51u8, 60u8, 81u8, 147u8, 63u8, 218u8, 140u8, 207u8, 244u8, 165u8,
                        ],
                    )
                }
                ///Assign a temporary parachain slot. The function tries to create a lease for it
                ///immediately if `SlotLeasePeriodStart::Current` is specified, and if the number
                ///of currently active temporary slots is below `MaxTemporarySlotPerLeasePeriod`.
                pub fn assign_temp_parachain_slot(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                    lease_period_start: runtime_types::polkadot_runtime_common::assigned_slots::SlotLeasePeriodStart,
                ) -> ::subxt::tx::Payload<AssignTempParachainSlot> {
                    ::subxt::tx::Payload::new_static(
                        "AssignedSlots",
                        "assign_temp_parachain_slot",
                        AssignTempParachainSlot { id, lease_period_start },
                        [
                            10u8, 235u8, 166u8, 173u8, 8u8, 149u8, 199u8, 31u8, 9u8, 134u8, 134u8,
                            13u8, 252u8, 177u8, 47u8, 9u8, 189u8, 178u8, 6u8, 141u8, 202u8, 100u8,
                            232u8, 94u8, 75u8, 26u8, 26u8, 202u8, 84u8, 143u8, 220u8, 13u8,
                        ],
                    )
                }
                ///Unassign a permanent or temporary parachain slot
                pub fn unassign_parachain_slot(
                    &self,
                    id: runtime_types::polkadot_parachain::primitives::Id,
                ) -> ::subxt::tx::Payload<UnassignParachainSlot> {
                    ::subxt::tx::Payload::new_static(
                        "AssignedSlots",
                        "unassign_parachain_slot",
                        UnassignParachainSlot { id },
                        [
                            121u8, 135u8, 19u8, 137u8, 54u8, 151u8, 163u8, 155u8, 172u8, 37u8,
                            188u8, 214u8, 106u8, 12u8, 14u8, 230u8, 2u8, 114u8, 141u8, 217u8, 24u8,
                            145u8, 253u8, 179u8, 41u8, 9u8, 95u8, 128u8, 141u8, 190u8, 151u8, 29u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::polkadot_runtime_common::assigned_slots::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A para was assigned a permanent parachain slot
            pub struct PermanentSlotAssigned(pub runtime_types::polkadot_parachain::primitives::Id);
            impl ::subxt::events::StaticEvent for PermanentSlotAssigned {
                const PALLET: &'static str = "AssignedSlots";
                const EVENT: &'static str = "PermanentSlotAssigned";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A para was assigned a temporary parachain slot
            pub struct TemporarySlotAssigned(pub runtime_types::polkadot_parachain::primitives::Id);
            impl ::subxt::events::StaticEvent for TemporarySlotAssigned {
                const PALLET: &'static str = "AssignedSlots";
                const EVENT: &'static str = "TemporarySlotAssigned";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Assigned permanent slots, with their start lease period, and duration.
                pub fn permanent_slots(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssignedSlots",
                        "PermanentSlots",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            123u8, 228u8, 93u8, 2u8, 196u8, 127u8, 156u8, 106u8, 36u8, 133u8,
                            137u8, 229u8, 137u8, 116u8, 107u8, 143u8, 47u8, 88u8, 65u8, 26u8,
                            104u8, 15u8, 36u8, 128u8, 189u8, 108u8, 243u8, 37u8, 11u8, 171u8,
                            147u8, 9u8,
                        ],
                    )
                }
                /// Assigned permanent slots, with their start lease period, and duration.
                pub fn permanent_slots_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssignedSlots",
                        "PermanentSlots",
                        Vec::new(),
                        [
                            123u8, 228u8, 93u8, 2u8, 196u8, 127u8, 156u8, 106u8, 36u8, 133u8,
                            137u8, 229u8, 137u8, 116u8, 107u8, 143u8, 47u8, 88u8, 65u8, 26u8,
                            104u8, 15u8, 36u8, 128u8, 189u8, 108u8, 243u8, 37u8, 11u8, 171u8,
                            147u8, 9u8,
                        ],
                    )
                }
                /// Number of assigned (and active) permanent slots.
                pub fn permanent_slot_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssignedSlots",
                        "PermanentSlotCount",
                        vec![],
                        [
                            186u8, 224u8, 144u8, 167u8, 64u8, 193u8, 68u8, 25u8, 146u8, 86u8,
                            109u8, 81u8, 100u8, 197u8, 25u8, 4u8, 27u8, 131u8, 162u8, 7u8, 148u8,
                            198u8, 162u8, 100u8, 197u8, 86u8, 37u8, 43u8, 240u8, 25u8, 18u8, 66u8,
                        ],
                    )
                }
                /// Assigned temporary slots.
                pub fn temporary_slots(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::assigned_slots::ParachainTemporarySlot<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssignedSlots",
                        "TemporarySlots",
                        vec![::subxt::storage::address::make_static_storage_map_key(_0.borrow())],
                        [
                            239u8, 224u8, 55u8, 181u8, 165u8, 130u8, 114u8, 123u8, 255u8, 11u8,
                            248u8, 69u8, 243u8, 159u8, 72u8, 174u8, 138u8, 154u8, 11u8, 247u8,
                            80u8, 216u8, 175u8, 190u8, 49u8, 138u8, 246u8, 66u8, 221u8, 61u8, 18u8,
                            101u8,
                        ],
                    )
                }
                /// Assigned temporary slots.
                pub fn temporary_slots_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_runtime_common::assigned_slots::ParachainTemporarySlot<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssignedSlots",
                        "TemporarySlots",
                        Vec::new(),
                        [
                            239u8, 224u8, 55u8, 181u8, 165u8, 130u8, 114u8, 123u8, 255u8, 11u8,
                            248u8, 69u8, 243u8, 159u8, 72u8, 174u8, 138u8, 154u8, 11u8, 247u8,
                            80u8, 216u8, 175u8, 190u8, 49u8, 138u8, 246u8, 66u8, 221u8, 61u8, 18u8,
                            101u8,
                        ],
                    )
                }
                /// Number of assigned temporary slots.
                pub fn temporary_slot_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssignedSlots",
                        "TemporarySlotCount",
                        vec![],
                        [
                            19u8, 243u8, 53u8, 131u8, 195u8, 143u8, 31u8, 224u8, 182u8, 69u8,
                            209u8, 123u8, 82u8, 155u8, 96u8, 242u8, 109u8, 6u8, 27u8, 193u8, 251u8,
                            45u8, 204u8, 10u8, 43u8, 185u8, 152u8, 181u8, 35u8, 183u8, 235u8,
                            204u8,
                        ],
                    )
                }
                /// Number of active temporary slots in current slot lease period.
                pub fn active_temporary_slot_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssignedSlots",
                        "ActiveTemporarySlotCount",
                        vec![],
                        [
                            72u8, 42u8, 13u8, 42u8, 195u8, 143u8, 174u8, 137u8, 110u8, 144u8,
                            190u8, 117u8, 102u8, 91u8, 66u8, 131u8, 69u8, 139u8, 156u8, 149u8,
                            99u8, 177u8, 118u8, 72u8, 168u8, 191u8, 198u8, 135u8, 72u8, 192u8,
                            130u8, 139u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// The number of lease periods a permanent parachain slot lasts.
                pub fn permanent_slot_lease_period_length(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "AssignedSlots",
                        "PermanentSlotLeasePeriodLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The number of lease periods a temporary parachain slot lasts.
                pub fn temporary_slot_lease_period_length(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "AssignedSlots",
                        "TemporarySlotLeasePeriodLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The max number of permanent slots that can be assigned.
                pub fn max_permanent_slots(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "AssignedSlots",
                        "MaxPermanentSlots",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The max number of temporary slots that can be assigned.
                pub fn max_temporary_slots(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "AssignedSlots",
                        "MaxTemporarySlots",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                /// The max number of temporary slots to be scheduled per lease periods.
                pub fn max_temporary_slot_per_lease_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "AssignedSlots",
                        "MaxTemporarySlotPerLeasePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod validator_manager {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RegisterValidators {
                pub validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DeregisterValidators {
                pub validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Add new validators to the set.
                ///
                ///The new validators will be active from current session + 2.
                pub fn register_validators(
                    &self,
                    validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
                ) -> ::subxt::tx::Payload<RegisterValidators> {
                    ::subxt::tx::Payload::new_static(
                        "ValidatorManager",
                        "register_validators",
                        RegisterValidators { validators },
                        [
                            17u8, 237u8, 46u8, 131u8, 162u8, 213u8, 36u8, 137u8, 92u8, 108u8,
                            181u8, 49u8, 13u8, 232u8, 79u8, 39u8, 80u8, 200u8, 88u8, 168u8, 16u8,
                            239u8, 53u8, 255u8, 155u8, 176u8, 130u8, 69u8, 19u8, 39u8, 48u8, 214u8,
                        ],
                    )
                }
                ///Remove validators from the set.
                ///
                ///The removed validators will be deactivated from current session + 2.
                pub fn deregister_validators(
                    &self,
                    validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
                ) -> ::subxt::tx::Payload<DeregisterValidators> {
                    ::subxt::tx::Payload::new_static(
                        "ValidatorManager",
                        "deregister_validators",
                        DeregisterValidators { validators },
                        [
                            174u8, 68u8, 36u8, 38u8, 204u8, 164u8, 127u8, 114u8, 51u8, 193u8, 35u8,
                            231u8, 161u8, 11u8, 206u8, 181u8, 117u8, 72u8, 226u8, 175u8, 166u8,
                            33u8, 135u8, 192u8, 180u8, 192u8, 98u8, 208u8, 135u8, 249u8, 122u8,
                            159u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::rococo_runtime::validator_manager::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///New validators were added to the set.
            pub struct ValidatorsRegistered(pub ::std::vec::Vec<::subxt::utils::AccountId32>);
            impl ::subxt::events::StaticEvent for ValidatorsRegistered {
                const PALLET: &'static str = "ValidatorManager";
                const EVENT: &'static str = "ValidatorsRegistered";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Validators were removed from the set.
            pub struct ValidatorsDeregistered(pub ::std::vec::Vec<::subxt::utils::AccountId32>);
            impl ::subxt::events::StaticEvent for ValidatorsDeregistered {
                const PALLET: &'static str = "ValidatorManager";
                const EVENT: &'static str = "ValidatorsDeregistered";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Validators that should be retired, because their Parachain was deregistered.
                pub fn validators_to_retire(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ValidatorManager",
                        "ValidatorsToRetire",
                        vec![],
                        [
                            174u8, 83u8, 236u8, 203u8, 146u8, 196u8, 48u8, 111u8, 29u8, 182u8,
                            114u8, 60u8, 7u8, 134u8, 2u8, 255u8, 1u8, 42u8, 186u8, 222u8, 93u8,
                            153u8, 108u8, 35u8, 1u8, 91u8, 197u8, 144u8, 31u8, 81u8, 67u8, 136u8,
                        ],
                    )
                }
                /// Validators that should be added.
                pub fn validators_to_add(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ValidatorManager",
                        "ValidatorsToAdd",
                        vec![],
                        [
                            244u8, 237u8, 251u8, 6u8, 157u8, 59u8, 227u8, 61u8, 240u8, 204u8, 12u8,
                            87u8, 118u8, 12u8, 61u8, 103u8, 194u8, 128u8, 7u8, 67u8, 218u8, 129u8,
                            106u8, 33u8, 135u8, 95u8, 45u8, 208u8, 42u8, 99u8, 83u8, 69u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod state_trie_migration {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ControlAutoMigration {
                pub maybe_config: ::core::option::Option<
                    runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                >,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ContinueMigrate {
                pub limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                pub real_size_upper: ::core::primitive::u32,
                pub witness_task: runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MigrateCustomTop {
                pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                pub witness_size: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MigrateCustomChild {
                pub root: ::std::vec::Vec<::core::primitive::u8>,
                pub child_keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                pub total_size: ::core::primitive::u32,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetSignedMaxLimits {
                pub limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ForceSetProgress {
                pub progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
                pub progress_child: runtime_types::pallet_state_trie_migration::pallet::Progress,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Control the automatic migration.
                ///
                ///The dispatch origin of this call must be [`Config::ControlOrigin`].
                pub fn control_auto_migration(
                    &self,
                    maybe_config: ::core::option::Option<
                        runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    >,
                ) -> ::subxt::tx::Payload<ControlAutoMigration> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "control_auto_migration",
                        ControlAutoMigration { maybe_config },
                        [
                            162u8, 96u8, 125u8, 236u8, 212u8, 188u8, 150u8, 69u8, 75u8, 40u8,
                            116u8, 249u8, 80u8, 248u8, 180u8, 38u8, 167u8, 228u8, 116u8, 130u8,
                            201u8, 59u8, 27u8, 3u8, 24u8, 209u8, 40u8, 0u8, 238u8, 100u8, 173u8,
                            128u8,
                        ],
                    )
                }
                ///Continue the migration for the given `limits`.
                ///
                ///The dispatch origin of this call can be any signed account.
                ///
                ///This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone.
                /// Albeit, Upon successful execution, the transaction fee is
                /// returned.
                ///
                ///The (potentially over-estimated) of the byte length of all the data read must be
                ///provided for up-front fee-payment and weighing. In essence, the caller is
                /// guaranteeing that executing the current `MigrationTask` with the
                /// given `limits` will not exceed `real_size_upper` bytes of read
                /// data.
                ///
                ///The `witness_task` is merely a helper to prevent the caller from being slashed
                /// or generally trigger a migration that they do not intend. This
                /// parameter is just a message from caller, saying that they
                /// believed `witness_task` was the last state of the migration, and
                /// they only wish for their transaction to do anything, if this assumption
                /// holds. In case `witness_task` does not match, the transaction fails.
                ///
                ///Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the
                ///recommended way of doing this is to pass a `limit` that only bounds `count`, as
                /// the `size` limit can always be overwritten.
                pub fn continue_migrate(
                    &self,
                    limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    real_size_upper: ::core::primitive::u32,
                    witness_task: runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
                ) -> ::subxt::tx::Payload<ContinueMigrate> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "continue_migrate",
                        ContinueMigrate { limits, real_size_upper, witness_task },
                        [
                            13u8, 29u8, 35u8, 220u8, 79u8, 73u8, 159u8, 203u8, 121u8, 137u8, 71u8,
                            108u8, 143u8, 95u8, 183u8, 127u8, 247u8, 1u8, 63u8, 10u8, 69u8, 1u8,
                            196u8, 237u8, 175u8, 147u8, 252u8, 168u8, 152u8, 217u8, 135u8, 109u8,
                        ],
                    )
                }
                ///Migrate the list of top keys by iterating each of them one by one.
                ///
                ///This does not affect the global migration process tracker
                /// ([`MigrationProcess`]), and should only be used in case any keys
                /// are leftover due to a bug.
                pub fn migrate_custom_top(
                    &self,
                    keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    witness_size: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<MigrateCustomTop> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "migrate_custom_top",
                        MigrateCustomTop { keys, witness_size },
                        [
                            186u8, 249u8, 25u8, 216u8, 251u8, 100u8, 32u8, 31u8, 174u8, 158u8,
                            202u8, 41u8, 18u8, 130u8, 187u8, 105u8, 83u8, 125u8, 131u8, 212u8,
                            98u8, 120u8, 152u8, 207u8, 208u8, 1u8, 183u8, 181u8, 169u8, 129u8,
                            163u8, 161u8,
                        ],
                    )
                }
                ///Migrate the list of child keys by iterating each of them one by one.
                ///
                ///All of the given child keys must be present under one `child_root`.
                ///
                ///This does not affect the global migration process tracker
                /// ([`MigrationProcess`]), and should only be used in case any keys
                /// are leftover due to a bug.
                pub fn migrate_custom_child(
                    &self,
                    root: ::std::vec::Vec<::core::primitive::u8>,
                    child_keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    total_size: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<MigrateCustomChild> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "migrate_custom_child",
                        MigrateCustomChild { root, child_keys, total_size },
                        [
                            79u8, 93u8, 66u8, 136u8, 84u8, 153u8, 42u8, 104u8, 242u8, 99u8, 225u8,
                            125u8, 233u8, 196u8, 151u8, 160u8, 164u8, 228u8, 36u8, 186u8, 12u8,
                            247u8, 118u8, 12u8, 96u8, 218u8, 38u8, 120u8, 33u8, 147u8, 2u8, 214u8,
                        ],
                    )
                }
                ///Set the maximum limit of the signed migration.
                pub fn set_signed_max_limits(
                    &self,
                    limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                ) -> ::subxt::tx::Payload<SetSignedMaxLimits> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "set_signed_max_limits",
                        SetSignedMaxLimits { limits },
                        [
                            95u8, 185u8, 123u8, 100u8, 144u8, 68u8, 67u8, 101u8, 101u8, 137u8,
                            229u8, 154u8, 172u8, 128u8, 4u8, 164u8, 230u8, 63u8, 196u8, 243u8,
                            118u8, 187u8, 220u8, 168u8, 73u8, 51u8, 254u8, 233u8, 214u8, 238u8,
                            16u8, 227u8,
                        ],
                    )
                }
                ///Forcefully set the progress the running migration.
                ///
                ///This is only useful in one case: the next key to migrate is too big to be
                /// migrated with a signed account, in a parachain context, and we
                /// simply want to skip it. A reasonable example of this would be
                /// `:code:`, which is both very expensive to migrate, and commonly
                /// used, so probably it is already migrated.
                ///
                ///In case you mess things up, you can also, in principle, use this to reset the
                /// migration process.
                pub fn force_set_progress(
                    &self,
                    progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
                    progress_child: runtime_types::pallet_state_trie_migration::pallet::Progress,
                ) -> ::subxt::tx::Payload<ForceSetProgress> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "force_set_progress",
                        ForceSetProgress { progress_top, progress_child },
                        [
                            29u8, 180u8, 184u8, 136u8, 24u8, 192u8, 64u8, 95u8, 243u8, 171u8,
                            184u8, 20u8, 62u8, 5u8, 1u8, 25u8, 12u8, 105u8, 137u8, 81u8, 161u8,
                            39u8, 215u8, 180u8, 225u8, 24u8, 122u8, 124u8, 122u8, 183u8, 141u8,
                            224u8,
                        ],
                    )
                }
            }
        }
        ///Inner events of this pallet.
        pub type Event = runtime_types::pallet_state_trie_migration::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Given number of `(top, child)` keys were migrated respectively, with the given
            ///`compute`.
            pub struct Migrated {
                pub top: ::core::primitive::u32,
                pub child: ::core::primitive::u32,
                pub compute: runtime_types::pallet_state_trie_migration::pallet::MigrationCompute,
            }
            impl ::subxt::events::StaticEvent for Migrated {
                const PALLET: &'static str = "StateTrieMigration";
                const EVENT: &'static str = "Migrated";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Some account got slashed by the given amount.
            pub struct Slashed {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "StateTrieMigration";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The auto migration task finished.
            pub struct AutoMigrationFinished;
            impl ::subxt::events::StaticEvent for AutoMigrationFinished {
                const PALLET: &'static str = "StateTrieMigration";
                const EVENT: &'static str = "AutoMigrationFinished";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///Migration got halted due to an error or miss-configuration.
            pub struct Halted {
                pub error: runtime_types::pallet_state_trie_migration::pallet::Error,
            }
            impl ::subxt::events::StaticEvent for Halted {
                const PALLET: &'static str = "StateTrieMigration";
                const EVENT: &'static str = "Halted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// Migration progress.
                ///
                /// This stores the snapshot of the last migrated keys. It can be set into motion
                /// and move forward by any of the means provided by this pallet.
                pub fn migration_process(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "StateTrieMigration",
                        "MigrationProcess",
                        vec![],
                        [
                            151u8, 248u8, 89u8, 241u8, 228u8, 249u8, 59u8, 199u8, 21u8, 95u8,
                            182u8, 95u8, 205u8, 226u8, 119u8, 123u8, 241u8, 60u8, 242u8, 52u8,
                            113u8, 101u8, 170u8, 140u8, 66u8, 66u8, 248u8, 130u8, 130u8, 140u8,
                            206u8, 202u8,
                        ],
                    )
                }
                /// The limits that are imposed on automatic migrations.
                ///
                /// If set to None, then no automatic migration happens.
                pub fn auto_limits(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<
                        runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "StateTrieMigration",
                        "AutoLimits",
                        vec![],
                        [
                            214u8, 100u8, 160u8, 204u8, 4u8, 205u8, 205u8, 100u8, 60u8, 127u8,
                            84u8, 243u8, 50u8, 164u8, 153u8, 1u8, 250u8, 123u8, 134u8, 109u8,
                            115u8, 173u8, 102u8, 104u8, 18u8, 134u8, 43u8, 3u8, 7u8, 26u8, 157u8,
                            39u8,
                        ],
                    )
                }
                /// The maximum limits that the signed migration could use.
                ///
                /// If not set, no signed submission is allowed.
                pub fn signed_migration_max_limits(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "StateTrieMigration",
                        "SignedMigrationMaxLimits",
                        vec![],
                        [
                            142u8, 87u8, 222u8, 135u8, 24u8, 133u8, 45u8, 18u8, 104u8, 31u8, 147u8,
                            121u8, 17u8, 155u8, 64u8, 166u8, 209u8, 145u8, 231u8, 65u8, 172u8,
                            104u8, 165u8, 19u8, 181u8, 240u8, 169u8, 6u8, 249u8, 140u8, 63u8,
                            252u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                /// Maximal number of bytes that a key can have.
                ///
                /// FRAME itself does not limit the key length.
                /// The concrete value must therefore depend on your storage usage.
                /// A [`frame_support::storage::StorageNMap`] for example can have an arbitrary
                /// number of keys which are then hashed and concatenated, resulting
                /// in arbitrarily long keys.
                ///
                /// Use the *state migration RPC* to retrieve the length of the longest key in your
                /// storage: <https://github.com/paritytech/substrate/issues/11642>
                ///
                /// The migration will halt with a `Halted` event if this value is too small.
                /// Since there is no real penalty from over-estimating, it is advised to use a
                /// large value. The default is 512 byte.
                ///
                /// Some key lengths for reference:
                /// - [`frame_support::storage::StorageValue`]: 32 byte
                /// - [`frame_support::storage::StorageMap`]: 64 byte
                /// - [`frame_support::storage::StorageDoubleMap`]: 96 byte
                ///
                /// For more info see
                /// <https://www.shawntabrizi.com/substrate/querying-substrate-storage-via-rpc/>
                pub fn max_key_len(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "StateTrieMigration",
                        "MaxKeyLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo {
        use super::{root_mod, runtime_types};
        ///Contains one variant per dispatchable that can be called by an extrinsic.
        pub mod calls {
            use super::{root_mod, runtime_types};
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Sudo {
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SudoUncheckedWeight {
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                pub weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SetKey {
                pub new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SudoAs {
                pub who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                pub call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
            }
            pub struct TransactionApi;
            impl TransactionApi {
                ///Authenticates the sudo key and dispatches a function call with `Root` origin.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///## Complexity
                /// - O(1).
                pub fn sudo(
                    &self,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<Sudo> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo",
                        Sudo { call: ::std::boxed::Box::new(call) },
                        [
                            235u8, 88u8, 255u8, 71u8, 157u8, 83u8, 254u8, 140u8, 140u8, 101u8,
                            192u8, 47u8, 139u8, 25u8, 42u8, 36u8, 25u8, 160u8, 233u8, 68u8, 175u8,
                            86u8, 220u8, 235u8, 181u8, 48u8, 223u8, 26u8, 133u8, 204u8, 47u8,
                            164u8,
                        ],
                    )
                }
                ///Authenticates the sudo key and dispatches a function call with `Root` origin.
                ///This function does not check the weight of the call, and instead allows the
                ///Sudo user to specify the weight of the call.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///## Complexity
                /// - O(1).
                pub fn sudo_unchecked_weight(
                    &self,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                    weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<SudoUncheckedWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_unchecked_weight",
                        SudoUncheckedWeight { call: ::std::boxed::Box::new(call), weight },
                        [
                            210u8, 227u8, 162u8, 65u8, 58u8, 172u8, 160u8, 56u8, 216u8, 215u8,
                            173u8, 236u8, 221u8, 100u8, 108u8, 65u8, 251u8, 171u8, 80u8, 103u8,
                            178u8, 132u8, 81u8, 180u8, 136u8, 81u8, 59u8, 237u8, 217u8, 135u8,
                            187u8, 65u8,
                        ],
                    )
                }
                ///Authenticates the current sudo key and sets the given AccountId (`new`) as the
                /// new sudo key.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///## Complexity
                /// - O(1).
                pub fn set_key(
                    &self,
                    new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                ) -> ::subxt::tx::Payload<SetKey> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "set_key",
                        SetKey { new },
                        [
                            23u8, 224u8, 218u8, 169u8, 8u8, 28u8, 111u8, 199u8, 26u8, 88u8, 225u8,
                            105u8, 17u8, 19u8, 87u8, 156u8, 97u8, 67u8, 89u8, 173u8, 70u8, 0u8,
                            5u8, 246u8, 198u8, 135u8, 182u8, 180u8, 44u8, 9u8, 212u8, 95u8,
                        ],
                    )
                }
                ///Authenticates the sudo key and dispatches a function call with `Signed` origin
                /// from a given account.
                ///
                ///The dispatch origin for this call must be _Signed_.
                ///
                ///## Complexity
                /// - O(1).
                pub fn sudo_as(
                    &self,
                    who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    call: runtime_types::rococo_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<SudoAs> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_as",
                        SudoAs { who, call: ::std::boxed::Box::new(call) },
                        [
                            241u8, 150u8, 162u8, 123u8, 54u8, 181u8, 252u8, 49u8, 242u8, 161u8,
                            240u8, 131u8, 96u8, 102u8, 179u8, 248u8, 175u8, 103u8, 0u8, 128u8,
                            46u8, 64u8, 223u8, 80u8, 206u8, 24u8, 151u8, 145u8, 190u8, 234u8,
                            142u8, 211u8,
                        ],
                    )
                }
            }
        }
        /**
        The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
        by this pallet.
        */
        pub type Event = runtime_types::pallet_sudo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A sudo just took place. \[result\]
            pub struct Sudid {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///The \[sudoer\] just switched identity; the old key is supplied if one existed.
            pub struct KeyChanged {
                pub old_sudoer: ::core::option::Option<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            ///A sudo just took place. \[result\]
            pub struct SudoAsDone {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                /// The `AccountId` of the sudo key.
                pub fn key(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Sudo",
                        "Key",
                        vec![],
                        [
                            244u8, 73u8, 188u8, 136u8, 218u8, 163u8, 68u8, 179u8, 122u8, 173u8,
                            34u8, 108u8, 137u8, 28u8, 182u8, 16u8, 196u8, 92u8, 138u8, 34u8, 102u8,
                            80u8, 199u8, 88u8, 107u8, 207u8, 36u8, 22u8, 168u8, 167u8, 20u8, 142u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod bounded_collections {
            use super::runtime_types;
            pub mod bounded_vec {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
            pub mod weak_bounded_vec {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
        }
        pub mod finality_grandpa {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Equivocation<_0, _1, _2> {
                pub round_number: ::core::primitive::u64,
                pub identity: _0,
                pub first: (_1, _2),
                pub second: (_1, _2),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Precommit<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Prevote<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchInfo {
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod misc {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct WrapperOpaque<_0>(
                        #[codec(compact)] pub ::core::primitive::u32,
                        pub _0,
                    );
                }
                pub mod preimages {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Bounded<_0> {
                        #[codec(index = 0)]
                        Legacy {
                            hash: ::subxt::utils::H256,
                        },
                        #[codec(index = 1)]
                        Inline(
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 2)]
                        Lookup {
                            hash: ::subxt::utils::H256,
                            len: ::core::primitive::u32,
                        },
                        __Ignore(::core::marker::PhantomData<_0>),
                    }
                }
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            ::subxt::ext::codec::Decode,
                            ::subxt::ext::codec::Encode,
                            ::subxt::ext::scale_decode::DecodeAsType,
                            ::subxt::ext::scale_encode::EncodeAsType,
                            Debug,
                        )]
                        #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                        #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PalletId(pub [::core::primitive::u8; 8usize]);
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_non_zero_sender {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonZeroSender;
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockWeights {
                    pub base_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeightsPerClass {
                    pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_extrinsic:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub max_total:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub reserved:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Make some on-chain remark.
                    ///
                    ///## Complexity
                    /// - `O(1)`
                    remark { remark: ::std::vec::Vec<::core::primitive::u8> },
                    #[codec(index = 1)]
                    ///Set the number of pages in the WebAssembly environment's heap.
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 2)]
                    ///Set the new runtime code.
                    ///
                    ///## Complexity
                    /// - `O(C + S)` where `C` length of `code` and `S` complexity of
                    ///   `can_set_code`
                    set_code { code: ::std::vec::Vec<::core::primitive::u8> },
                    #[codec(index = 3)]
                    ///Set the new runtime code without doing any checks of the given `code`.
                    ///
                    ///## Complexity
                    /// - `O(C)` where `C` length of `code`
                    set_code_without_checks { code: ::std::vec::Vec<::core::primitive::u8> },
                    #[codec(index = 4)]
                    ///Set some items of storage.
                    set_storage {
                        items: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 5)]
                    ///Kill some items from storage.
                    kill_storage { keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>> },
                    #[codec(index = 6)]
                    ///Kill all storage items with a key that starts with the given prefix.
                    ///
                    ///**NOTE:** We rely on the Root origin to provide us the number of subkeys
                    /// under the prefix we are removing to accurately
                    /// calculate the weight of this function.
                    kill_prefix {
                        prefix: ::std::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    ///Make some on-chain remark and emit event.
                    remark_with_event { remark: ::std::vec::Vec<::core::primitive::u8> },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Error for the System pallet
                pub enum Error {
                    #[codec(index = 0)]
                    ///The name of specification does not match between the current runtime
                    ///and the new runtime.
                    InvalidSpecName,
                    #[codec(index = 1)]
                    ///The specification version is not allowed to decrease between the current
                    /// runtime and the new runtime.
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    ///Failed to extract the runtime version from the new runtime.
                    ///
                    ///Either calling `Core_version` or decoding `RuntimeVersion` failed.
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    ///Suicide called when the account has non-default composite data.
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    ///There is a non-zero reference count preventing the account from being
                    /// purged.
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    ///The origin filter prevent the call to be dispatched.
                    CallFiltered,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Event for the System pallet.
                pub enum Event {
                    #[codec(index = 0)]
                    ///An extrinsic completed successfully.
                    ExtrinsicSuccess {
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 1)]
                    ///An extrinsic failed.
                    ExtrinsicFailed {
                        dispatch_error: runtime_types::sp_runtime::DispatchError,
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 2)]
                    ///`:code` was updated.
                    CodeUpdated,
                    #[codec(index = 3)]
                    ///A new account was created.
                    NewAccount { account: ::subxt::utils::AccountId32 },
                    #[codec(index = 4)]
                    ///An account was reaped.
                    KilledAccount { account: ::subxt::utils::AccountId32 },
                    #[codec(index = 5)]
                    ///On on-chain remark happened.
                    Remarked { sender: ::subxt::utils::AccountId32, hash: ::subxt::utils::H256 },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: _0,
                pub providers: _0,
                pub sufficients: _0,
                pub data: _1,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::std::vec::Vec<_1>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::std::string::String,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod pallet_babe {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Report authority equivocation/misbehavior. This method will verify
                    ///the equivocation proof and validate the given key ownership proof
                    ///against the extracted offender. If both are valid, the offence will
                    ///be reported.
                    report_equivocation {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_slots::EquivocationProof<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                    runtime_types::sp_runtime::traits::BlakeTwo256,
                                >,
                                runtime_types::sp_consensus_babe::app::Public,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 1)]
                    ///Report authority equivocation/misbehavior. This method will verify
                    ///the equivocation proof and validate the given key ownership proof
                    ///against the extracted offender. If both are valid, the offence will
                    ///be reported.
                    ///This extrinsic must be called unsigned and it is expected that only
                    ///block authors will call it (validated in `ValidateUnsigned`), as such
                    ///if the block author is defined it will be defined as the equivocation
                    ///reporter.
                    report_equivocation_unsigned {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_slots::EquivocationProof<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                    runtime_types::sp_runtime::traits::BlakeTwo256,
                                >,
                                runtime_types::sp_consensus_babe::app::Public,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 2)]
                    ///Plan an epoch config change. The epoch config change is recorded and will
                    /// be enacted on the next call to `enact_epoch_change`.
                    /// The config will be activated one epoch after.
                    /// Multiple calls to this method will replace any existing planned config
                    /// change that had not been enacted yet.
                    plan_config_change {
                        config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///An equivocation proof provided as part of an equivocation report is
                    /// invalid.
                    InvalidEquivocationProof,
                    #[codec(index = 1)]
                    ///A key ownership proof provided as part of an equivocation report is
                    /// invalid.
                    InvalidKeyOwnershipProof,
                    #[codec(index = 2)]
                    ///A given equivocation report is valid but already previously reported.
                    DuplicateOffenceReport,
                    #[codec(index = 3)]
                    ///Submitted configuration is invalid.
                    InvalidConfiguration,
                }
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Transfer some liquid free balance to another account.
                    ///
                    ///`transfer` will set the `FreeBalance` of the sender and receiver.
                    ///If the sender's account is below the existential deposit as a result
                    ///of the transfer, the account will be reaped.
                    ///
                    ///The dispatch origin for this call must be `Signed` by the transactor.
                    ///
                    ///## Complexity
                    /// - Dependent on arguments but not critical, given proper implementations for
                    ///   input config
                    ///  types. See related functions below.
                    /// - It contains a limited number of reads and writes internally and no
                    ///   complex
                    ///  computation.
                    ///
                    ///Related functions:
                    ///
                    ///  - `ensure_can_withdraw` is always called internally but has a bounded
                    ///    complexity.
                    ///  - Transferring balances to accounts that did not exist before will cause
                    ///    `T::OnNewAccount::on_new_account` to be called.
                    ///  - Removing enough funds from an account will trigger
                    ///    `T::DustRemoval::on_unbalanced`.
                    ///  - `transfer_keep_alive` works the same way as `transfer`, but has an
                    ///    additional check that the transfer will not kill the origin account.
                    transfer {
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    ///Set the balances of a given account.
                    ///
                    ///This will alter `FreeBalance` and `ReservedBalance` in storage. it will
                    ///also alter the total issuance of the system (`TotalIssuance`)
                    /// appropriately. If the new free or reserved balance is
                    /// below the existential deposit, it will reset the
                    /// account nonce (`frame_system::AccountNonce`).
                    ///
                    ///The dispatch origin for this call is `root`.
                    set_balance {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                        #[codec(compact)]
                        new_reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    ///Exactly as `transfer`, except the origin must be root and the source
                    /// account may be specified.
                    ///## Complexity
                    /// - Same as transfer, but additional read and write because the source
                    ///   account is not
                    ///  assumed to be in the overlay.
                    force_transfer {
                        source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    ///Same as the [`transfer`] call, but with a check that the transfer will not
                    /// kill the origin account.
                    ///
                    ///99% of the time you want [`transfer`] instead.
                    ///
                    ///[`transfer`]: struct.Pallet.html#method.transfer
                    transfer_keep_alive {
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    ///Transfer the entire transferable balance from the caller account.
                    ///
                    ///NOTE: This function only attempts to transfer _transferable_ balances. This
                    /// means that any locked, reserved, or existential
                    /// deposits (when `keep_alive` is `true`), will not be
                    /// transferred by this function. To ensure that this function results in a
                    /// killed account, you might need to prepare the account
                    /// by removing any reference counters, storage
                    /// deposits, etc...
                    ///
                    ///The dispatch origin of this call must be Signed.
                    ///
                    /// - `dest`: The recipient of the transfer.
                    /// - `keep_alive`: A boolean to determine if the `transfer_all` operation
                    ///   should send all
                    ///  of the funds the account has, causing the sender account to be killed
                    /// (false), or  transfer everything except at least the
                    /// existential deposit, which will guarantee to
                    ///  keep the sender account alive (true). ## Complexity
                    /// - O(1). Just like transfer, but reading the user's transferable balance
                    ///   first.
                    transfer_all {
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    ///Unreserve some balance from a user by force.
                    ///
                    ///Can only be called by ROOT.
                    force_unreserve {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        amount: ::core::primitive::u128,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Vesting balance too high to send value
                    VestingBalance,
                    #[codec(index = 1)]
                    ///Account liquidity restrictions prevent withdrawal
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    ///Balance too low to send value.
                    InsufficientBalance,
                    #[codec(index = 3)]
                    ///Value too low to create account due to existential deposit
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    ///Transfer/payment would kill account
                    KeepAlive,
                    #[codec(index = 5)]
                    ///A vesting schedule already exists for this account
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    ///Beneficiary account must pre-exist
                    DeadAccount,
                    #[codec(index = 7)]
                    ///Number of named reserves exceed MaxReserves
                    TooManyReserves,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///An account was created with some free balance.
                    Endowed {
                        account: ::subxt::utils::AccountId32,
                        free_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    ///An account was removed whose balance was non-zero but below
                    /// ExistentialDeposit, resulting in an outright loss.
                    DustLost {
                        account: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    ///Transfer succeeded.
                    Transfer {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    ///A balance was set by root.
                    BalanceSet {
                        who: ::subxt::utils::AccountId32,
                        free: ::core::primitive::u128,
                        reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    ///Some balance was reserved (moved from free to reserved).
                    Reserved { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
                    #[codec(index = 5)]
                    ///Some balance was unreserved (moved from reserved to free).
                    Unreserved { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
                    #[codec(index = 6)]
                    ///Some balance was moved from the reserve of the first account to the second
                    /// account. Final argument indicates the destination
                    /// balance type.
                    ReserveRepatriated {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        destination_status:
                            runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 7)]
                    ///Some amount was deposited (e.g. for transaction fees).
                    Deposit { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
                    #[codec(index = 8)]
                    ///Some amount was withdrawn from the account (e.g. for transaction fees).
                    Withdraw { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
                    #[codec(index = 9)]
                    ///Some amount was removed from the account (e.g. for misbehavior).
                    Slashed { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountData<_0> {
                pub free: _0,
                pub reserved: _0,
                pub misc_frozen: _0,
                pub fee_frozen: _0,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BalanceLock<_0> {
                pub id: [::core::primitive::u8; 8usize],
                pub amount: _0,
                pub reasons: runtime_types::pallet_balances::Reasons,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Reasons {
                #[codec(index = 0)]
                Fee,
                #[codec(index = 1)]
                Misc,
                #[codec(index = 2)]
                All,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReserveData<_0, _1> {
                pub id: _0,
                pub amount: _1,
            }
        }
        pub mod pallet_beefy {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Report voter equivocation/misbehavior. This method will verify the
                    ///equivocation proof and validate the given key ownership proof
                    ///against the extracted offender. If both are valid, the offence
                    ///will be reported.
                    report_equivocation {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_beefy::EquivocationProof<
                                ::core::primitive::u32,
                                runtime_types::sp_consensus_beefy::crypto::Public,
                                runtime_types::sp_consensus_beefy::crypto::Signature,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 1)]
                    ///Report voter equivocation/misbehavior. This method will verify the
                    ///equivocation proof and validate the given key ownership proof
                    ///against the extracted offender. If both are valid, the offence
                    ///will be reported.
                    ///
                    ///This extrinsic must be called unsigned and it is expected that only
                    ///block authors will call it (validated in `ValidateUnsigned`), as such
                    ///if the block author is defined it will be defined as the equivocation
                    ///reporter.
                    report_equivocation_unsigned {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_beefy::EquivocationProof<
                                ::core::primitive::u32,
                                runtime_types::sp_consensus_beefy::crypto::Public,
                                runtime_types::sp_consensus_beefy::crypto::Signature,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///A key ownership proof provided as part of an equivocation report is
                    /// invalid.
                    InvalidKeyOwnershipProof,
                    #[codec(index = 1)]
                    ///An equivocation proof provided as part of an equivocation report is
                    /// invalid.
                    InvalidEquivocationProof,
                    #[codec(index = 2)]
                    ///A given equivocation report is valid but already previously reported.
                    DuplicateOffenceReport,
                }
            }
        }
        pub mod pallet_bounties {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Propose a new bounty.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Payment: `TipReportDepositBase` will be reserved from the origin account,
                    /// as well as `DataDepositPerByte` for each byte in
                    /// `reason`. It will be unreserved upon approval,
                    /// or slashed when rejected.
                    ///
                    /// - `curator`: The curator account whom will manage this bounty.
                    /// - `fee`: The curator fee.
                    /// - `value`: The total payment amount of this bounty, curator fee included.
                    /// - `description`: The description of this bounty.
                    propose_bounty {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        description: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    ///Approve a bounty proposal. At a later time, the bounty will be funded and
                    /// become active and the original deposit will be
                    /// returned.
                    ///
                    ///May only be called from `T::SpendOrigin`.
                    ///
                    ///## Complexity
                    /// - O(1).
                    approve_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///Assign a curator to a funded bounty.
                    ///
                    ///May only be called from `T::SpendOrigin`.
                    ///
                    ///## Complexity
                    /// - O(1).
                    propose_curator {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                        curator: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    ///Unassign curator from a bounty.
                    ///
                    ///This function can only be called by the `RejectOrigin` a signed origin.
                    ///
                    ///If this function is called by the `RejectOrigin`, we assume that the
                    /// curator is malicious or inactive. As a result, we will
                    /// slash the curator when possible.
                    ///
                    ///If the origin is the curator, we take this as a sign they are unable to do
                    /// their job and they willingly give up. We could slash
                    /// them, but for now we allow them to recover their
                    /// deposit and exit without issue. (We may want to change this if it is
                    /// abused.)
                    ///
                    ///Finally, the origin can be anyone if and only if the curator is "inactive".
                    /// This allows anyone in the community to call out that a
                    /// curator is not doing their due diligence, and we should
                    /// pick a new curator. In this case the curator should also be slashed.
                    ///
                    ///## Complexity
                    /// - O(1).
                    unassign_curator {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    ///Accept the curator role for a bounty.
                    ///A deposit will be reserved from curator and refund upon successful payout.
                    ///
                    ///May only be called from the curator.
                    ///
                    ///## Complexity
                    /// - O(1).
                    accept_curator {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    ///Award bounty to a beneficiary account. The beneficiary will be able to
                    /// claim the funds after a delay.
                    ///
                    ///The dispatch origin for this call must be the curator of this bounty.
                    ///
                    /// - `bounty_id`: Bounty ID to award.
                    /// - `beneficiary`: The beneficiary account whom will receive the payout.
                    ///
                    ///## Complexity
                    /// - O(1).
                    award_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 6)]
                    ///Claim the payout from an awarded bounty after payout delay.
                    ///
                    ///The dispatch origin for this call must be the beneficiary of this bounty.
                    ///
                    /// - `bounty_id`: Bounty ID to claim.
                    ///
                    ///## Complexity
                    /// - O(1).
                    claim_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    ///Cancel a proposed or active bounty. All the funds will be sent to treasury
                    /// and the curator deposit will be unreserved if possible.
                    ///
                    ///Only `T::RejectOrigin` is able to cancel a bounty.
                    ///
                    /// - `bounty_id`: Bounty ID to cancel.
                    ///
                    ///## Complexity
                    /// - O(1).
                    close_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    ///Extend the expiry time of an active bounty.
                    ///
                    ///The dispatch origin for this call must be the curator of this bounty.
                    ///
                    /// - `bounty_id`: Bounty ID to extend.
                    /// - `remark`: additional information.
                    ///
                    ///## Complexity
                    /// - O(1).
                    extend_bounty_expiry {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Proposer's balance is too low.
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    ///No proposal or bounty at that index.
                    InvalidIndex,
                    #[codec(index = 2)]
                    ///The reason given is just too big.
                    ReasonTooBig,
                    #[codec(index = 3)]
                    ///The bounty status is unexpected.
                    UnexpectedStatus,
                    #[codec(index = 4)]
                    ///Require bounty curator.
                    RequireCurator,
                    #[codec(index = 5)]
                    ///Invalid bounty value.
                    InvalidValue,
                    #[codec(index = 6)]
                    ///Invalid bounty fee.
                    InvalidFee,
                    #[codec(index = 7)]
                    ///A bounty payout is pending.
                    ///To cancel the bounty, you must unassign and slash the curator.
                    PendingPayout,
                    #[codec(index = 8)]
                    ///The bounties cannot be claimed/closed because it's still in the countdown
                    /// period.
                    Premature,
                    #[codec(index = 9)]
                    ///The bounty cannot be closed because it has active child bounties.
                    HasActiveChildBounty,
                    #[codec(index = 10)]
                    ///Too many approvals are already queued.
                    TooManyQueued,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///New bounty proposal.
                    BountyProposed { index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    ///A bounty proposal was rejected; funds were slashed.
                    BountyRejected { index: ::core::primitive::u32, bond: ::core::primitive::u128 },
                    #[codec(index = 2)]
                    ///A bounty proposal is funded and became active.
                    BountyBecameActive { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    ///A bounty is awarded to a beneficiary.
                    BountyAwarded {
                        index: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    ///A bounty is claimed by beneficiary.
                    BountyClaimed {
                        index: ::core::primitive::u32,
                        payout: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    ///A bounty is cancelled.
                    BountyCanceled { index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    ///A bounty expiry is extended.
                    BountyExtended { index: ::core::primitive::u32 },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Bounty<_0, _1, _2> {
                pub proposer: _0,
                pub value: _1,
                pub fee: _1,
                pub curator_deposit: _1,
                pub bond: _1,
                pub status: runtime_types::pallet_bounties::BountyStatus<_0, _2>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum BountyStatus<_0, _1> {
                #[codec(index = 0)]
                Proposed,
                #[codec(index = 1)]
                Approved,
                #[codec(index = 2)]
                Funded,
                #[codec(index = 3)]
                CuratorProposed { curator: _0 },
                #[codec(index = 4)]
                Active { curator: _0, update_due: _1 },
                #[codec(index = 5)]
                PendingPayout { curator: _0, beneficiary: _0, unlock_at: _1 },
            }
        }
        pub mod pallet_child_bounties {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Add a new child-bounty.
                    ///
                    ///The dispatch origin for this call must be the curator of parent
                    ///bounty and the parent bounty must be in "active" state.
                    ///
                    ///Child-bounty gets added successfully & fund gets transferred from
                    ///parent bounty to child-bounty account, if parent bounty has enough
                    ///funds, else the call fails.
                    ///
                    ///Upper bound to maximum number of active  child bounties that can be
                    ///added are managed via runtime trait config
                    ///[`Config::MaxActiveChildBountyCount`].
                    ///
                    ///If the call is success, the status of child-bounty is updated to
                    ///"Added".
                    ///
                    /// - `parent_bounty_id`: Index of parent bounty for which child-bounty is
                    ///   being added.
                    /// - `value`: Value for executing the proposal.
                    /// - `description`: Text description for the child-bounty.
                    add_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        description: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    ///Propose curator for funded child-bounty.
                    ///
                    ///The dispatch origin for this call must be curator of parent bounty.
                    ///
                    ///Parent bounty must be in active state, for this child-bounty call to
                    ///work.
                    ///
                    ///Child-bounty must be in "Added" state, for processing the call. And
                    ///state of child-bounty is moved to "CuratorProposed" on successful
                    ///call completion.
                    ///
                    /// - `parent_bounty_id`: Index of parent bounty.
                    /// - `child_bounty_id`: Index of child bounty.
                    /// - `curator`: Address of child-bounty curator.
                    /// - `fee`: payment fee to child-bounty curator for execution.
                    propose_curator {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                        curator: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    ///Accept the curator role for the child-bounty.
                    ///
                    ///The dispatch origin for this call must be the curator of this
                    ///child-bounty.
                    ///
                    ///A deposit will be reserved from the curator and refund upon
                    ///successful payout or cancellation.
                    ///
                    ///Fee for curator is deducted from curator fee of parent bounty.
                    ///
                    ///Parent bounty must be in active state, for this child-bounty call to
                    ///work.
                    ///
                    ///Child-bounty must be in "CuratorProposed" state, for processing the
                    ///call. And state of child-bounty is moved to "Active" on successful
                    ///call completion.
                    ///
                    /// - `parent_bounty_id`: Index of parent bounty.
                    /// - `child_bounty_id`: Index of child bounty.
                    accept_curator {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    ///Unassign curator from a child-bounty.
                    ///
                    ///The dispatch origin for this call can be either `RejectOrigin`, or
                    ///the curator of the parent bounty, or any signed origin.
                    ///
                    ///For the origin other than T::RejectOrigin and the child-bounty
                    ///curator, parent bounty must be in active state, for this call to
                    ///work. We allow child-bounty curator and T::RejectOrigin to execute
                    ///this call irrespective of the parent bounty state.
                    ///
                    ///If this function is called by the `RejectOrigin` or the
                    ///parent bounty curator, we assume that the child-bounty curator is
                    ///malicious or inactive. As a result, child-bounty curator deposit is
                    ///slashed.
                    ///
                    ///If the origin is the child-bounty curator, we take this as a sign
                    ///that they are unable to do their job, and are willingly giving up.
                    ///We could slash the deposit, but for now we allow them to unreserve
                    ///their deposit and exit without issue. (We may want to change this if
                    ///it is abused.)
                    ///
                    ///Finally, the origin can be anyone iff the child-bounty curator is
                    ///"inactive". Expiry update due of parent bounty is used to estimate
                    ///inactive state of child-bounty curator.
                    ///
                    ///This allows anyone in the community to call out that a child-bounty
                    ///curator is not doing their due diligence, and we should pick a new
                    ///one. In this case the child-bounty curator deposit is slashed.
                    ///
                    ///State of child-bounty is moved to Added state on successful call
                    ///completion.
                    ///
                    /// - `parent_bounty_id`: Index of parent bounty.
                    /// - `child_bounty_id`: Index of child bounty.
                    unassign_curator {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    ///Award child-bounty to a beneficiary.
                    ///
                    ///The beneficiary will be able to claim the funds after a delay.
                    ///
                    ///The dispatch origin for this call must be the parent curator or
                    ///curator of this child-bounty.
                    ///
                    ///Parent bounty must be in active state, for this child-bounty call to
                    ///work.
                    ///
                    ///Child-bounty must be in active state, for processing the call. And
                    ///state of child-bounty is moved to "PendingPayout" on successful call
                    ///completion.
                    ///
                    /// - `parent_bounty_id`: Index of parent bounty.
                    /// - `child_bounty_id`: Index of child bounty.
                    /// - `beneficiary`: Beneficiary account.
                    award_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 5)]
                    ///Claim the payout from an awarded child-bounty after payout delay.
                    ///
                    ///The dispatch origin for this call may be any signed origin.
                    ///
                    ///Call works independent of parent bounty state, No need for parent
                    ///bounty to be in active state.
                    ///
                    ///The Beneficiary is paid out with agreed bounty value. Curator fee is
                    ///paid & curator deposit is unreserved.
                    ///
                    ///Child-bounty must be in "PendingPayout" state, for processing the
                    ///call. And instance of child-bounty is removed from the state on
                    ///successful call completion.
                    ///
                    /// - `parent_bounty_id`: Index of parent bounty.
                    /// - `child_bounty_id`: Index of child bounty.
                    claim_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    ///Cancel a proposed or active child-bounty. Child-bounty account funds
                    ///are transferred to parent bounty account. The child-bounty curator
                    ///deposit may be unreserved if possible.
                    ///
                    ///The dispatch origin for this call must be either parent curator or
                    ///`T::RejectOrigin`.
                    ///
                    ///If the state of child-bounty is `Active`, curator deposit is
                    ///unreserved.
                    ///
                    ///If the state of child-bounty is `PendingPayout`, call fails &
                    ///returns `PendingPayout` error.
                    ///
                    ///For the origin other than T::RejectOrigin, parent bounty must be in
                    ///active state, for this child-bounty call to work. For origin
                    ///T::RejectOrigin execution is forced.
                    ///
                    ///Instance of child-bounty is removed from the state on successful
                    ///call completion.
                    ///
                    /// - `parent_bounty_id`: Index of parent bounty.
                    /// - `child_bounty_id`: Index of child bounty.
                    close_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///The parent bounty is not in active state.
                    ParentBountyNotActive,
                    #[codec(index = 1)]
                    ///The bounty balance is not enough to add new child-bounty.
                    InsufficientBountyBalance,
                    #[codec(index = 2)]
                    ///Number of child bounties exceeds limit `MaxActiveChildBountyCount`.
                    TooManyChildBounties,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A child-bounty is added.
                    Added { index: ::core::primitive::u32, child_index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    ///A child-bounty is awarded to a beneficiary.
                    Awarded {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    ///A child-bounty is claimed by beneficiary.
                    Claimed {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                        payout: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    ///A child-bounty is cancelled.
                    Canceled { index: ::core::primitive::u32, child_index: ::core::primitive::u32 },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChildBounty<_0, _1, _2> {
                pub parent_bounty: _2,
                pub value: _1,
                pub fee: _1,
                pub curator_deposit: _1,
                pub status: runtime_types::pallet_child_bounties::ChildBountyStatus<_0, _2>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ChildBountyStatus<_0, _1> {
                #[codec(index = 0)]
                Added,
                #[codec(index = 1)]
                CuratorProposed { curator: _0 },
                #[codec(index = 2)]
                Active { curator: _0 },
                #[codec(index = 3)]
                PendingPayout { curator: _0, beneficiary: _0, unlock_at: _1 },
            }
        }
        pub mod pallet_collective {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Set the collective's membership.
                    ///
                    /// - `new_members`: The new member list. Be nice to the chain and provide it
                    ///   sorted.
                    /// - `prime`: The prime member whose vote sets the default.
                    /// - `old_count`: The upper bound for the previous number of members in
                    ///   storage. Used for
                    ///  weight estimation.
                    ///
                    ///The dispatch of this call must be `SetMembersOrigin`.
                    ///
                    ///NOTE: Does not enforce the expected `MaxMembers` limit on the amount of
                    /// members, but      the weight estimations rely on it to
                    /// estimate dispatchable weight.
                    ///
                    ///# WARNING:
                    ///
                    ///The `pallet-collective` can also be managed by logic outside of the pallet
                    /// through the implementation of the trait
                    /// [`ChangeMembers`]. Any call to `set_members` must be
                    /// careful that the member set doesn't get out of sync
                    /// with other logic managing the member set.
                    ///
                    ///## Complexity:
                    /// - `O(MP + N)` where:
                    ///  - `M` old-members-count (code- and governance-bounded)
                    ///  - `N` new-members-count (code- and governance-bounded)
                    ///  - `P` proposals-count (code-bounded)
                    set_members {
                        new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        prime: ::core::option::Option<::subxt::utils::AccountId32>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    ///Dispatch a proposal from a member using the `Member` origin.
                    ///
                    ///Origin must be a member of the collective.
                    ///
                    ///## Complexity:
                    /// - `O(B + M + P)` where:
                    /// - `B` is `proposal` size in bytes (length-fee-bounded)
                    /// - `M` members-count (code-bounded)
                    /// - `P` complexity of dispatching `proposal`
                    execute {
                        proposal: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///Add a new proposal to either be voted on or executed directly.
                    ///
                    ///Requires the sender to be member.
                    ///
                    ///`threshold` determines whether `proposal` is executed directly (`threshold
                    /// < 2`) or put up for voting.
                    ///
                    ///## Complexity
                    /// - `O(B + M + P1)` or `O(B + M + P2)` where:
                    ///  - `B` is `proposal` size in bytes (length-fee-bounded)
                    ///  - `M` is members-count (code- and governance-bounded)
                    ///  - branching is influenced by `threshold` where:
                    ///    - `P1` is proposal execution complexity (`threshold < 2`)
                    ///    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    ///Add an aye or nay vote for the sender to the given proposal.
                    ///
                    ///Requires the sender to be a member.
                    ///
                    ///Transaction fees will be waived if the member is voting on any particular
                    /// proposal for the first time and the call is successful.
                    /// Subsequent vote changes will charge a fee.
                    ///## Complexity
                    /// - `O(M)` where `M` is members-count (code- and governance-bounded)
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    ///Close a vote that is either approved, disapproved or whose voting period
                    /// has ended.
                    ///
                    ///May be called by any signed account in order to finish voting and close the
                    /// proposal.
                    ///
                    ///If called before the end of the voting period it will only close the vote
                    /// if it is has enough votes to be approved or
                    /// disapproved.
                    ///
                    ///If called after the end of the voting period abstentions are counted as
                    /// rejections unless there is a prime member set and the
                    /// prime member cast an approval.
                    ///
                    ///If the close operation completes successfully with disapproval, the
                    /// transaction fee will be waived. Otherwise execution of
                    /// the approved operation will be charged to the caller.
                    ///
                    ///+ `proposal_weight_bound`: The maximum amount of weight consumed by
                    /// executing the closed proposal.
                    ///+ `length_bound`: The upper bound for the length of the proposal in
                    /// storage. Checked via `storage::read` so it is
                    /// `size_of::<u32>() == 4` larger than the pure length.
                    ///
                    ///## Complexity
                    /// - `O(B + M + P1 + P2)` where:
                    ///  - `B` is `proposal` size in bytes (length-fee-bounded)
                    ///  - `M` is members-count (code- and governance-bounded)
                    ///  - `P1` is the complexity of `proposal` preimage.
                    ///  - `P2` is proposal-count (code-bounded)
                    close_old_weight {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        #[codec(compact)]
                        proposal_weight_bound: runtime_types::sp_weights::OldWeight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    ///Disapprove a proposal, close, and remove it from the system, regardless of
                    /// its current state.
                    ///
                    ///Must be called by the Root origin.
                    ///
                    ///Parameters:
                    /// * `proposal_hash`: The hash of the proposal that should be disapproved.
                    ///
                    ///## Complexity
                    ///O(P) where P is the number of max proposals
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    ///Close a vote that is either approved, disapproved or whose voting period
                    /// has ended.
                    ///
                    ///May be called by any signed account in order to finish voting and close the
                    /// proposal.
                    ///
                    ///If called before the end of the voting period it will only close the vote
                    /// if it is has enough votes to be approved or
                    /// disapproved.
                    ///
                    ///If called after the end of the voting period abstentions are counted as
                    /// rejections unless there is a prime member set and the
                    /// prime member cast an approval.
                    ///
                    ///If the close operation completes successfully with disapproval, the
                    /// transaction fee will be waived. Otherwise execution of
                    /// the approved operation will be charged to the caller.
                    ///
                    ///+ `proposal_weight_bound`: The maximum amount of weight consumed by
                    /// executing the closed proposal.
                    ///+ `length_bound`: The upper bound for the length of the proposal in
                    /// storage. Checked via `storage::read` so it is
                    /// `size_of::<u32>() == 4` larger than the pure length.
                    ///
                    ///## Complexity
                    /// - `O(B + M + P1 + P2)` where:
                    ///  - `B` is `proposal` size in bytes (length-fee-bounded)
                    ///  - `M` is members-count (code- and governance-bounded)
                    ///  - `P1` is the complexity of `proposal` preimage.
                    ///  - `P2` is proposal-count (code-bounded)
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Account is not a member
                    NotMember,
                    #[codec(index = 1)]
                    ///Duplicate proposals not allowed
                    DuplicateProposal,
                    #[codec(index = 2)]
                    ///Proposal must exist
                    ProposalMissing,
                    #[codec(index = 3)]
                    ///Mismatched index
                    WrongIndex,
                    #[codec(index = 4)]
                    ///Duplicate vote ignored
                    DuplicateVote,
                    #[codec(index = 5)]
                    ///Members are already initialized!
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    ///The close call was made too early, before the end of the voting.
                    TooEarly,
                    #[codec(index = 7)]
                    ///There can only be a maximum of `MaxProposals` active proposals.
                    TooManyProposals,
                    #[codec(index = 8)]
                    ///The given weight bound for the proposal was too low.
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    ///The given length bound for the proposal was too low.
                    WrongProposalLength,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A motion (given hash) has been proposed (by given account) with a threshold
                    /// (given `MemberCount`).
                    Proposed {
                        account: ::subxt::utils::AccountId32,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    ///A motion (given hash) has been voted on by given account, leaving
                    ///a tally (yes votes and no votes given respectively as `MemberCount`).
                    Voted {
                        account: ::subxt::utils::AccountId32,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///A motion was approved by the required threshold.
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    ///A motion was not approved by the required threshold.
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    ///A motion was executed; result will be `Ok` if it returned without error.
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    ///A single member did some action; result will be `Ok` if it returned without
                    /// error.
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    ///A proposal was closed because its threshold was reached or after its
                    /// duration was up.
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Members(::core::primitive::u32, ::core::primitive::u32),
                #[codec(index = 1)]
                Member(_0),
                #[codec(index = 2)]
                _Phantom,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Votes<_0, _1> {
                pub index: _1,
                pub threshold: _1,
                pub ayes: ::std::vec::Vec<_0>,
                pub nays: ::std::vec::Vec<_0>,
                pub end: _1,
            }
        }
        pub mod pallet_democracy {
            use super::runtime_types;
            pub mod conviction {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Conviction {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Locked1x,
                    #[codec(index = 2)]
                    Locked2x,
                    #[codec(index = 3)]
                    Locked3x,
                    #[codec(index = 4)]
                    Locked4x,
                    #[codec(index = 5)]
                    Locked5x,
                    #[codec(index = 6)]
                    Locked6x,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Propose a sensitive action to be taken.
                    ///
                    ///The dispatch origin of this call must be _Signed_ and the sender must
                    ///have funds to cover the deposit.
                    ///
                    /// - `proposal_hash`: The hash of the proposal preimage.
                    /// - `value`: The amount of deposit (must be at least `MinimumDeposit`).
                    ///
                    ///Emits `Proposed`.
                    propose {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::rococo_runtime::RuntimeCall,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    ///Signals agreement with a particular proposal.
                    ///
                    ///The dispatch origin of this call must be _Signed_ and the sender
                    ///must have funds to cover the deposit, equal to the original deposit.
                    ///
                    /// - `proposal`: The index of the proposal to second.
                    second {
                        #[codec(compact)]
                        proposal: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///Vote in a referendum. If `vote.is_aye()`, the vote is to enact the
                    /// proposal; otherwise it is a vote to keep the status
                    /// quo.
                    ///
                    ///The dispatch origin of this call must be _Signed_.
                    ///
                    /// - `ref_index`: The index of the referendum to vote for.
                    /// - `vote`: The vote configuration.
                    vote {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    ///Schedule an emergency cancellation of a referendum. Cannot happen twice to
                    /// the same referendum.
                    ///
                    ///The dispatch origin of this call must be `CancellationOrigin`.
                    ///
                    ///-`ref_index`: The index of the referendum to cancel.
                    ///
                    ///Weight: `O(1)`.
                    emergency_cancel { ref_index: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    ///Schedule a referendum to be tabled once it is legal to schedule an external
                    ///referendum.
                    ///
                    ///The dispatch origin of this call must be `ExternalOrigin`.
                    ///
                    /// - `proposal_hash`: The preimage hash of the proposal.
                    external_propose {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::rococo_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 5)]
                    ///Schedule a majority-carries referendum to be tabled next once it is legal
                    /// to schedule an external referendum.
                    ///
                    ///The dispatch of this call must be `ExternalMajorityOrigin`.
                    ///
                    /// - `proposal_hash`: The preimage hash of the proposal.
                    ///
                    ///Unlike `external_propose`, blacklisting has no effect on this and it may
                    /// replace a pre-scheduled `external_propose` call.
                    ///
                    ///Weight: `O(1)`
                    external_propose_majority {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::rococo_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 6)]
                    ///Schedule a negative-turnout-bias referendum to be tabled next once it is
                    /// legal to schedule an external referendum.
                    ///
                    ///The dispatch of this call must be `ExternalDefaultOrigin`.
                    ///
                    /// - `proposal_hash`: The preimage hash of the proposal.
                    ///
                    ///Unlike `external_propose`, blacklisting has no effect on this and it may
                    /// replace a pre-scheduled `external_propose` call.
                    ///
                    ///Weight: `O(1)`
                    external_propose_default {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::rococo_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 7)]
                    ///Schedule the currently externally-proposed majority-carries referendum to
                    /// be tabled immediately. If there is no
                    /// externally-proposed referendum currently, or if there is one
                    /// but it is not a majority-carries referendum then it fails.
                    ///
                    ///The dispatch of this call must be `FastTrackOrigin`.
                    ///
                    /// - `proposal_hash`: The hash of the current external proposal.
                    /// - `voting_period`: The period that is allowed for voting on this proposal.
                    ///   Increased to
                    ///	Must be always greater than zero.
                    ///	For `FastTrackOrigin` must be equal or greater than
                    /// `FastTrackVotingPeriod`.
                    /// - `delay`: The number of block after voting has ended in approval and this
                    ///   should be
                    ///  enacted. This doesn't have a minimum amount.
                    ///
                    ///Emits `Started`.
                    ///
                    ///Weight: `O(1)`
                    fast_track {
                        proposal_hash: ::subxt::utils::H256,
                        voting_period: ::core::primitive::u32,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    ///Veto and blacklist the external proposal hash.
                    ///
                    ///The dispatch origin of this call must be `VetoOrigin`.
                    ///
                    /// - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.
                    ///
                    ///Emits `Vetoed`.
                    ///
                    ///Weight: `O(V + log(V))` where V is number of `existing vetoers`
                    veto_external { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 9)]
                    ///Remove a referendum.
                    ///
                    ///The dispatch origin of this call must be _Root_.
                    ///
                    /// - `ref_index`: The index of the referendum to cancel.
                    ///
                    ///# Weight: `O(1)`.
                    cancel_referendum {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ///Delegate the voting power (with some given conviction) of the sending
                    /// account.
                    ///
                    ///The balance delegated is locked for as long as it's delegated, and
                    /// thereafter for the time appropriate for the
                    /// conviction's lock period.
                    ///
                    ///The dispatch origin of this call must be _Signed_, and the signing account
                    /// must either:
                    ///  - be delegating already; or
                    ///  - have no voting activity (if there is, then it will need to be
                    ///    removed/consolidated through `reap_vote` or `unvote`).
                    ///
                    /// - `to`: The account whose voting the `target` account's voting power will
                    ///   follow.
                    /// - `conviction`: The conviction that will be attached to the delegated
                    ///   votes. When the
                    ///  account is undelegated, the funds will be locked for the corresponding
                    /// period.
                    /// - `balance`: The amount of the account's balance to be used in delegating.
                    ///   This must not
                    ///  be more than the account's current balance.
                    ///
                    ///Emits `Delegated`.
                    ///
                    ///Weight: `O(R)` where R is the number of referendums the voter delegating to
                    /// has  voted on. Weight is charged as if maximum votes.
                    delegate {
                        to: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    ///Undelegate the voting power of the sending account.
                    ///
                    ///Tokens may be unlocked following once an amount of time consistent with the
                    /// lock period of the conviction with which the delegation
                    /// was issued.
                    ///
                    ///The dispatch origin of this call must be _Signed_ and the signing account
                    /// must be currently delegating.
                    ///
                    ///Emits `Undelegated`.
                    ///
                    ///Weight: `O(R)` where R is the number of referendums the voter delegating to
                    /// has  voted on. Weight is charged as if maximum votes.
                    undelegate,
                    #[codec(index = 12)]
                    ///Clears all public proposals.
                    ///
                    ///The dispatch origin of this call must be _Root_.
                    ///
                    ///Weight: `O(1)`.
                    clear_public_proposals,
                    #[codec(index = 13)]
                    ///Unlock tokens that have an expired lock.
                    ///
                    ///The dispatch origin of this call must be _Signed_.
                    ///
                    /// - `target`: The account to remove the lock on.
                    ///
                    ///Weight: `O(R)` with R number of vote of target.
                    unlock { target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()> },
                    #[codec(index = 14)]
                    ///Remove a vote for a referendum.
                    ///
                    ///If:
                    /// - the referendum was cancelled, or
                    /// - the referendum is ongoing, or
                    /// - the referendum has ended such that
                    ///  - the vote of the account was in opposition to the result; or
                    ///  - there was no conviction to the account's vote; or
                    ///  - the account made a split vote
                    ///...then the vote is removed cleanly and a following call to `unlock` may
                    /// result in more funds being available.
                    ///
                    ///If, however, the referendum has ended and:
                    /// - it finished corresponding to the vote of the account, and
                    /// - the account made a standard vote with conviction, and
                    /// - the lock period of the conviction is not over
                    ///...then the lock will be aggregated into the overall account's lock, which
                    /// may involve *overlocking* (where the two locks are
                    /// combined into a single lock that is the maximum of both
                    /// the amount locked and the time is it locked for).
                    ///
                    ///The dispatch origin of this call must be _Signed_, and the signer must have
                    /// a vote registered for referendum `index`.
                    ///
                    /// - `index`: The index of referendum of the vote to be removed.
                    ///
                    ///Weight: `O(R + log R)` where R is the number of referenda that `target` has
                    /// voted on.  Weight is calculated for the maximum number
                    /// of vote.
                    remove_vote { index: ::core::primitive::u32 },
                    #[codec(index = 15)]
                    ///Remove a vote for a referendum.
                    ///
                    ///If the `target` is equal to the signer, then this function is exactly
                    /// equivalent to `remove_vote`. If not equal to the
                    /// signer, then the vote must have expired, either because
                    /// the referendum was cancelled, because the voter lost the referendum or
                    /// because the conviction period is over.
                    ///
                    ///The dispatch origin of this call must be _Signed_.
                    ///
                    /// - `target`: The account of the vote to be removed; this account must have
                    ///   voted for
                    ///  referendum `index`.
                    /// - `index`: The index of referendum of the vote to be removed.
                    ///
                    ///Weight: `O(R + log R)` where R is the number of referenda that `target` has
                    /// voted on.  Weight is calculated for the maximum number
                    /// of vote.
                    remove_other_vote {
                        target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 16)]
                    ///Permanently place a proposal into the blacklist. This prevents it from ever
                    /// being proposed again.
                    ///
                    ///If called on a queued public or external proposal, then this will result in
                    /// it being removed. If the `ref_index` supplied is an
                    /// active referendum with the proposal hash, then it will
                    /// be cancelled.
                    ///
                    ///The dispatch origin of this call must be `BlacklistOrigin`.
                    ///
                    /// - `proposal_hash`: The proposal hash to blacklist permanently.
                    /// - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which
                    ///   will be
                    ///cancelled.
                    ///
                    ///Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it
                    /// has a  reasonable value).
                    blacklist {
                        proposal_hash: ::subxt::utils::H256,
                        maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 17)]
                    ///Remove a proposal.
                    ///
                    ///The dispatch origin of this call must be `CancelProposalOrigin`.
                    ///
                    /// - `prop_index`: The index of the proposal to cancel.
                    ///
                    ///Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`
                    cancel_proposal {
                        #[codec(compact)]
                        prop_index: ::core::primitive::u32,
                    },
                    #[codec(index = 18)]
                    ///Set or clear a metadata of a proposal or a referendum.
                    ///
                    ///Parameters:
                    /// - `origin`: Must correspond to the `MetadataOwner`.
                    ///    - `ExternalOrigin` for an external proposal with the
                    ///      `SuperMajorityApprove` threshold.
                    ///    - `ExternalDefaultOrigin` for an external proposal with the
                    ///      `SuperMajorityAgainst` threshold.
                    ///    - `ExternalMajorityOrigin` for an external proposal with the
                    ///      `SimpleMajority` threshold.
                    ///    - `Signed` by a creator for a public proposal.
                    ///    - `Signed` to clear a metadata for a finished referendum.
                    ///    - `Root` to set a metadata for an ongoing referendum.
                    /// - `owner`: an identifier of a metadata owner.
                    /// - `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a
                    ///   metadata.
                    set_metadata {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Value too low
                    ValueLow,
                    #[codec(index = 1)]
                    ///Proposal does not exist
                    ProposalMissing,
                    #[codec(index = 2)]
                    ///Cannot cancel the same proposal twice
                    AlreadyCanceled,
                    #[codec(index = 3)]
                    ///Proposal already made
                    DuplicateProposal,
                    #[codec(index = 4)]
                    ///Proposal still blacklisted
                    ProposalBlacklisted,
                    #[codec(index = 5)]
                    ///Next external proposal not simple majority
                    NotSimpleMajority,
                    #[codec(index = 6)]
                    ///Invalid hash
                    InvalidHash,
                    #[codec(index = 7)]
                    ///No external proposal
                    NoProposal,
                    #[codec(index = 8)]
                    ///Identity may not veto a proposal twice
                    AlreadyVetoed,
                    #[codec(index = 9)]
                    ///Vote given for invalid referendum
                    ReferendumInvalid,
                    #[codec(index = 10)]
                    ///No proposals waiting
                    NoneWaiting,
                    #[codec(index = 11)]
                    ///The given account did not vote on the referendum.
                    NotVoter,
                    #[codec(index = 12)]
                    ///The actor has no permission to conduct the action.
                    NoPermission,
                    #[codec(index = 13)]
                    ///The account is already delegating.
                    AlreadyDelegating,
                    #[codec(index = 14)]
                    ///Too high a balance was provided that the account cannot afford.
                    InsufficientFunds,
                    #[codec(index = 15)]
                    ///The account is not currently delegating.
                    NotDelegating,
                    #[codec(index = 16)]
                    ///The account currently has votes attached to it and the operation cannot
                    /// succeed until these are removed, either through
                    /// `unvote` or `reap_vote`.
                    VotesExist,
                    #[codec(index = 17)]
                    ///The instant referendum origin is currently disallowed.
                    InstantNotAllowed,
                    #[codec(index = 18)]
                    ///Delegation to oneself makes no sense.
                    Nonsense,
                    #[codec(index = 19)]
                    ///Invalid upper bound.
                    WrongUpperBound,
                    #[codec(index = 20)]
                    ///Maximum number of votes reached.
                    MaxVotesReached,
                    #[codec(index = 21)]
                    ///Maximum number of items reached.
                    TooMany,
                    #[codec(index = 22)]
                    ///Voting period too low
                    VotingPeriodLow,
                    #[codec(index = 23)]
                    ///The preimage does not exist.
                    PreimageNotExist,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A motion has been proposed by a public account.
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    ///A public proposal has been tabled for referendum vote.
                    Tabled {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    ///An external proposal has been tabled.
                    ExternalTabled,
                    #[codec(index = 3)]
                    ///A referendum has begun.
                    Started {
                        ref_index: ::core::primitive::u32,
                        threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    },
                    #[codec(index = 4)]
                    ///A proposal has been approved by referendum.
                    Passed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    ///A proposal has been rejected by referendum.
                    NotPassed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    ///A referendum has been cancelled.
                    Cancelled { ref_index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    ///An account has delegated their vote to another account.
                    Delegated {
                        who: ::subxt::utils::AccountId32,
                        target: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 8)]
                    ///An account has cancelled a previous delegation operation.
                    Undelegated { account: ::subxt::utils::AccountId32 },
                    #[codec(index = 9)]
                    ///An external proposal has been vetoed.
                    Vetoed {
                        who: ::subxt::utils::AccountId32,
                        proposal_hash: ::subxt::utils::H256,
                        until: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ///A proposal_hash has been blacklisted permanently.
                    Blacklisted { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 11)]
                    ///An account has voted in a referendum
                    Voted {
                        voter: ::subxt::utils::AccountId32,
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 12)]
                    ///An account has secconded a proposal
                    Seconded {
                        seconder: ::subxt::utils::AccountId32,
                        prop_index: ::core::primitive::u32,
                    },
                    #[codec(index = 13)]
                    ///A proposal got canceled.
                    ProposalCanceled { prop_index: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    ///Metadata for a proposal or a referendum has been set.
                    MetadataSet {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 15)]
                    ///Metadata for a proposal or a referendum has been cleared.
                    MetadataCleared {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 16)]
                    ///Metadata has been transferred to new owner.
                    MetadataTransferred {
                        prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::utils::H256,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegations<_0> {
                    pub votes: _0,
                    pub capital: _0,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MetadataOwner {
                    #[codec(index = 0)]
                    External,
                    #[codec(index = 1)]
                    Proposal(::core::primitive::u32),
                    #[codec(index = 2)]
                    Referendum(::core::primitive::u32),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ReferendumInfo<_0, _1, _2> {
                    #[codec(index = 0)]
                    Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
                    #[codec(index = 1)]
                    Finished { approved: ::core::primitive::bool, end: _0 },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReferendumStatus<_0, _1, _2> {
                    pub end: _0,
                    pub proposal: _1,
                    pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    pub delay: _0,
                    pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Tally<_0> {
                    pub ayes: _0,
                    pub nays: _0,
                    pub turnout: _0,
                }
            }
            pub mod vote {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AccountVote<_0> {
                    #[codec(index = 0)]
                    Standard { vote: runtime_types::pallet_democracy::vote::Vote, balance: _0 },
                    #[codec(index = 1)]
                    Split { aye: _0, nay: _0 },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PriorLock<_0, _1>(pub _0, pub _1);
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote(pub ::core::primitive::u8);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Voting<_0, _1, _2> {
                    #[codec(index = 0)]
                    Direct {
                        votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            _2,
                            runtime_types::pallet_democracy::vote::AccountVote<_0>,
                        )>,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                    #[codec(index = 1)]
                    Delegating {
                        balance: _0,
                        target: _1,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                }
            }
            pub mod vote_threshold {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum VoteThreshold {
                    #[codec(index = 0)]
                    SuperMajorityApprove,
                    #[codec(index = 1)]
                    SuperMajorityAgainst,
                    #[codec(index = 2)]
                    SimpleMajority,
                }
            }
        }
        pub mod pallet_elections_phragmen {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Vote for a set of candidates for the upcoming round of election. This can
                    /// be called to set the initial votes, or update already
                    /// existing votes.
                    ///
                    ///Upon initial voting, `value` units of `who`'s balance is locked and a
                    /// deposit amount is reserved. The deposit is based on the
                    /// number of votes and can be updated over time.
                    ///
                    ///The `votes` should:
                    ///  - not be empty.
                    ///  - be less than the number of possible candidates. Note that all current
                    ///    members and runners-up are also automatically candidates for the next
                    ///    round.
                    ///
                    ///If `value` is more than `who`'s free balance, then the maximum of the two
                    /// is used.
                    ///
                    ///The dispatch origin of this call must be signed.
                    ///
                    ///### Warning
                    ///
                    ///It is the responsibility of the caller to **NOT** place all of their
                    /// balance into the lock and keep some for further
                    /// operations.
                    vote {
                        votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    ///Remove `origin` as a voter.
                    ///
                    ///This removes the lock and returns the deposit.
                    ///
                    ///The dispatch origin of this call must be signed and be a voter.
                    remove_voter,
                    #[codec(index = 2)]
                    ///Submit oneself for candidacy. A fixed amount of deposit is recorded.
                    ///
                    ///All candidates are wiped at the end of the term. They either become a
                    /// member/runner-up, or leave the system while their
                    /// deposit is slashed.
                    ///
                    ///The dispatch origin of this call must be signed.
                    ///
                    ///### Warning
                    ///
                    ///Even if a candidate ends up being a member, they must call
                    /// [`Call::renounce_candidacy`] to get their deposit back.
                    /// Losing the spot in an election will always lead to a slash.
                    ///
                    ///The number of current candidates must be provided as witness data.
                    ///## Complexity
                    ///O(C + log(C)) where C is candidate_count.
                    submit_candidacy {
                        #[codec(compact)]
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    ///Renounce one's intention to be a candidate for the next election round. 3
                    /// potential outcomes exist:
                    ///
                    /// - `origin` is a candidate and not elected in any set. In this case, the
                    ///   deposit is
                    ///  unreserved, returned and origin is removed as a candidate.
                    /// - `origin` is a current runner-up. In this case, the deposit is unreserved,
                    ///   returned and
                    ///  origin is removed as a runner-up.
                    /// - `origin` is a current member. In this case, the deposit is unreserved and
                    ///   origin is
                    ///  removed as a member, consequently not being a candidate for the next round
                    /// anymore.  Similar to
                    /// [`remove_member`](Self::remove_member), if replacement runners exists, they
                    ///  are immediately used. If the prime is renouncing, then no prime will exist
                    /// until the  next round.
                    ///
                    ///The dispatch origin of this call must be signed, and have one of the above
                    /// roles. The type of renouncing must be provided as
                    /// witness data.
                    ///
                    ///## Complexity
                    ///  - Renouncing::Candidate(count): O(count + log(count))
                    ///  - Renouncing::Member: O(1)
                    ///  - Renouncing::RunnerUp: O(1)
                    renounce_candidacy {
                        renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
                    },
                    #[codec(index = 4)]
                    ///Remove a particular member from the set. This is effective immediately and
                    /// the bond of the outgoing member is slashed.
                    ///
                    ///If a runner-up is available, then the best runner-up will be removed and
                    /// replaces the outgoing member. Otherwise, if
                    /// `rerun_election` is `true`, a new phragmen election is
                    /// started, else, nothing happens.
                    ///
                    ///If `slash_bond` is set to true, the bond of the member being removed is
                    /// slashed. Else, it is returned.
                    ///
                    ///The dispatch origin of this call must be root.
                    ///
                    ///Note that this does not affect the designated block number of the next
                    /// election.
                    ///
                    ///## Complexity
                    /// - Check details of remove_and_replace_member() and do_phragmen().
                    remove_member {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        slash_bond: ::core::primitive::bool,
                        rerun_election: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    ///Clean all voters who are defunct (i.e. they do not serve any purpose at
                    /// all). The deposit of the removed voters are returned.
                    ///
                    ///This is an root function to be used only for cleaning the state.
                    ///
                    ///The dispatch origin of this call must be root.
                    ///
                    ///## Complexity
                    /// - Check is_defunct_voter() details.
                    clean_defunct_voters {
                        num_voters: ::core::primitive::u32,
                        num_defunct: ::core::primitive::u32,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Cannot vote when no candidates or members exist.
                    UnableToVote,
                    #[codec(index = 1)]
                    ///Must vote for at least one candidate.
                    NoVotes,
                    #[codec(index = 2)]
                    ///Cannot vote more than candidates.
                    TooManyVotes,
                    #[codec(index = 3)]
                    ///Cannot vote more than maximum allowed.
                    MaximumVotesExceeded,
                    #[codec(index = 4)]
                    ///Cannot vote with stake less than minimum balance.
                    LowBalance,
                    #[codec(index = 5)]
                    ///Voter can not pay voting bond.
                    UnableToPayBond,
                    #[codec(index = 6)]
                    ///Must be a voter.
                    MustBeVoter,
                    #[codec(index = 7)]
                    ///Duplicated candidate submission.
                    DuplicatedCandidate,
                    #[codec(index = 8)]
                    ///Too many candidates have been created.
                    TooManyCandidates,
                    #[codec(index = 9)]
                    ///Member cannot re-submit candidacy.
                    MemberSubmit,
                    #[codec(index = 10)]
                    ///Runner cannot re-submit candidacy.
                    RunnerUpSubmit,
                    #[codec(index = 11)]
                    ///Candidate does not have enough funds.
                    InsufficientCandidateFunds,
                    #[codec(index = 12)]
                    ///Not a member.
                    NotMember,
                    #[codec(index = 13)]
                    ///The provided count of number of candidates is incorrect.
                    InvalidWitnessData,
                    #[codec(index = 14)]
                    ///The provided count of number of votes is incorrect.
                    InvalidVoteCount,
                    #[codec(index = 15)]
                    ///The renouncing origin presented a wrong `Renouncing` parameter.
                    InvalidRenouncing,
                    #[codec(index = 16)]
                    ///Prediction regarding replacement after member removal is wrong.
                    InvalidReplacement,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A new term with new_members. This indicates that enough candidates existed
                    /// to run the election, not that enough have has been
                    /// elected. The inner value must be examined
                    /// for this purpose. A `NewTerm(\[\])` indicates that some candidates got
                    /// their bond slashed and none were elected, whilst
                    /// `EmptyTerm` means that no candidates existed to
                    /// begin with.
                    NewTerm {
                        new_members:
                            ::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
                    },
                    #[codec(index = 1)]
                    ///No (or not enough) candidates existed for this round. This is different
                    /// from `NewTerm(\[\])`. See the description of `NewTerm`.
                    EmptyTerm,
                    #[codec(index = 2)]
                    ///Internal error happened while trying to perform election.
                    ElectionError,
                    #[codec(index = 3)]
                    ///A member has been removed. This should always be followed by either
                    /// `NewTerm` or `EmptyTerm`.
                    MemberKicked { member: ::subxt::utils::AccountId32 },
                    #[codec(index = 4)]
                    ///Someone has renounced their candidacy.
                    Renounced { candidate: ::subxt::utils::AccountId32 },
                    #[codec(index = 5)]
                    ///A candidate was slashed by amount due to failing to obtain a seat as member
                    /// or runner-up.
                    ///
                    ///Note that old members and runners-up are also candidates.
                    CandidateSlashed {
                        candidate: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    ///A seat holder was slashed by amount by being forcefully removed from the
                    /// set.
                    SeatHolderSlashed {
                        seat_holder: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Renouncing {
                #[codec(index = 0)]
                Member,
                #[codec(index = 1)]
                RunnerUp,
                #[codec(index = 2)]
                Candidate(#[codec(compact)] ::core::primitive::u32),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SeatHolder<_0, _1> {
                pub who: _0,
                pub stake: _1,
                pub deposit: _1,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Voter<_0, _1> {
                pub votes: ::std::vec::Vec<_0>,
                pub stake: _1,
                pub deposit: _1,
            }
        }
        pub mod pallet_grandpa {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Report voter equivocation/misbehavior. This method will verify the
                    ///equivocation proof and validate the given key ownership proof
                    ///against the extracted offender. If both are valid, the offence
                    ///will be reported.
                    report_equivocation {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_grandpa::EquivocationProof<
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 1)]
                    ///Report voter equivocation/misbehavior. This method will verify the
                    ///equivocation proof and validate the given key ownership proof
                    ///against the extracted offender. If both are valid, the offence
                    ///will be reported.
                    ///
                    ///This extrinsic must be called unsigned and it is expected that only
                    ///block authors will call it (validated in `ValidateUnsigned`), as such
                    ///if the block author is defined it will be defined as the equivocation
                    ///reporter.
                    report_equivocation_unsigned {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_grandpa::EquivocationProof<
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 2)]
                    ///Note that the current authority set of the GRANDPA finality gadget has
                    /// stalled.
                    ///
                    ///This will trigger a forced authority set change at the beginning of the
                    /// next session, to be enacted `delay` blocks after that.
                    /// The `delay` should be high enough to safely assume that
                    /// the block signalling the forced change will not be re-orged e.g. 1000
                    /// blocks. The block production rate (which may be slowed
                    /// down because of finality lagging) should be taken into
                    /// account when choosing the `delay`. The GRANDPA voters based on the new
                    /// authority will start voting on top of `best_finalized_block_number` for new
                    /// finalized blocks. `best_finalized_block_number` should
                    /// be the highest of the latest finalized block of all
                    /// validators of the new authority set.
                    ///
                    ///Only callable by root.
                    note_stalled {
                        delay: ::core::primitive::u32,
                        best_finalized_block_number: ::core::primitive::u32,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Attempt to signal GRANDPA pause when the authority set isn't live
                    ///(either paused or already pending pause).
                    PauseFailed,
                    #[codec(index = 1)]
                    ///Attempt to signal GRANDPA resume when the authority set isn't paused
                    ///(either live or already pending resume).
                    ResumeFailed,
                    #[codec(index = 2)]
                    ///Attempt to signal GRANDPA change with one already pending.
                    ChangePending,
                    #[codec(index = 3)]
                    ///Cannot signal forced change so soon after last.
                    TooSoon,
                    #[codec(index = 4)]
                    ///A key ownership proof provided as part of an equivocation report is
                    /// invalid.
                    InvalidKeyOwnershipProof,
                    #[codec(index = 5)]
                    ///An equivocation proof provided as part of an equivocation report is
                    /// invalid.
                    InvalidEquivocationProof,
                    #[codec(index = 6)]
                    ///A given equivocation report is valid but already previously reported.
                    DuplicateOffenceReport,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///New authority set has been applied.
                    NewAuthorities {
                        authority_set: ::std::vec::Vec<(
                            runtime_types::sp_consensus_grandpa::app::Public,
                            ::core::primitive::u64,
                        )>,
                    },
                    #[codec(index = 1)]
                    ///Current authority set has been paused.
                    Paused,
                    #[codec(index = 2)]
                    ///Current authority set has been resumed.
                    Resumed,
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct StoredPendingChange<_0> {
                pub scheduled_at: _0,
                pub delay: _0,
                pub next_authorities:
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_consensus_grandpa::app::Public,
                        ::core::primitive::u64,
                    )>,
                pub forced: ::core::option::Option<_0>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum StoredState<_0> {
                #[codec(index = 0)]
                Live,
                #[codec(index = 1)]
                PendingPause { scheduled_at: _0, delay: _0 },
                #[codec(index = 2)]
                Paused,
                #[codec(index = 3)]
                PendingResume { scheduled_at: _0, delay: _0 },
            }
        }
        pub mod pallet_identity {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Identity pallet declaration.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Add a registrar to the system.
                    ///
                    ///The dispatch origin for this call must be `T::RegistrarOrigin`.
                    ///
                    /// - `account`: the account of the registrar.
                    ///
                    ///Emits `RegistrarAdded` if successful.
                    ///
                    ///## Complexity
                    /// - `O(R)` where `R` registrar-count (governance-bounded and code-bounded).
                    add_registrar {
                        account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 1)]
                    ///Set an account's identity information and reserve the appropriate deposit.
                    ///
                    ///If the account already has identity information, the deposit is taken as
                    /// part payment for the new deposit.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `info`: The identity information.
                    ///
                    ///Emits `IdentitySet` if successful.
                    ///
                    ///## Complexity
                    /// - `O(X + X' + R)`
                    ///  - where `X` additional-field-count (deposit-bounded and code-bounded)
                    ///  - where `R` judgements-count (registrar-count-bounded)
                    set_identity {
                        info:
                            ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
                    },
                    #[codec(index = 2)]
                    ///Set the sub-accounts of the sender.
                    ///
                    ///Payment: Any aggregate balance reserved by previous `set_subs` calls will
                    /// be returned and an amount `SubAccountDeposit` will be
                    /// reserved for each item in `subs`.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must have
                    /// a registered identity.
                    ///
                    /// - `subs`: The identity's (new) sub-accounts.
                    ///
                    ///## Complexity
                    /// - `O(P + S)`
                    ///  - where `P` old-subs-count (hard- and deposit-bounded).
                    ///  - where `S` subs-count (hard- and deposit-bounded).
                    set_subs {
                        subs: ::std::vec::Vec<(
                            ::subxt::utils::AccountId32,
                            runtime_types::pallet_identity::types::Data,
                        )>,
                    },
                    #[codec(index = 3)]
                    ///Clear an account's identity info and all sub-accounts and return all
                    /// deposits.
                    ///
                    ///Payment: All reserved balances on the account are returned.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must have
                    /// a registered identity.
                    ///
                    ///Emits `IdentityCleared` if successful.
                    ///
                    ///## Complexity
                    /// - `O(R + S + X)`
                    ///  - where `R` registrar-count (governance-bounded).
                    ///  - where `S` subs-count (hard- and deposit-bounded).
                    ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                    clear_identity,
                    #[codec(index = 4)]
                    ///Request a judgement from a registrar.
                    ///
                    ///Payment: At most `max_fee` will be reserved for payment to the registrar if
                    /// judgement given.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must have
                    /// a registered identity.
                    ///
                    /// - `reg_index`: The index of the registrar whose judgement is requested.
                    /// - `max_fee`: The maximum fee that may be paid. This should just be
                    ///   auto-populated as:
                    ///
                    ///```nocompile
                    /// Self::registrars().get(reg_index).unwrap().fee
                    /// ```
                    ///
                    ///Emits `JudgementRequested` if successful.
                    ///
                    ///## Complexity
                    /// - `O(R + X)`.
                    ///  - where `R` registrar-count (governance-bounded).
                    ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                    request_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        #[codec(compact)]
                        max_fee: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    ///Cancel a previous request.
                    ///
                    ///Payment: A previously reserved deposit is returned on success.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must have
                    /// a registered identity.
                    ///
                    /// - `reg_index`: The index of the registrar whose judgement is no longer
                    ///   requested.
                    ///
                    ///Emits `JudgementUnrequested` if successful.
                    ///
                    ///## Complexity
                    /// - `O(R + X)`.
                    ///  - where `R` registrar-count (governance-bounded).
                    ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                    cancel_request { reg_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    ///Set the fee required for a judgement to be requested from a registrar.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must be
                    /// the account of the registrar whose index is `index`.
                    ///
                    /// - `index`: the index of the registrar whose fee is to be set.
                    /// - `fee`: the new fee.
                    ///
                    ///## Complexity
                    /// - `O(R)`.
                    ///  - where `R` registrar-count (governance-bounded).
                    set_fee {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    ///Change the account associated with a registrar.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must be
                    /// the account of the registrar whose index is `index`.
                    ///
                    /// - `index`: the index of the registrar whose fee is to be set.
                    /// - `new`: the new account ID.
                    ///
                    ///## Complexity
                    /// - `O(R)`.
                    ///  - where `R` registrar-count (governance-bounded).
                    set_account_id {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 8)]
                    ///Set the field information for a registrar.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must be
                    /// the account of the registrar whose index is `index`.
                    ///
                    /// - `index`: the index of the registrar whose fee is to be set.
                    /// - `fields`: the fields that the registrar concerns themselves with.
                    ///
                    ///## Complexity
                    /// - `O(R)`.
                    ///  - where `R` registrar-count (governance-bounded).
                    set_fields {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        fields: runtime_types::pallet_identity::types::BitFlags<
                            runtime_types::pallet_identity::types::IdentityField,
                        >,
                    },
                    #[codec(index = 9)]
                    ///Provide a judgement for an account's identity.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must be
                    /// the account of the registrar whose index is
                    /// `reg_index`.
                    ///
                    /// - `reg_index`: the index of the registrar whose judgement is being made.
                    /// - `target`: the account whose identity the judgement is upon. This must be
                    ///   an account
                    ///  with a registered identity.
                    /// - `judgement`: the judgement of the registrar of index `reg_index` about
                    ///   `target`.
                    /// - `identity`: The hash of the [`IdentityInfo`] for that the judgement is
                    ///   provided.
                    ///
                    ///Emits `JudgementGiven` if successful.
                    ///
                    ///## Complexity
                    /// - `O(R + X)`.
                    ///  - where `R` registrar-count (governance-bounded).
                    ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                    provide_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        judgement: runtime_types::pallet_identity::types::Judgement<
                            ::core::primitive::u128,
                        >,
                        identity: ::subxt::utils::H256,
                    },
                    #[codec(index = 10)]
                    ///Remove an account's identity and sub-account information and slash the
                    /// deposits.
                    ///
                    ///Payment: Reserved balances from `set_subs` and `set_identity` are slashed
                    /// and handled by `Slash`. Verification request deposits
                    /// are not returned; they should be cancelled
                    /// manually using `cancel_request`.
                    ///
                    ///The dispatch origin for this call must match `T::ForceOrigin`.
                    ///
                    /// - `target`: the account whose identity the judgement is upon. This must be
                    ///   an account
                    ///  with a registered identity.
                    ///
                    ///Emits `IdentityKilled` if successful.
                    ///
                    ///## Complexity
                    /// - `O(R + S + X)`
                    ///  - where `R` registrar-count (governance-bounded).
                    ///  - where `S` subs-count (hard- and deposit-bounded).
                    ///  - where `X` additional-field-count (deposit-bounded and code-bounded).
                    kill_identity {
                        target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 11)]
                    ///Add the given account to the sender's subs.
                    ///
                    ///Payment: Balance reserved by a previous `set_subs` call for one sub will be
                    /// repatriated to the sender.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must have
                    /// a registered sub identity of `sub`.
                    add_sub {
                        sub: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 12)]
                    ///Alter the associated name of the given sub-account.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must have
                    /// a registered sub identity of `sub`.
                    rename_sub {
                        sub: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 13)]
                    ///Remove the given account from the sender's subs.
                    ///
                    ///Payment: Balance reserved by a previous `set_subs` call for one sub will be
                    /// repatriated to the sender.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must have
                    /// a registered sub identity of `sub`.
                    remove_sub {
                        sub: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 14)]
                    ///Remove the sender as a sub-account.
                    ///
                    ///Payment: Balance reserved by a previous `set_subs` call for one sub will be
                    /// repatriated to the sender (*not* the original
                    /// depositor).
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must have
                    /// a registered super-identity.
                    ///
                    ///NOTE: This should not normally be used, but is provided in the case that
                    /// the non- controller of an account is maliciously
                    /// registered as a sub-account.
                    quit_sub,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Too many subs-accounts.
                    TooManySubAccounts,
                    #[codec(index = 1)]
                    ///Account isn't found.
                    NotFound,
                    #[codec(index = 2)]
                    ///Account isn't named.
                    NotNamed,
                    #[codec(index = 3)]
                    ///Empty index.
                    EmptyIndex,
                    #[codec(index = 4)]
                    ///Fee is changed.
                    FeeChanged,
                    #[codec(index = 5)]
                    ///No identity found.
                    NoIdentity,
                    #[codec(index = 6)]
                    ///Sticky judgement.
                    StickyJudgement,
                    #[codec(index = 7)]
                    ///Judgement given.
                    JudgementGiven,
                    #[codec(index = 8)]
                    ///Invalid judgement.
                    InvalidJudgement,
                    #[codec(index = 9)]
                    ///The index is invalid.
                    InvalidIndex,
                    #[codec(index = 10)]
                    ///The target is invalid.
                    InvalidTarget,
                    #[codec(index = 11)]
                    ///Too many additional fields.
                    TooManyFields,
                    #[codec(index = 12)]
                    ///Maximum amount of registrars reached. Cannot add any more.
                    TooManyRegistrars,
                    #[codec(index = 13)]
                    ///Account ID is already named.
                    AlreadyClaimed,
                    #[codec(index = 14)]
                    ///Sender is not a sub-account.
                    NotSub,
                    #[codec(index = 15)]
                    ///Sub-account isn't owned by sender.
                    NotOwned,
                    #[codec(index = 16)]
                    ///The provided judgement was for a different identity.
                    JudgementForDifferentIdentity,
                    #[codec(index = 17)]
                    ///Error that occurs when there is an issue paying for judgement.
                    JudgementPaymentFailed,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A name was set or reset (which will remove all judgements).
                    IdentitySet { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 1)]
                    ///A name was cleared, and the given balance returned.
                    IdentityCleared {
                        who: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    ///A name was removed and the given balance slashed.
                    IdentityKilled {
                        who: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    ///A judgement was asked from a registrar.
                    JudgementRequested {
                        who: ::subxt::utils::AccountId32,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    ///A judgement request was retracted.
                    JudgementUnrequested {
                        who: ::subxt::utils::AccountId32,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    ///A judgement was given by a registrar.
                    JudgementGiven {
                        target: ::subxt::utils::AccountId32,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    ///A registrar was added.
                    RegistrarAdded { registrar_index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    ///A sub-identity was added to an identity and the deposit paid.
                    SubIdentityAdded {
                        sub: ::subxt::utils::AccountId32,
                        main: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    ///A sub-identity was removed from an identity and the deposit freed.
                    SubIdentityRemoved {
                        sub: ::subxt::utils::AccountId32,
                        main: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    ///A sub-identity was cleared, and the given deposit repatriated from the
                    ///main identity account to the sub-identity account.
                    SubIdentityRevoked {
                        sub: ::subxt::utils::AccountId32,
                        main: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BitFlags<_0>(
                    pub ::core::primitive::u64,
                    #[codec(skip)] pub ::core::marker::PhantomData<_0>,
                );
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Data {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Raw0([::core::primitive::u8; 0usize]),
                    #[codec(index = 2)]
                    Raw1([::core::primitive::u8; 1usize]),
                    #[codec(index = 3)]
                    Raw2([::core::primitive::u8; 2usize]),
                    #[codec(index = 4)]
                    Raw3([::core::primitive::u8; 3usize]),
                    #[codec(index = 5)]
                    Raw4([::core::primitive::u8; 4usize]),
                    #[codec(index = 6)]
                    Raw5([::core::primitive::u8; 5usize]),
                    #[codec(index = 7)]
                    Raw6([::core::primitive::u8; 6usize]),
                    #[codec(index = 8)]
                    Raw7([::core::primitive::u8; 7usize]),
                    #[codec(index = 9)]
                    Raw8([::core::primitive::u8; 8usize]),
                    #[codec(index = 10)]
                    Raw9([::core::primitive::u8; 9usize]),
                    #[codec(index = 11)]
                    Raw10([::core::primitive::u8; 10usize]),
                    #[codec(index = 12)]
                    Raw11([::core::primitive::u8; 11usize]),
                    #[codec(index = 13)]
                    Raw12([::core::primitive::u8; 12usize]),
                    #[codec(index = 14)]
                    Raw13([::core::primitive::u8; 13usize]),
                    #[codec(index = 15)]
                    Raw14([::core::primitive::u8; 14usize]),
                    #[codec(index = 16)]
                    Raw15([::core::primitive::u8; 15usize]),
                    #[codec(index = 17)]
                    Raw16([::core::primitive::u8; 16usize]),
                    #[codec(index = 18)]
                    Raw17([::core::primitive::u8; 17usize]),
                    #[codec(index = 19)]
                    Raw18([::core::primitive::u8; 18usize]),
                    #[codec(index = 20)]
                    Raw19([::core::primitive::u8; 19usize]),
                    #[codec(index = 21)]
                    Raw20([::core::primitive::u8; 20usize]),
                    #[codec(index = 22)]
                    Raw21([::core::primitive::u8; 21usize]),
                    #[codec(index = 23)]
                    Raw22([::core::primitive::u8; 22usize]),
                    #[codec(index = 24)]
                    Raw23([::core::primitive::u8; 23usize]),
                    #[codec(index = 25)]
                    Raw24([::core::primitive::u8; 24usize]),
                    #[codec(index = 26)]
                    Raw25([::core::primitive::u8; 25usize]),
                    #[codec(index = 27)]
                    Raw26([::core::primitive::u8; 26usize]),
                    #[codec(index = 28)]
                    Raw27([::core::primitive::u8; 27usize]),
                    #[codec(index = 29)]
                    Raw28([::core::primitive::u8; 28usize]),
                    #[codec(index = 30)]
                    Raw29([::core::primitive::u8; 29usize]),
                    #[codec(index = 31)]
                    Raw30([::core::primitive::u8; 30usize]),
                    #[codec(index = 32)]
                    Raw31([::core::primitive::u8; 31usize]),
                    #[codec(index = 33)]
                    Raw32([::core::primitive::u8; 32usize]),
                    #[codec(index = 34)]
                    BlakeTwo256([::core::primitive::u8; 32usize]),
                    #[codec(index = 35)]
                    Sha256([::core::primitive::u8; 32usize]),
                    #[codec(index = 36)]
                    Keccak256([::core::primitive::u8; 32usize]),
                    #[codec(index = 37)]
                    ShaThree256([::core::primitive::u8; 32usize]),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum IdentityField {
                    #[codec(index = 1)]
                    Display,
                    #[codec(index = 2)]
                    Legal,
                    #[codec(index = 4)]
                    Web,
                    #[codec(index = 8)]
                    Riot,
                    #[codec(index = 16)]
                    Email,
                    #[codec(index = 32)]
                    PgpFingerprint,
                    #[codec(index = 64)]
                    Image,
                    #[codec(index = 128)]
                    Twitter,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IdentityInfo {
                    pub additional: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::pallet_identity::types::Data,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                    pub display: runtime_types::pallet_identity::types::Data,
                    pub legal: runtime_types::pallet_identity::types::Data,
                    pub web: runtime_types::pallet_identity::types::Data,
                    pub riot: runtime_types::pallet_identity::types::Data,
                    pub email: runtime_types::pallet_identity::types::Data,
                    pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
                    pub image: runtime_types::pallet_identity::types::Data,
                    pub twitter: runtime_types::pallet_identity::types::Data,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Judgement<_0> {
                    #[codec(index = 0)]
                    Unknown,
                    #[codec(index = 1)]
                    FeePaid(_0),
                    #[codec(index = 2)]
                    Reasonable,
                    #[codec(index = 3)]
                    KnownGood,
                    #[codec(index = 4)]
                    OutOfDate,
                    #[codec(index = 5)]
                    LowQuality,
                    #[codec(index = 6)]
                    Erroneous,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RegistrarInfo<_0, _1> {
                    pub account: _1,
                    pub fee: _0,
                    pub fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Registration<_0> {
                    pub judgements: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        runtime_types::pallet_identity::types::Judgement<_0>,
                    )>,
                    pub deposit: _0,
                    pub info: runtime_types::pallet_identity::types::IdentityInfo,
                }
            }
        }
        pub mod pallet_im_online {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///## Complexity:
                    /// - `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E
                    ///   is length of
                    ///  `heartbeat.network_state.external_address`
                    ///  - `O(K)`: decoding of length `K`
                    ///  - `O(E)`: decoding/encoding of length `E`
                    heartbeat {
                        heartbeat:
                            runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
                        signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Non existent public key.
                    InvalidKey,
                    #[codec(index = 1)]
                    ///Duplicated heartbeat.
                    DuplicatedHeartbeat,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A new heartbeat was received from `AuthorityId`.
                    HeartbeatReceived {
                        authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                    },
                    #[codec(index = 1)]
                    ///At the end of the session, no offence was committed.
                    AllGood,
                    #[codec(index = 2)]
                    ///At the end of the session, at least one validator was found to be offline.
                    SomeOffline { offline: ::std::vec::Vec<(::subxt::utils::AccountId32, ())> },
                }
            }
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BoundedOpaqueNetworkState {
                pub peer_id: runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                    ::core::primitive::u8,
                >,
                pub external_addresses:
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Heartbeat<_0> {
                pub block_number: _0,
                pub network_state: runtime_types::sp_core::offchain::OpaqueNetworkState,
                pub session_index: _0,
                pub authority_index: _0,
                pub validators_len: _0,
            }
        }
        pub mod pallet_indices {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Assign an previously unassigned index.
                    ///
                    ///Payment: `Deposit` is reserved from the sender account.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `index`: the index to be claimed. This must not be in use.
                    ///
                    ///Emits `IndexAssigned` if successful.
                    ///
                    ///## Complexity
                    /// - `O(1)`.
                    claim { index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    ///Assign an index already owned by the sender to another account. The balance
                    /// reservation is effectively transferred to the new
                    /// account.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `index`: the index to be re-assigned. This must be owned by the sender.
                    /// - `new`: the new owner of the index. This function is a no-op if it is
                    ///   equal to sender.
                    ///
                    ///Emits `IndexAssigned` if successful.
                    ///
                    ///## Complexity
                    /// - `O(1)`.
                    transfer {
                        new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///Free up an index owned by the sender.
                    ///
                    ///Payment: Any previous deposit placed for the index is unreserved in the
                    /// sender account.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must own
                    /// the index.
                    ///
                    /// - `index`: the index to be freed. This must be owned by the sender.
                    ///
                    ///Emits `IndexFreed` if successful.
                    ///
                    ///## Complexity
                    /// - `O(1)`.
                    free { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    ///Force an index to an account. This doesn't require a deposit. If the index
                    /// is already held, then any deposit is reimbursed to its
                    /// current owner.
                    ///
                    ///The dispatch origin for this call must be _Root_.
                    ///
                    /// - `index`: the index to be (re-)assigned.
                    /// - `new`: the new owner of the index. This function is a no-op if it is
                    ///   equal to sender.
                    /// - `freeze`: if set to `true`, will freeze the index so it cannot be
                    ///   transferred.
                    ///
                    ///Emits `IndexAssigned` if successful.
                    ///
                    ///## Complexity
                    /// - `O(1)`.
                    force_transfer {
                        new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        index: ::core::primitive::u32,
                        freeze: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    ///Freeze an index so it will always point to the sender account. This
                    /// consumes the deposit.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the signing account
                    /// must have a non-frozen account `index`.
                    ///
                    /// - `index`: the index to be frozen in place.
                    ///
                    ///Emits `IndexFrozen` if successful.
                    ///
                    ///## Complexity
                    /// - `O(1)`.
                    freeze { index: ::core::primitive::u32 },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///The index was not already assigned.
                    NotAssigned,
                    #[codec(index = 1)]
                    ///The index is assigned to another account.
                    NotOwner,
                    #[codec(index = 2)]
                    ///The index was not available.
                    InUse,
                    #[codec(index = 3)]
                    ///The source and destination accounts are identical.
                    NotTransfer,
                    #[codec(index = 4)]
                    ///The index is permanent and may not be freed/changed.
                    Permanent,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A account index was assigned.
                    IndexAssigned {
                        who: ::subxt::utils::AccountId32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    ///A account index has been freed up (unassigned).
                    IndexFreed { index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    ///A account index has been frozen to its current account ID.
                    IndexFrozen { index: ::core::primitive::u32, who: ::subxt::utils::AccountId32 },
                }
            }
        }
        pub mod pallet_membership {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Add a member `who` to the set.
                    ///
                    ///May only be called from `T::AddOrigin`.
                    add_member {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 1)]
                    ///Remove a member `who` from the set.
                    ///
                    ///May only be called from `T::RemoveOrigin`.
                    remove_member {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 2)]
                    ///Swap out one member `remove` for another `add`.
                    ///
                    ///May only be called from `T::SwapOrigin`.
                    ///
                    ///Prime membership is *not* passed from `remove` to `add`, if extant.
                    swap_member {
                        remove: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        add: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 3)]
                    ///Change the membership to a new set, disregarding the existing membership.
                    /// Be nice and pass `members` pre-sorted.
                    ///
                    ///May only be called from `T::ResetOrigin`.
                    reset_members { members: ::std::vec::Vec<::subxt::utils::AccountId32> },
                    #[codec(index = 4)]
                    ///Swap out the sending member for some other key `new`.
                    ///
                    ///May only be called from `Signed` origin of a current member.
                    ///
                    ///Prime membership is passed from the origin account to `new`, if extant.
                    change_key {
                        new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 5)]
                    ///Set the prime member. Must be a current member.
                    ///
                    ///May only be called from `T::PrimeOrigin`.
                    set_prime { who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()> },
                    #[codec(index = 6)]
                    ///Remove the prime member if it exists.
                    ///
                    ///May only be called from `T::PrimeOrigin`.
                    clear_prime,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Already a member.
                    AlreadyMember,
                    #[codec(index = 1)]
                    ///Not a member.
                    NotMember,
                    #[codec(index = 2)]
                    ///Too many members.
                    TooManyMembers,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///The given member was added; see the transaction for who.
                    MemberAdded,
                    #[codec(index = 1)]
                    ///The given member was removed; see the transaction for who.
                    MemberRemoved,
                    #[codec(index = 2)]
                    ///Two members were swapped; see the transaction for who.
                    MembersSwapped,
                    #[codec(index = 3)]
                    ///The membership was reset; see the transaction for who the new set is.
                    MembersReset,
                    #[codec(index = 4)]
                    ///One of the members' keys changed.
                    KeyChanged,
                    #[codec(index = 5)]
                    ///Phantom member, never used.
                    Dummy,
                }
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Immediately dispatch a multi-signature call using a single approval from
                    /// the caller.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `other_signatories`: The accounts (other than the sender) who are part of
                    ///   the
                    ///multi-signature, but do not participate in the approval process.
                    /// - `call`: The call to be executed.
                    ///
                    ///Result is equivalent to the dispatched result.
                    ///
                    ///## Complexity
                    ///O(Z + C) where Z is the length of the call and C its execution weight.
                    as_multi_threshold_1 {
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    ///Register approval for a dispatch to be made from a deterministic composite
                    /// account if approved by a total of `threshold - 1` of
                    /// `other_signatories`.
                    ///
                    ///If there are enough, then dispatch the call.
                    ///
                    ///Payment: `DepositBase` will be reserved if this is the first approval, plus
                    ///`threshold` times `DepositFactor`. It is returned once this dispatch
                    /// happens or is cancelled.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `threshold`: The total number of approvals for this dispatch before it is
                    ///   executed.
                    /// - `other_signatories`: The accounts (other than the sender) who can approve
                    ///   this
                    ///dispatch. May not be empty.
                    /// - `maybe_timepoint`: If this is the first approval, then this must be
                    ///   `None`. If it is
                    ///not the first approval, then it must be `Some`, with the timepoint (block
                    /// number and transaction index) of the first approval
                    /// transaction.
                    /// - `call`: The call to be executed.
                    ///
                    ///NOTE: Unless this is the final approval, you will generally want to use
                    ///`approve_as_multi` instead, since it only requires a hash of the call.
                    ///
                    ///Result is equivalent to the dispatched result if `threshold` is exactly
                    /// `1`. Otherwise on success, result is `Ok` and the
                    /// result from the interior call, if it was executed,
                    /// may be found in the deposited `MultisigExecuted` event.
                    ///
                    ///## Complexity
                    /// - `O(S + Z + Call)`.
                    /// - Up to one balance-reserve or unreserve operation.
                    /// - One passthrough operation, one insert, both `O(S)` where `S` is the
                    ///   number of
                    ///  signatories. `S` is capped by `MaxSignatories`, with weight being
                    /// proportional.
                    /// - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.
                    /// - One encode & hash, both of complexity `O(S)`.
                    /// - Up to one binary search and insert (`O(logS + S)`).
                    /// - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
                    /// - One event.
                    /// - The weight of the `call`.
                    /// - Storage: inserts one item, value size bounded by `MaxSignatories`, with a
                    ///   deposit
                    ///  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
                    as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    ///Register approval for a dispatch to be made from a deterministic composite
                    /// account if approved by a total of `threshold - 1` of
                    /// `other_signatories`.
                    ///
                    ///Payment: `DepositBase` will be reserved if this is the first approval, plus
                    ///`threshold` times `DepositFactor`. It is returned once this dispatch
                    /// happens or is cancelled.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `threshold`: The total number of approvals for this dispatch before it is
                    ///   executed.
                    /// - `other_signatories`: The accounts (other than the sender) who can approve
                    ///   this
                    ///dispatch. May not be empty.
                    /// - `maybe_timepoint`: If this is the first approval, then this must be
                    ///   `None`. If it is
                    ///not the first approval, then it must be `Some`, with the timepoint (block
                    /// number and transaction index) of the first approval
                    /// transaction.
                    /// - `call_hash`: The hash of the call to be executed.
                    ///
                    ///NOTE: If this is the final approval, you will want to use `as_multi`
                    /// instead.
                    ///
                    ///## Complexity
                    /// - `O(S)`.
                    /// - Up to one balance-reserve or unreserve operation.
                    /// - One passthrough operation, one insert, both `O(S)` where `S` is the
                    ///   number of
                    ///  signatories. `S` is capped by `MaxSignatories`, with weight being
                    /// proportional.
                    /// - One encode & hash, both of complexity `O(S)`.
                    /// - Up to one binary search and insert (`O(logS + S)`).
                    /// - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.
                    /// - One event.
                    /// - Storage: inserts one item, value size bounded by `MaxSignatories`, with a
                    ///   deposit
                    ///  taken for its lifetime of `DepositBase + threshold * DepositFactor`.
                    approve_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call_hash: [::core::primitive::u8; 32usize],
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 3)]
                    ///Cancel a pre-existing, on-going multisig transaction. Any deposit reserved
                    /// previously for this operation will be unreserved on
                    /// success.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `threshold`: The total number of approvals for this dispatch before it is
                    ///   executed.
                    /// - `other_signatories`: The accounts (other than the sender) who can approve
                    ///   this
                    ///dispatch. May not be empty.
                    /// - `timepoint`: The timepoint (block number and transaction index) of the
                    ///   first approval
                    ///transaction for this dispatch.
                    /// - `call_hash`: The hash of the call to be executed.
                    ///
                    ///## Complexity
                    /// - `O(S)`.
                    /// - Up to one balance-reserve or unreserve operation.
                    /// - One passthrough operation, one insert, both `O(S)` where `S` is the
                    ///   number of
                    ///  signatories. `S` is capped by `MaxSignatories`, with weight being
                    /// proportional.
                    /// - One encode & hash, both of complexity `O(S)`.
                    /// - One event.
                    /// - I/O: 1 read `O(S)`, one remove.
                    /// - Storage: removes one item.
                    cancel_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Threshold must be 2 or greater.
                    MinimumThreshold,
                    #[codec(index = 1)]
                    ///Call is already approved by this signatory.
                    AlreadyApproved,
                    #[codec(index = 2)]
                    ///Call doesn't need any (more) approvals.
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    ///There are too few signatories in the list.
                    TooFewSignatories,
                    #[codec(index = 4)]
                    ///There are too many signatories in the list.
                    TooManySignatories,
                    #[codec(index = 5)]
                    ///The signatories were provided out of order; they should be ordered.
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    ///The sender was contained in the other signatories; it shouldn't be.
                    SenderInSignatories,
                    #[codec(index = 7)]
                    ///Multisig operation not found when attempting to cancel.
                    NotFound,
                    #[codec(index = 8)]
                    ///Only the account that originally created the multisig is able to cancel it.
                    NotOwner,
                    #[codec(index = 9)]
                    ///No timepoint was given, yet the multisig operation is already underway.
                    NoTimepoint,
                    #[codec(index = 10)]
                    ///A different timepoint was given to the multisig operation that is underway.
                    WrongTimepoint,
                    #[codec(index = 11)]
                    ///A timepoint was given, yet no multisig operation is underway.
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    ///The maximum weight information provided was too low.
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    ///The data to be stored is already stored.
                    AlreadyStored,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A new multisig operation has begun.
                    NewMultisig {
                        approving: ::subxt::utils::AccountId32,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    ///A multisig operation has been approved by someone.
                    MultisigApproval {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    ///A multisig operation has been executed.
                    MultisigExecuted {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    ///A multisig operation has been cancelled.
                    MultisigCancelled {
                        cancelling: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: _0,
            }
        }
        pub mod pallet_nis {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Bid<_0, _1> {
                    pub amount: _0,
                    pub who: _1,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Place a bid.
                    ///
                    ///Origin must be Signed, and account must have at least `amount` in free
                    /// balance.
                    ///
                    /// - `amount`: The amount of the bid; these funds will be reserved, and
                    ///   if/when
                    ///  consolidated, removed. Must be at least `MinBid`.
                    /// - `duration`: The number of periods before which the newly consolidated bid
                    ///   may be
                    ///  thawed. Must be greater than 1 and no more than `QueueCount`.
                    ///
                    ///Complexities:
                    /// - `Queues[duration].len()` (just take max).
                    place_bid {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    ///Retract a previously placed bid.
                    ///
                    ///Origin must be Signed, and the account should have previously issued a
                    /// still-active bid of `amount` for `duration`.
                    ///
                    /// - `amount`: The amount of the previous bid.
                    /// - `duration`: The duration of the previous bid.
                    retract_bid {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///Ensure we have sufficient funding for all potential payouts.
                    ///
                    /// - `origin`: Must be accepted by `FundOrigin`.
                    fund_deficit,
                    #[codec(index = 3)]
                    ///Reduce or remove an outstanding receipt, placing the according proportion
                    /// of funds into the account of the owner.
                    ///
                    /// - `origin`: Must be Signed and the account must be the owner of the receipt
                    ///   `index` as
                    ///  well as any fungible counterpart.
                    /// - `index`: The index of the receipt.
                    /// - `portion`: If `Some`, then only the given portion of the receipt should
                    ///   be thawed. If
                    ///  `None`, then all of it should be.
                    thaw_private {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        maybe_proportion: ::core::option::Option<
                            runtime_types::sp_arithmetic::per_things::Perquintill,
                        >,
                    },
                    #[codec(index = 4)]
                    ///Reduce or remove an outstanding receipt, placing the according proportion
                    /// of funds into the account of the owner.
                    ///
                    /// - `origin`: Must be Signed and the account must be the owner of the
                    ///   fungible counterpart
                    ///  for receipt `index`.
                    /// - `index`: The index of the receipt.
                    thaw_communal {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    ///Make a private receipt communal and create fungible counterparts for its
                    /// owner.
                    communify {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    ///Make a communal receipt private and burn fungible counterparts from its
                    /// owner.
                    privatize {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///The duration of the bid is less than one.
                    DurationTooSmall,
                    #[codec(index = 1)]
                    ///The duration is the bid is greater than the number of queues.
                    DurationTooBig,
                    #[codec(index = 2)]
                    ///The amount of the bid is less than the minimum allowed.
                    AmountTooSmall,
                    #[codec(index = 3)]
                    ///The queue for the bid's duration is full and the amount bid is too low to
                    /// get in through replacing an existing bid.
                    BidTooLow,
                    #[codec(index = 4)]
                    ///Receipt index is unknown.
                    UnknownReceipt,
                    #[codec(index = 5)]
                    ///Not the owner of the receipt.
                    NotOwner,
                    #[codec(index = 6)]
                    ///Bond not yet at expiry date.
                    NotExpired,
                    #[codec(index = 7)]
                    ///The given bid for retraction is not found.
                    UnknownBid,
                    #[codec(index = 8)]
                    ///The portion supplied is beyond the value of the receipt.
                    PortionTooBig,
                    #[codec(index = 9)]
                    ///Not enough funds are held to pay out.
                    Unfunded,
                    #[codec(index = 10)]
                    ///There are enough funds for what is required.
                    AlreadyFunded,
                    #[codec(index = 11)]
                    ///The thaw throttle has been reached for this period.
                    Throttled,
                    #[codec(index = 12)]
                    ///The operation would result in a receipt worth an insignficant value.
                    MakesDust,
                    #[codec(index = 13)]
                    ///The receipt is already communal.
                    AlreadyCommunal,
                    #[codec(index = 14)]
                    ///The receipt is already private.
                    AlreadyPrivate,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A bid was successfully placed.
                    BidPlaced {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    ///A bid was successfully removed (before being accepted).
                    BidRetracted {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///A bid was dropped from a queue because of another, more substantial, bid
                    /// was present.
                    BidDropped {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    ///A bid was accepted. The balance may not be released until expiry.
                    Issued {
                        index: ::core::primitive::u32,
                        expiry: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    ///An receipt has been (at least partially) thawed.
                    Thawed {
                        index: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                        amount: ::core::primitive::u128,
                        dropped: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    ///An automatic funding of the deficit was made.
                    Funded { deficit: ::core::primitive::u128 },
                    #[codec(index = 6)]
                    ///A receipt was transfered.
                    Transferred {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReceiptRecord<_0, _1, _2> {
                    pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                    pub owner: ::core::option::Option<(_0, _2)>,
                    pub expiry: _1,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SummaryRecord<_0, _1> {
                    pub proportion_owed: runtime_types::sp_arithmetic::per_things::Perquintill,
                    pub index: _0,
                    pub thawed: runtime_types::sp_arithmetic::per_things::Perquintill,
                    pub last_period: _0,
                    pub receipts_on_hold: _1,
                }
            }
        }
        pub mod pallet_offences {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Events type.
                pub enum Event {
                    #[codec(index = 0)]
                    ///There is an offence reported of the given `kind` happened at the
                    /// `session_index` and (kind-specific) time slot. This
                    /// event is not deposited for duplicate slashes.
                    /// \[kind, timeslot\].
                    Offence {
                        kind: [::core::primitive::u8; 16usize],
                        timeslot: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
            }
        }
        pub mod pallet_preimage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Register a preimage on-chain.
                    ///
                    ///If the preimage was previously requested, no fees or deposits are taken for
                    /// providing the preimage. Otherwise, a deposit is taken
                    /// proportional to the size of the preimage.
                    note_preimage { bytes: ::std::vec::Vec<::core::primitive::u8> },
                    #[codec(index = 1)]
                    ///Clear an unrequested preimage from the runtime storage.
                    ///
                    ///If `len` is provided, then it will be a much cheaper operation.
                    ///
                    /// - `hash`: The hash of the preimage to be removed from the store.
                    /// - `len`: The length of the preimage of `hash`.
                    unnote_preimage { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    ///Request a preimage be uploaded to the chain without paying any fees or
                    /// deposits.
                    ///
                    ///If the preimage requests has already been provided on-chain, we unreserve
                    /// any deposit a user may have paid, and take the control
                    /// of the preimage out of their hands.
                    request_preimage { hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    ///Clear a previously made request for a preimage.
                    ///
                    ///NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`.
                    unrequest_preimage { hash: ::subxt::utils::H256 },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Preimage is too large to store on-chain.
                    TooBig,
                    #[codec(index = 1)]
                    ///Preimage has already been noted on-chain.
                    AlreadyNoted,
                    #[codec(index = 2)]
                    ///The user is not authorized to perform this action.
                    NotAuthorized,
                    #[codec(index = 3)]
                    ///The preimage cannot be removed since it has not yet been noted.
                    NotNoted,
                    #[codec(index = 4)]
                    ///A preimage may not be removed when there are outstanding requests.
                    Requested,
                    #[codec(index = 5)]
                    ///The preimage request cannot be removed since no outstanding requests exist.
                    NotRequested,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A preimage has been noted.
                    Noted { hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    ///A preimage has been requested.
                    Requested { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    ///A preimage has ben cleared.
                    Cleared { hash: ::subxt::utils::H256 },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RequestStatus<_0, _1> {
                #[codec(index = 0)]
                Unrequested { deposit: (_0, _1), len: ::core::primitive::u32 },
                #[codec(index = 1)]
                Requested {
                    deposit: ::core::option::Option<(_0, _1)>,
                    count: ::core::primitive::u32,
                    len: ::core::option::Option<::core::primitive::u32>,
                },
            }
        }
        pub mod pallet_proxy {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Dispatch the given `call` from an account that the sender is authorised for
                    /// through `add_proxy`.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Parameters:
                    /// - `real`: The account that the proxy will make a call on behalf of.
                    /// - `force_proxy_type`: Specify the exact proxy type to be used and checked
                    ///   for this call.
                    /// - `call`: The call to be made by the `real` account.
                    proxy {
                        real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        force_proxy_type:
                            ::core::option::Option<runtime_types::rococo_runtime::ProxyType>,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    ///Register a proxy account for the sender that is able to make calls on its
                    /// behalf.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Parameters:
                    /// - `proxy`: The account that the `caller` would like to make a proxy.
                    /// - `proxy_type`: The permissions allowed for this proxy account.
                    /// - `delay`: The announcement period required of the initial proxy. Will
                    ///   generally be
                    ///zero.
                    add_proxy {
                        delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        proxy_type: runtime_types::rococo_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///Unregister a proxy account for the sender.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Parameters:
                    /// - `proxy`: The account that the `caller` would like to remove as a proxy.
                    /// - `proxy_type`: The permissions currently enabled for the removed proxy
                    ///   account.
                    remove_proxy {
                        delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        proxy_type: runtime_types::rococo_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    ///Unregister all proxy accounts for the sender.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///WARNING: This may be called on accounts created by `pure`, however if done,
                    /// then the unreserved fees will be inaccessible. **All
                    /// access to this account will be lost.**
                    remove_proxies,
                    #[codec(index = 4)]
                    ///Spawn a fresh new account that is guaranteed to be otherwise inaccessible,
                    /// and initialize it with a proxy of `proxy_type` for
                    /// `origin` sender.
                    ///
                    ///Requires a `Signed` origin.
                    ///
                    /// - `proxy_type`: The type of the proxy that the sender will be registered as
                    ///   over the
                    ///new account. This will almost always be the most permissive `ProxyType`
                    /// possible to allow for maximum flexibility.
                    /// - `index`: A disambiguation index, in case this is called multiple times in
                    ///   the same
                    ///transaction (e.g. with `utility::batch`). Unless you're using `batch` you
                    /// probably just want to use `0`.
                    /// - `delay`: The announcement period required of the initial proxy. Will
                    ///   generally be
                    ///zero.
                    ///
                    ///Fails with `Duplicate` if this has already been called in this transaction,
                    /// from the same sender, with the same parameters.
                    ///
                    ///Fails if there are insufficient funds to pay for deposit.
                    create_pure {
                        proxy_type: runtime_types::rococo_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                        index: ::core::primitive::u16,
                    },
                    #[codec(index = 5)]
                    ///Removes a previously spawned pure proxy.
                    ///
                    ///WARNING: **All access to this account will be lost.** Any funds held in it
                    /// will be inaccessible.
                    ///
                    ///Requires a `Signed` origin, and the sender account must have been created
                    /// by a call to `pure` with corresponding parameters.
                    ///
                    /// - `spawner`: The account that originally called `pure` to create this
                    ///   account.
                    /// - `index`: The disambiguation index originally passed to `pure`. Probably
                    ///   `0`.
                    /// - `proxy_type`: The proxy type originally passed to `pure`.
                    /// - `height`: The height of the chain when the call to `pure` was processed.
                    /// - `ext_index`: The extrinsic index in which the call to `pure` was
                    ///   processed.
                    ///
                    ///Fails with `NoPermission` in case the caller is not a previously created
                    /// pure account whose `pure` call has corresponding
                    /// parameters.
                    kill_pure {
                        spawner: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        proxy_type: runtime_types::rococo_runtime::ProxyType,
                        index: ::core::primitive::u16,
                        #[codec(compact)]
                        height: ::core::primitive::u32,
                        #[codec(compact)]
                        ext_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    ///Publish the hash of a proxy-call that will be made in the future.
                    ///
                    ///This must be called some number of blocks before the corresponding `proxy`
                    /// is attempted if the delay associated with the proxy
                    /// relationship is greater than zero.
                    ///
                    ///No more than `MaxPending` announcements may be made at any one time.
                    ///
                    ///This will take a deposit of `AnnouncementDepositFactor` as well as
                    ///`AnnouncementDepositBase` if there are no other pending announcements.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and a proxy of `real`.
                    ///
                    ///Parameters:
                    /// - `real`: The account that the proxy will make a call on behalf of.
                    /// - `call_hash`: The hash of the call to be made by the `real` account.
                    announce {
                        real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 7)]
                    ///Remove a given announcement.
                    ///
                    ///May be called by a proxy account to remove a call they previously announced
                    /// and return the deposit.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Parameters:
                    /// - `real`: The account that the proxy will make a call on behalf of.
                    /// - `call_hash`: The hash of the call to be made by the `real` account.
                    remove_announcement {
                        real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 8)]
                    ///Remove the given announcement of a delegate.
                    ///
                    ///May be called by a target (proxied) account to remove a call that one of
                    /// their delegates (`delegate`) has announced they want to
                    /// execute. The deposit is returned.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Parameters:
                    /// - `delegate`: The account that previously announced the call.
                    /// - `call_hash`: The hash of the call to be made.
                    reject_announcement {
                        delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 9)]
                    ///Dispatch the given `call` from an account that the sender is authorized for
                    /// through `add_proxy`.
                    ///
                    ///Removes any corresponding announcement(s).
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Parameters:
                    /// - `real`: The account that the proxy will make a call on behalf of.
                    /// - `force_proxy_type`: Specify the exact proxy type to be used and checked
                    ///   for this call.
                    /// - `call`: The call to be made by the `real` account.
                    proxy_announced {
                        delegate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        real: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        force_proxy_type:
                            ::core::option::Option<runtime_types::rococo_runtime::ProxyType>,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///There are too many proxies registered or too many announcements pending.
                    TooMany,
                    #[codec(index = 1)]
                    ///Proxy registration not found.
                    NotFound,
                    #[codec(index = 2)]
                    ///Sender is not a proxy of the account to be proxied.
                    NotProxy,
                    #[codec(index = 3)]
                    ///A call which is incompatible with the proxy type's filter was attempted.
                    Unproxyable,
                    #[codec(index = 4)]
                    ///Account is already a proxy.
                    Duplicate,
                    #[codec(index = 5)]
                    ///Call may not be made by proxy because it may escalate its privileges.
                    NoPermission,
                    #[codec(index = 6)]
                    ///Announcement, if made at all, was made too recently.
                    Unannounced,
                    #[codec(index = 7)]
                    ///Cannot add self as proxy.
                    NoSelfProxy,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A proxy was executed correctly, with the given.
                    ProxyExecuted {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    ///A pure account has been created by new proxy with given
                    ///disambiguation index and proxy type.
                    PureCreated {
                        pure: ::subxt::utils::AccountId32,
                        who: ::subxt::utils::AccountId32,
                        proxy_type: runtime_types::rococo_runtime::ProxyType,
                        disambiguation_index: ::core::primitive::u16,
                    },
                    #[codec(index = 2)]
                    ///An announcement was placed to make a call in the future.
                    Announced {
                        real: ::subxt::utils::AccountId32,
                        proxy: ::subxt::utils::AccountId32,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 3)]
                    ///A proxy was added.
                    ProxyAdded {
                        delegator: ::subxt::utils::AccountId32,
                        delegatee: ::subxt::utils::AccountId32,
                        proxy_type: runtime_types::rococo_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    ///A proxy was removed.
                    ProxyRemoved {
                        delegator: ::subxt::utils::AccountId32,
                        delegatee: ::subxt::utils::AccountId32,
                        proxy_type: runtime_types::rococo_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Announcement<_0, _1, _2> {
                pub real: _0,
                pub call_hash: _1,
                pub height: _2,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ProxyDefinition<_0, _1, _2> {
                pub delegate: _0,
                pub proxy_type: _1,
                pub delay: _2,
            }
        }
        pub mod pallet_recovery {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Send a call through a recovered account.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and registered to
                    ///be able to make calls on behalf of the recovered account.
                    ///
                    ///Parameters:
                    /// - `account`: The recovered account you want to make a call on-behalf-of.
                    /// - `call`: The call you want to make with the recovered account.
                    as_recovered {
                        account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    ///Allow ROOT to bypass the recovery process and set an a rescuer account
                    ///for a lost account directly.
                    ///
                    ///The dispatch origin for this call must be _ROOT_.
                    ///
                    ///Parameters:
                    /// - `lost`: The "lost account" to be recovered.
                    /// - `rescuer`: The "rescuer account" which can call as the lost account.
                    set_recovered {
                        lost: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        rescuer: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 2)]
                    ///Create a recovery configuration for your account. This makes your account
                    /// recoverable.
                    ///
                    ///Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance
                    ///will be reserved for storing the recovery configuration. This deposit is
                    /// returned in full when the user calls `remove_recovery`.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Parameters:
                    /// - `friends`: A list of friends you trust to vouch for recovery attempts.
                    ///   Should be
                    ///  ordered and contain no duplicate values.
                    /// - `threshold`: The number of friends that must vouch for a recovery attempt
                    ///   before the
                    ///  account can be recovered. Should be less than or equal to the length of
                    /// the list of  friends.
                    /// - `delay_period`: The number of blocks after a recovery attempt is
                    ///   initialized that
                    ///  needs to pass before the account can be recovered.
                    create_recovery {
                        friends: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        threshold: ::core::primitive::u16,
                        delay_period: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    ///Initiate the process for recovering a recoverable account.
                    ///
                    ///Payment: `RecoveryDeposit` balance will be reserved for initiating the
                    ///recovery process. This deposit will always be repatriated to the account
                    ///trying to be recovered. See `close_recovery`.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Parameters:
                    /// - `account`: The lost account that you want to recover. This account needs
                    ///   to be
                    ///  recoverable (i.e. have a recovery configuration).
                    initiate_recovery {
                        account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 4)]
                    ///Allow a "friend" of a recoverable account to vouch for an active recovery
                    ///process for that account.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and must be a "friend"
                    ///for the recoverable account.
                    ///
                    ///Parameters:
                    /// - `lost`: The lost account that you want to recover.
                    /// - `rescuer`: The account trying to rescue the lost account that you want to
                    ///   vouch for.
                    ///
                    ///The combination of these two parameters must point to an active recovery
                    ///process.
                    vouch_recovery {
                        lost: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        rescuer: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 5)]
                    ///Allow a successful rescuer to claim their recovered account.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and must be a "rescuer"
                    ///who has successfully completed the account recovery process: collected
                    ///`threshold` or more vouches, waited `delay_period` blocks since initiation.
                    ///
                    ///Parameters:
                    /// - `account`: The lost account that you want to claim has been successfully
                    ///   recovered by
                    ///  you.
                    claim_recovery {
                        account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 6)]
                    ///As the controller of a recoverable account, close an active recovery
                    ///process for your account.
                    ///
                    ///Payment: By calling this function, the recoverable account will receive
                    ///the recovery deposit `RecoveryDeposit` placed by the rescuer.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and must be a
                    ///recoverable account with an active recovery process for it.
                    ///
                    ///Parameters:
                    /// - `rescuer`: The account trying to rescue this recoverable account.
                    close_recovery {
                        rescuer: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 7)]
                    ///Remove the recovery process for your account. Recovered accounts are still
                    /// accessible.
                    ///
                    ///NOTE: The user must make sure to call `close_recovery` on all active
                    ///recovery attempts before calling this function else it will fail.
                    ///
                    ///Payment: By calling this function the recoverable account will unreserve
                    ///their recovery configuration deposit.
                    ///(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)
                    ///
                    ///The dispatch origin for this call must be _Signed_ and must be a
                    ///recoverable account (i.e. has a recovery configuration).
                    remove_recovery,
                    #[codec(index = 8)]
                    ///Cancel the ability to use `as_recovered` for `account`.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and registered to
                    ///be able to make calls on behalf of the recovered account.
                    ///
                    ///Parameters:
                    /// - `account`: The recovered account you are able to call on-behalf-of.
                    cancel_recovered {
                        account: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///User is not allowed to make a call on behalf of this account
                    NotAllowed,
                    #[codec(index = 1)]
                    ///Threshold must be greater than zero
                    ZeroThreshold,
                    #[codec(index = 2)]
                    ///Friends list must be greater than zero and threshold
                    NotEnoughFriends,
                    #[codec(index = 3)]
                    ///Friends list must be less than max friends
                    MaxFriends,
                    #[codec(index = 4)]
                    ///Friends list must be sorted and free of duplicates
                    NotSorted,
                    #[codec(index = 5)]
                    ///This account is not set up for recovery
                    NotRecoverable,
                    #[codec(index = 6)]
                    ///This account is already set up for recovery
                    AlreadyRecoverable,
                    #[codec(index = 7)]
                    ///A recovery process has already started for this account
                    AlreadyStarted,
                    #[codec(index = 8)]
                    ///A recovery process has not started for this rescuer
                    NotStarted,
                    #[codec(index = 9)]
                    ///This account is not a friend who can vouch
                    NotFriend,
                    #[codec(index = 10)]
                    ///The friend must wait until the delay period to vouch for this recovery
                    DelayPeriod,
                    #[codec(index = 11)]
                    ///This user has already vouched for this recovery
                    AlreadyVouched,
                    #[codec(index = 12)]
                    ///The threshold for recovering this account has not been met
                    Threshold,
                    #[codec(index = 13)]
                    ///There are still active recovery attempts that need to be closed
                    StillActive,
                    #[codec(index = 14)]
                    ///This account is already set up for recovery
                    AlreadyProxy,
                    #[codec(index = 15)]
                    ///Some internal state is broken.
                    BadState,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Events type.
                pub enum Event {
                    #[codec(index = 0)]
                    ///A recovery process has been set up for an account.
                    RecoveryCreated { account: ::subxt::utils::AccountId32 },
                    #[codec(index = 1)]
                    ///A recovery process has been initiated for lost account by rescuer account.
                    RecoveryInitiated {
                        lost_account: ::subxt::utils::AccountId32,
                        rescuer_account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    ///A recovery process for lost account by rescuer account has been vouched for
                    /// by sender.
                    RecoveryVouched {
                        lost_account: ::subxt::utils::AccountId32,
                        rescuer_account: ::subxt::utils::AccountId32,
                        sender: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    ///A recovery process for lost account by rescuer account has been closed.
                    RecoveryClosed {
                        lost_account: ::subxt::utils::AccountId32,
                        rescuer_account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    ///Lost account has been successfully recovered by rescuer account.
                    AccountRecovered {
                        lost_account: ::subxt::utils::AccountId32,
                        rescuer_account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    ///A recovery process has been removed for an account.
                    RecoveryRemoved { lost_account: ::subxt::utils::AccountId32 },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ActiveRecovery<_0, _1, _2> {
                pub created: _0,
                pub deposit: _1,
                pub friends: _2,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RecoveryConfig<_0, _1, _2> {
                pub delay_period: _0,
                pub deposit: _1,
                pub friends: _2,
                pub threshold: ::core::primitive::u16,
            }
        }
        pub mod pallet_scheduler {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Anonymously schedule a task.
                    schedule {
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    ///Cancel an anonymously scheduled task.
                    cancel { when: ::core::primitive::u32, index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    ///Schedule a named task.
                    schedule_named {
                        id: [::core::primitive::u8; 32usize],
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 3)]
                    ///Cancel a named scheduled task.
                    cancel_named { id: [::core::primitive::u8; 32usize] },
                    #[codec(index = 4)]
                    ///Anonymously schedule a task after a delay.
                    schedule_after {
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    ///Schedule a named task after a delay.
                    schedule_named_after {
                        id: [::core::primitive::u8; 32usize],
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Failed to schedule a call
                    FailedToSchedule,
                    #[codec(index = 1)]
                    ///Cannot find the scheduled call.
                    NotFound,
                    #[codec(index = 2)]
                    ///Given target block number is in the past.
                    TargetBlockNumberInPast,
                    #[codec(index = 3)]
                    ///Reschedule failed because it does not change scheduled time.
                    RescheduleNoChange,
                    #[codec(index = 4)]
                    ///Attempt to use a non-named function on a named task.
                    Named,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Events type.
                pub enum Event {
                    #[codec(index = 0)]
                    ///Scheduled some task.
                    Scheduled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    ///Canceled some task.
                    Canceled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    ///Dispatched some task.
                    Dispatched {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    ///The call for the provided hash was not found so the task has been aborted.
                    CallUnavailable {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 4)]
                    ///The given task was unable to be renewed since the agenda is full at that
                    /// block.
                    PeriodicFailed {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 5)]
                    ///The given task can never be executed since it is overweight.
                    PermanentlyOverweight {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Scheduled<_0, _1, _2, _3, _4> {
                pub maybe_id: ::core::option::Option<_0>,
                pub priority: ::core::primitive::u8,
                pub call: _1,
                pub maybe_periodic: ::core::option::Option<(_2, _2)>,
                pub origin: _3,
                #[codec(skip)]
                pub __subxt_unused_type_params: ::core::marker::PhantomData<_4>,
            }
        }
        pub mod pallet_session {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Sets the session key(s) of the function caller to `keys`.
                    ///Allows an account to set its session key prior to becoming a validator.
                    ///This doesn't take effect until the next session.
                    ///
                    ///The dispatch origin of this function must be signed.
                    ///
                    ///## Complexity
                    /// - `O(1)`. Actual cost depends on the number of length of
                    ///   `T::Keys::key_ids()` which is
                    ///  fixed.
                    set_keys {
                        keys: runtime_types::rococo_runtime::SessionKeys,
                        proof: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    ///Removes any session key(s) of the function caller.
                    ///
                    ///This doesn't take effect until the next session.
                    ///
                    ///The dispatch origin of this function must be Signed and the account must be
                    /// either be convertible to a validator ID using the
                    /// chain's typical addressing system (this usually
                    /// means being a controller account) or directly convertible into a validator
                    /// ID (which usually means being a stash account).
                    ///
                    ///## Complexity
                    /// - `O(1)` in number of key types. Actual cost depends on the number of
                    ///   length of
                    ///  `T::Keys::key_ids()` which is fixed.
                    purge_keys,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Error for the session pallet.
                pub enum Error {
                    #[codec(index = 0)]
                    ///Invalid ownership proof.
                    InvalidProof,
                    #[codec(index = 1)]
                    ///No associated validator ID for account.
                    NoAssociatedValidatorId,
                    #[codec(index = 2)]
                    ///Registered duplicate key.
                    DuplicatedKey,
                    #[codec(index = 3)]
                    ///No keys are associated with this account.
                    NoKeys,
                    #[codec(index = 4)]
                    ///Key setting account is not live, so it's impossible to associate keys.
                    NoAccount,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///New session has happened. Note that the argument is the session index, not
                    /// the block number as the type might suggest.
                    NewSession { session_index: ::core::primitive::u32 },
                }
            }
        }
        pub mod pallet_society {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///A user outside of the society can make a bid for entry.
                    ///
                    ///Payment: `CandidateDeposit` will be reserved for making a bid. It is
                    /// returned when the bid becomes a member, or if the bid
                    /// calls `unbid`.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Parameters:
                    /// - `value`: A one time payment the bid would like to receive when joining
                    ///   the society.
                    ///
                    ///## Complexity
                    /// - O(M + B + C + logM + logB + X)
                    /// 	  - B (len of bids)
                    ///  - C (len of candidates)
                    ///  - M (len of members)
                    ///  - X (balance reserve)
                    bid { value: ::core::primitive::u128 },
                    #[codec(index = 1)]
                    ///A bidder can remove their bid for entry into society.
                    ///By doing so, they will have their candidate deposit returned or
                    ///they will unvouch their voucher.
                    ///
                    ///Payment: The bid deposit is unreserved if the user made a bid.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and a bidder.
                    ///
                    ///Parameters:
                    /// - `pos`: Position in the `Bids` vector of the bid who wants to unbid.
                    ///
                    ///## Complexity
                    /// - O(B + X)
                    ///  - B (len of bids)
                    ///  - X (balance unreserve)
                    unbid { pos: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    ///As a member, vouch for someone to join society by placing a bid on their
                    /// behalf.
                    ///
                    ///There is no deposit required to vouch for a new bid, but a member can only
                    /// vouch for one bid at a time. If the bid becomes a
                    /// suspended candidate and ultimately rejected by
                    /// the suspension judgement origin, the member will be banned from vouching
                    /// again.
                    ///
                    ///As a vouching member, you can claim a tip if the candidate is accepted.
                    /// This tip will be paid as a portion of the reward the
                    /// member will receive for joining the society.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and a member.
                    ///
                    ///Parameters:
                    /// - `who`: The user who you would like to vouch for.
                    /// - `value`: The total reward to be paid between you and the candidate if
                    ///   they become
                    ///a member in the society.
                    /// - `tip`: Your cut of the total `value` payout when the candidate is
                    ///   inducted into
                    ///the society. Tips larger than `value` will be saturated upon payout.
                    ///
                    ///## Complexity
                    /// - O(M + B + C + logM + logB + X)
                    ///  - B (len of bids)
                    ///  - C (len of candidates)
                    ///  - M (len of members)
                    ///  - X (balance reserve)
                    vouch {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        value: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    ///As a vouching member, unvouch a bid. This only works while vouched user is
                    ///only a bidder (and not a candidate).
                    ///
                    ///The dispatch origin for this call must be _Signed_ and a vouching member.
                    ///
                    ///Parameters:
                    /// - `pos`: Position in the `Bids` vector of the bid who should be unvouched.
                    ///
                    ///## Complexity
                    /// - O(B)
                    ///  - B (len of bids)
                    unvouch { pos: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    ///As a member, vote on a candidate.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and a member.
                    ///
                    ///Parameters:
                    /// - `candidate`: The candidate that the member would like to bid on.
                    /// - `approve`: A boolean which says if the candidate should be approved
                    ///   (`true`) or
                    ///  rejected (`false`).
                    ///
                    ///## Complexity
                    /// - O(M + logM + C)
                    ///  - C (len of candidates)
                    ///  - M (len of members)
                    vote {
                        candidate: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    ///As a member, vote on the defender.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and a member.
                    ///
                    ///Parameters:
                    /// - `approve`: A boolean which says if the candidate should be
                    ///approved (`true`) or rejected (`false`).
                    ///
                    ///## Complexity
                    /// - O(M + logM)
                    ///  - M (len of members)
                    defender_vote { approve: ::core::primitive::bool },
                    #[codec(index = 6)]
                    ///Transfer the first matured payout for the sender and remove it from the
                    /// records.
                    ///
                    ///NOTE: This extrinsic needs to be called multiple times to claim multiple
                    /// matured payouts.
                    ///
                    ///Payment: The member will receive a payment equal to their first matured
                    ///payout to their free balance.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and a member with
                    ///payouts remaining.
                    ///
                    ///## Complexity
                    /// - O(M + logM + P + X)
                    ///  - M (len of members)
                    ///  - P (number of payouts for a particular member)
                    ///  - X (currency transfer call)
                    payout,
                    #[codec(index = 7)]
                    ///Found the society.
                    ///
                    ///This is done as a discrete action in order to allow for the
                    ///pallet to be included into a running chain and can only be done once.
                    ///
                    ///The dispatch origin for this call must be from the _FounderSetOrigin_.
                    ///
                    ///Parameters:
                    /// - `founder` - The first member and head of the newly founded society.
                    /// - `max_members` - The initial max number of members for the society.
                    /// - `rules` - The rules of this society concerning membership.
                    ///
                    ///## Complexity
                    /// - O(1)
                    found {
                        founder: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        max_members: ::core::primitive::u32,
                        rules: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 8)]
                    ///Annul the founding of the society.
                    ///
                    ///The dispatch origin for this call must be Signed, and the signing account
                    /// must be both the `Founder` and the `Head`. This implies
                    /// that it may only be done when there is one member.
                    ///
                    ///## Complexity
                    /// - O(1)
                    unfound,
                    #[codec(index = 9)]
                    ///Allow suspension judgement origin to make judgement on a suspended member.
                    ///
                    ///If a suspended member is forgiven, we simply add them back as a member, not
                    /// affecting any of the existing storage items for that
                    /// member.
                    ///
                    ///If a suspended member is rejected, remove all associated storage items,
                    /// including their payouts, and remove any vouched bids
                    /// they currently have.
                    ///
                    ///The dispatch origin for this call must be from the
                    /// _SuspensionJudgementOrigin_.
                    ///
                    ///Parameters:
                    /// - `who` - The suspended member to be judged.
                    /// - `forgive` - A boolean representing whether the suspension judgement
                    ///   origin forgives
                    ///  (`true`) or rejects (`false`) a suspended member.
                    ///
                    ///## Complexity
                    /// - O(M + logM + B)
                    ///  - B (len of bids)
                    ///  - M (len of members)
                    judge_suspended_member {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        forgive: ::core::primitive::bool,
                    },
                    #[codec(index = 10)]
                    ///Allow suspended judgement origin to make judgement on a suspended
                    /// candidate.
                    ///
                    ///If the judgement is `Approve`, we add them to society as a member with the
                    /// appropriate payment for joining society.
                    ///
                    ///If the judgement is `Reject`, we either slash the deposit of the bid,
                    /// giving it back to the society treasury, or we ban the
                    /// voucher from vouching again.
                    ///
                    ///If the judgement is `Rebid`, we put the candidate back in the bid pool and
                    /// let them go through the induction process again.
                    ///
                    ///The dispatch origin for this call must be from the
                    /// _SuspensionJudgementOrigin_.
                    ///
                    ///Parameters:
                    /// - `who` - The suspended candidate to be judged.
                    /// - `judgement` - `Approve`, `Reject`, or `Rebid`.
                    ///
                    ///## Complexity
                    /// - O(M + logM + B + X)
                    ///  - B (len of bids)
                    ///  - M (len of members)
                    ///  - X (balance action)
                    judge_suspended_candidate {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        judgement: runtime_types::pallet_society::Judgement,
                    },
                    #[codec(index = 11)]
                    ///Allows root origin to change the maximum number of members in society.
                    ///Max membership count must be greater than 1.
                    ///
                    ///The dispatch origin for this call must be from _ROOT_.
                    ///
                    ///Parameters:
                    /// - `max` - The maximum number of members for the society.
                    ///
                    ///## Complexity
                    /// - O(1)
                    set_max_members { max: ::core::primitive::u32 },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///An incorrect position was provided.
                    BadPosition,
                    #[codec(index = 1)]
                    ///User is not a member.
                    NotMember,
                    #[codec(index = 2)]
                    ///User is already a member.
                    AlreadyMember,
                    #[codec(index = 3)]
                    ///User is suspended.
                    Suspended,
                    #[codec(index = 4)]
                    ///User is not suspended.
                    NotSuspended,
                    #[codec(index = 5)]
                    ///Nothing to payout.
                    NoPayout,
                    #[codec(index = 6)]
                    ///Society already founded.
                    AlreadyFounded,
                    #[codec(index = 7)]
                    ///Not enough in pot to accept candidate.
                    InsufficientPot,
                    #[codec(index = 8)]
                    ///Member is already vouching or banned from vouching again.
                    AlreadyVouching,
                    #[codec(index = 9)]
                    ///Member is not vouching.
                    NotVouching,
                    #[codec(index = 10)]
                    ///Cannot remove the head of the chain.
                    Head,
                    #[codec(index = 11)]
                    ///Cannot remove the founder.
                    Founder,
                    #[codec(index = 12)]
                    ///User has already made a bid.
                    AlreadyBid,
                    #[codec(index = 13)]
                    ///User is already a candidate.
                    AlreadyCandidate,
                    #[codec(index = 14)]
                    ///User is not a candidate.
                    NotCandidate,
                    #[codec(index = 15)]
                    ///Too many members in the society.
                    MaxMembers,
                    #[codec(index = 16)]
                    ///The caller is not the founder.
                    NotFounder,
                    #[codec(index = 17)]
                    ///The caller is not the head.
                    NotHead,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///The society is founded by the given identity.
                    Founded { founder: ::subxt::utils::AccountId32 },
                    #[codec(index = 1)]
                    ///A membership bid just happened. The given account is the candidate's ID and
                    /// their offer is the second.
                    Bid {
                        candidate_id: ::subxt::utils::AccountId32,
                        offer: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    ///A membership bid just happened by vouching. The given account is the
                    /// candidate's ID and their offer is the second. The
                    /// vouching party is the third.
                    Vouch {
                        candidate_id: ::subxt::utils::AccountId32,
                        offer: ::core::primitive::u128,
                        vouching: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    ///A candidate was dropped (due to an excess of bids in the system).
                    AutoUnbid { candidate: ::subxt::utils::AccountId32 },
                    #[codec(index = 4)]
                    ///A candidate was dropped (by their request).
                    Unbid { candidate: ::subxt::utils::AccountId32 },
                    #[codec(index = 5)]
                    ///A candidate was dropped (by request of who vouched for them).
                    Unvouch { candidate: ::subxt::utils::AccountId32 },
                    #[codec(index = 6)]
                    ///A group of candidates have been inducted. The batch's primary is the first
                    /// value, the batch in full is the second.
                    Inducted {
                        primary: ::subxt::utils::AccountId32,
                        candidates: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 7)]
                    ///A suspended member has been judged.
                    SuspendedMemberJudgement {
                        who: ::subxt::utils::AccountId32,
                        judged: ::core::primitive::bool,
                    },
                    #[codec(index = 8)]
                    ///A candidate has been suspended
                    CandidateSuspended { candidate: ::subxt::utils::AccountId32 },
                    #[codec(index = 9)]
                    ///A member has been suspended
                    MemberSuspended { member: ::subxt::utils::AccountId32 },
                    #[codec(index = 10)]
                    ///A member has been challenged
                    Challenged { member: ::subxt::utils::AccountId32 },
                    #[codec(index = 11)]
                    ///A vote has been placed
                    Vote {
                        candidate: ::subxt::utils::AccountId32,
                        voter: ::subxt::utils::AccountId32,
                        vote: ::core::primitive::bool,
                    },
                    #[codec(index = 12)]
                    ///A vote has been placed for a defending member
                    DefenderVote {
                        voter: ::subxt::utils::AccountId32,
                        vote: ::core::primitive::bool,
                    },
                    #[codec(index = 13)]
                    ///A new \[max\] member count has been set
                    NewMaxMembers { max: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    ///Society is unfounded.
                    Unfounded { founder: ::subxt::utils::AccountId32 },
                    #[codec(index = 15)]
                    ///Some funds were deposited into the society account.
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 16)]
                    ///A group of members has been choosen as Skeptics
                    SkepticsChosen { skeptics: ::std::vec::Vec<::subxt::utils::AccountId32> },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Bid<_0, _1> {
                pub who: _0,
                pub kind: runtime_types::pallet_society::BidKind<_0, _1>,
                pub value: _1,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum BidKind<_0, _1> {
                #[codec(index = 0)]
                Deposit(_1),
                #[codec(index = 1)]
                Vouch(_0, _1),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Judgement {
                #[codec(index = 0)]
                Rebid,
                #[codec(index = 1)]
                Reject,
                #[codec(index = 2)]
                Approve,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Vote {
                #[codec(index = 0)]
                Skeptic,
                #[codec(index = 1)]
                Reject,
                #[codec(index = 2)]
                Approve,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VouchingStatus {
                #[codec(index = 0)]
                Vouching,
                #[codec(index = 1)]
                Banned,
            }
        }
        pub mod pallet_state_trie_migration {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Control the automatic migration.
                    ///
                    ///The dispatch origin of this call must be [`Config::ControlOrigin`].
                    control_auto_migration {
                        maybe_config: ::core::option::Option<
                            runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                        >,
                    },
                    #[codec(index = 1)]
                    ///Continue the migration for the given `limits`.
                    ///
                    ///The dispatch origin of this call can be any signed account.
                    ///
                    ///This transaction has NO MONETARY INCENTIVES. calling it will not reward
                    /// anyone. Albeit, Upon successful execution, the
                    /// transaction fee is returned.
                    ///
                    ///The (potentially over-estimated) of the byte length of all the data read
                    /// must be provided for up-front fee-payment and weighing.
                    /// In essence, the caller is guaranteeing that executing
                    /// the current `MigrationTask` with the given `limits` will not exceed
                    /// `real_size_upper` bytes of read data.
                    ///
                    ///The `witness_task` is merely a helper to prevent the caller from being
                    /// slashed or generally trigger a migration that they do
                    /// not intend. This parameter is just a message
                    /// from caller, saying that they believed `witness_task` was the last state of
                    /// the migration, and they only wish for their transaction
                    /// to do anything, if this assumption holds. In case
                    /// `witness_task` does not match, the transaction fails.
                    ///
                    ///Based on the documentation of [`MigrationTask::migrate_until_exhaustion`],
                    /// the recommended way of doing this is to pass a `limit`
                    /// that only bounds `count`, as the `size` limit can
                    /// always be overwritten.
                    continue_migrate {
                        limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                        real_size_upper: ::core::primitive::u32,
                        witness_task:
                            runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
                    },
                    #[codec(index = 2)]
                    ///Migrate the list of top keys by iterating each of them one by one.
                    ///
                    ///This does not affect the global migration process tracker
                    /// ([`MigrationProcess`]), and should only be used in case
                    /// any keys are leftover due to a bug.
                    migrate_custom_top {
                        keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                        witness_size: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    ///Migrate the list of child keys by iterating each of them one by one.
                    ///
                    ///All of the given child keys must be present under one `child_root`.
                    ///
                    ///This does not affect the global migration process tracker
                    /// ([`MigrationProcess`]), and should only be used in case
                    /// any keys are leftover due to a bug.
                    migrate_custom_child {
                        root: ::std::vec::Vec<::core::primitive::u8>,
                        child_keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                        total_size: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    ///Set the maximum limit of the signed migration.
                    set_signed_max_limits {
                        limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    },
                    #[codec(index = 5)]
                    ///Forcefully set the progress the running migration.
                    ///
                    ///This is only useful in one case: the next key to migrate is too big to be
                    /// migrated with a signed account, in a parachain context,
                    /// and we simply want to skip it. A reasonable example of
                    /// this would be `:code:`, which is both very expensive to migrate, and
                    /// commonly used, so probably it is already migrated.
                    ///
                    ///In case you mess things up, you can also, in principle, use this to reset
                    /// the migration process.
                    force_set_progress {
                        progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
                        progress_child:
                            runtime_types::pallet_state_trie_migration::pallet::Progress,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Max signed limits not respected.
                    MaxSignedLimits,
                    #[codec(index = 1)]
                    ///A key was longer than the configured maximum.
                    ///
                    ///This means that the migration halted at the current [`Progress`] and
                    ///can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
                    ///Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
                    ///The value should only be increased to avoid a storage migration for the
                    /// currently stored [`crate::Progress::LastKey`].
                    KeyTooLong,
                    #[codec(index = 2)]
                    ///submitter does not have enough funds.
                    NotEnoughFunds,
                    #[codec(index = 3)]
                    ///Bad witness data provided.
                    BadWitness,
                    #[codec(index = 4)]
                    ///Signed migration is not allowed because the maximum limit is not set yet.
                    SignedMigrationNotAllowed,
                    #[codec(index = 5)]
                    ///Bad child root provided.
                    BadChildRoot,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Inner events of this pallet.
                pub enum Event {
                    #[codec(index = 0)]
                    ///Given number of `(top, child)` keys were migrated respectively, with the
                    /// given `compute`.
                    Migrated {
                        top: ::core::primitive::u32,
                        child: ::core::primitive::u32,
                        compute:
                            runtime_types::pallet_state_trie_migration::pallet::MigrationCompute,
                    },
                    #[codec(index = 1)]
                    ///Some account got slashed by the given amount.
                    Slashed { who: ::subxt::utils::AccountId32, amount: ::core::primitive::u128 },
                    #[codec(index = 2)]
                    ///The auto migration task finished.
                    AutoMigrationFinished,
                    #[codec(index = 3)]
                    ///Migration got halted due to an error or miss-configuration.
                    Halted { error: runtime_types::pallet_state_trie_migration::pallet::Error },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MigrationCompute {
                    #[codec(index = 0)]
                    Signed,
                    #[codec(index = 1)]
                    Auto,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MigrationLimits {
                    pub size: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MigrationTask {
                    pub progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
                    pub progress_child:
                        runtime_types::pallet_state_trie_migration::pallet::Progress,
                    pub size: ::core::primitive::u32,
                    pub top_items: ::core::primitive::u32,
                    pub child_items: ::core::primitive::u32,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Progress {
                    #[codec(index = 0)]
                    ToStart,
                    #[codec(index = 1)]
                    LastKey(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Complete,
                }
            }
        }
        pub mod pallet_sudo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Authenticates the sudo key and dispatches a function call with `Root`
                    /// origin.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///## Complexity
                    /// - O(1).
                    sudo { call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall> },
                    #[codec(index = 1)]
                    ///Authenticates the sudo key and dispatches a function call with `Root`
                    /// origin. This function does not check the weight of the
                    /// call, and instead allows the Sudo user to specify the
                    /// weight of the call.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///## Complexity
                    /// - O(1).
                    sudo_unchecked_weight {
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    ///Authenticates the current sudo key and sets the given AccountId (`new`) as
                    /// the new sudo key.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///## Complexity
                    /// - O(1).
                    set_key { new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()> },
                    #[codec(index = 3)]
                    ///Authenticates the sudo key and dispatches a function call with `Signed`
                    /// origin from a given account.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///## Complexity
                    /// - O(1).
                    sudo_as {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Error for the Sudo pallet
                pub enum Error {
                    #[codec(index = 0)]
                    ///Sender must be the Sudo account
                    RequireSudo,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A sudo just took place. \[result\]
                    Sudid {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    ///The \[sudoer\] just switched identity; the old key is supplied if one
                    /// existed.
                    KeyChanged { old_sudoer: ::core::option::Option<::subxt::utils::AccountId32> },
                    #[codec(index = 2)]
                    ///A sudo just took place. \[result\]
                    SudoAsDone {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Set the current time.
                    ///
                    ///This call should be invoked exactly once per block. It will panic at the
                    /// finalization phase, if this call hasn't been invoked by
                    /// that time.
                    ///
                    ///The timestamp should be greater than the previous one by the amount
                    /// specified by `MinimumPeriod`.
                    ///
                    ///The dispatch origin for this call must be `Inherent`.
                    ///
                    ///## Complexity
                    /// - `O(1)` (Note that implementations of `OnTimestampSet` must also be
                    ///   `O(1)`)
                    /// - 1 storage read and 1 storage mutation (codec `O(1)`). (because of
                    ///   `DidUpdate::take` in
                    ///  `on_finalize`)
                    /// - 1 event handler `on_timestamp_set`. Must be `O(1)`.
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_tips {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Report something `reason` that deserves a tip and claim any eventual the
                    /// finder's fee.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///Payment: `TipReportDepositBase` will be reserved from the origin account,
                    /// as well as `DataDepositPerByte` for each byte in
                    /// `reason`.
                    ///
                    /// - `reason`: The reason for, or the thing that deserves, the tip; generally
                    ///   this will be
                    ///  a UTF-8-encoded URL.
                    /// - `who`: The account which should be credited for the tip.
                    ///
                    ///Emits `NewTip` if successful.
                    ///
                    ///## Complexity
                    /// - `O(R)` where `R` length of `reason`.
                    ///  - encoding and hashing of 'reason'
                    report_awesome {
                        reason: ::std::vec::Vec<::core::primitive::u8>,
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 1)]
                    ///Retract a prior tip-report from `report_awesome`, and cancel the process of
                    /// tipping.
                    ///
                    ///If successful, the original deposit will be unreserved.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the tip identified
                    /// by `hash` must have been reported by the signing
                    /// account through `report_awesome` (and not
                    /// through `tip_new`).
                    ///
                    /// - `hash`: The identity of the open tip for which a tip value is declared.
                    ///   This is formed
                    ///  as the hash of the tuple of the original tip `reason` and the beneficiary
                    /// account ID.
                    ///
                    ///Emits `TipRetracted` if successful.
                    ///
                    ///## Complexity
                    /// - `O(1)`
                    ///  - Depends on the length of `T::Hash` which is fixed.
                    retract_tip { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    ///Give a tip for something new; no finder's fee will be taken.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the signing account
                    /// must be a member of the `Tippers` set.
                    ///
                    /// - `reason`: The reason for, or the thing that deserves, the tip; generally
                    ///   this will be
                    ///  a UTF-8-encoded URL.
                    /// - `who`: The account which should be credited for the tip.
                    /// - `tip_value`: The amount of tip that the sender would like to give. The
                    ///   median tip
                    ///  value of active tippers will be given to the `who`.
                    ///
                    ///Emits `NewTip` if successful.
                    ///
                    ///## Complexity
                    /// - `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.
                    ///  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper
                    ///    bound given by `ContainsLengthBound`. The actual cost depends on the
                    ///    implementation of `T::Tippers`.
                    ///  - `O(R)`: hashing and encoding of reason of length `R`
                    tip_new {
                        reason: ::std::vec::Vec<::core::primitive::u8>,
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        tip_value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    ///Declare a tip value for an already-open tip.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the signing account
                    /// must be a member of the `Tippers` set.
                    ///
                    /// - `hash`: The identity of the open tip for which a tip value is declared.
                    ///   This is formed
                    ///  as the hash of the tuple of the hash of the original tip `reason` and the
                    /// beneficiary  account ID.
                    /// - `tip_value`: The amount of tip that the sender would like to give. The
                    ///   median tip
                    ///  value of active tippers will be given to the `who`.
                    ///
                    ///Emits `TipClosing` if the threshold of tippers has been reached and the
                    /// countdown period has started.
                    ///
                    ///## Complexity
                    /// - `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of
                    ///   length `T`, insert
                    ///  tip and check closing, `T` is charged as upper bound given by
                    /// `ContainsLengthBound`.  The actual cost depends on the
                    /// implementation of `T::Tippers`.
                    ///
                    ///  Actually weight could be lower as it depends on how many tips are in
                    /// `OpenTip` but it  is weighted as if almost full i.e of
                    /// length `T-1`.
                    tip {
                        hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        tip_value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    ///Close and payout a tip.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    ///The tip identified by `hash` must have finished its countdown period.
                    ///
                    /// - `hash`: The identity of the open tip for which a tip value is declared.
                    ///   This is formed
                    ///  as the hash of the tuple of the original tip `reason` and the beneficiary
                    /// account ID.
                    ///
                    ///## Complexity
                    /// - : `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of
                    ///   length `T`. `T`
                    ///  is charged as upper bound given by `ContainsLengthBound`. The actual cost
                    /// depends on  the implementation of `T::Tippers`.
                    close_tip { hash: ::subxt::utils::H256 },
                    #[codec(index = 5)]
                    ///Remove and slash an already-open tip.
                    ///
                    ///May only be called from `T::RejectOrigin`.
                    ///
                    ///As a result, the finder is slashed and the deposits are lost.
                    ///
                    ///Emits `TipSlashed` if successful.
                    ///
                    ///## Complexity
                    /// - O(1).
                    slash_tip { hash: ::subxt::utils::H256 },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///The reason given is just too big.
                    ReasonTooBig,
                    #[codec(index = 1)]
                    ///The tip was already found/started.
                    AlreadyKnown,
                    #[codec(index = 2)]
                    ///The tip hash is unknown.
                    UnknownTip,
                    #[codec(index = 3)]
                    ///The account attempting to retract the tip is not the finder of the tip.
                    NotFinder,
                    #[codec(index = 4)]
                    ///The tip cannot be claimed/closed because there are not enough tippers yet.
                    StillOpen,
                    #[codec(index = 5)]
                    ///The tip cannot be claimed/closed because it's still in the countdown
                    /// period.
                    Premature,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A new tip suggestion has been opened.
                    NewTip { tip_hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    ///A tip suggestion has reached threshold and is closing.
                    TipClosing { tip_hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    ///A tip suggestion has been closed.
                    TipClosed {
                        tip_hash: ::subxt::utils::H256,
                        who: ::subxt::utils::AccountId32,
                        payout: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    ///A tip suggestion has been retracted.
                    TipRetracted { tip_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    ///A tip suggestion has been slashed.
                    TipSlashed {
                        tip_hash: ::subxt::utils::H256,
                        finder: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OpenTip<_0, _1, _2, _3> {
                pub reason: _3,
                pub who: _0,
                pub finder: _0,
                pub deposit: _1,
                pub closes: ::core::option::Option<_2>,
                pub tips: ::std::vec::Vec<(_0, _1)>,
                pub finders_fee: ::core::primitive::bool,
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///A transaction fee `actual_fee`, of which `tip` was added to the minimum
                    /// inclusion fee, has been paid by `who`.
                    TransactionFeePaid {
                        who: ::subxt::utils::AccountId32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_treasury {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Put forward a suggestion for spending. A deposit proportional to the value
                    ///is reserved and slashed if the proposal is rejected. It is returned once
                    /// the proposal is awarded.
                    ///
                    ///## Complexity
                    /// - O(1)
                    propose_spend {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 1)]
                    ///Reject a proposed spend. The original deposit will be slashed.
                    ///
                    ///May only be called from `T::RejectOrigin`.
                    ///
                    ///## Complexity
                    /// - O(1)
                    reject_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///Approve a proposal. At a later time, the proposal will be allocated to the
                    /// beneficiary and the original deposit will be returned.
                    ///
                    ///May only be called from `T::ApproveOrigin`.
                    ///
                    ///## Complexity
                    /// - O(1).
                    approve_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    ///Propose and approve a spend of treasury funds.
                    ///
                    /// - `origin`: Must be `SpendOrigin` with the `Success` value being at least
                    ///   `amount`.
                    /// - `amount`: The amount to be transferred from the treasury to the
                    ///   `beneficiary`.
                    /// - `beneficiary`: The destination account for the transfer.
                    ///
                    ///NOTE: For record-keeping purposes, the proposer is deemed to be equivalent
                    /// to the beneficiary.
                    spend {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 4)]
                    ///Force a previously approved proposal to be removed from the approval queue.
                    ///The original deposit will no longer be returned.
                    ///
                    ///May only be called from `T::RejectOrigin`.
                    /// - `proposal_id`: The index of a proposal
                    ///
                    ///## Complexity
                    /// - O(A) where `A` is the number of approvals
                    ///
                    ///Errors:
                    /// - `ProposalNotApproved`: The `proposal_id` supplied was not found in the
                    ///   approval queue,
                    ///i.e., the proposal has not been approved. This could also mean the proposal
                    /// does not exist altogether, thus there is no way it
                    /// would have been approved in the first place.
                    remove_approval {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Error for the treasury pallet.
                pub enum Error {
                    #[codec(index = 0)]
                    ///Proposer's balance is too low.
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    ///No proposal or bounty at that index.
                    InvalidIndex,
                    #[codec(index = 2)]
                    ///Too many approvals in the queue.
                    TooManyApprovals,
                    #[codec(index = 3)]
                    ///The spend origin is valid but the amount it is allowed to spend is lower
                    /// than the amount to be spent.
                    InsufficientPermission,
                    #[codec(index = 4)]
                    ///Proposal has not been approved.
                    ProposalNotApproved,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///New proposal.
                    Proposed { proposal_index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    ///We have ended a spend period and will now allocate funds.
                    Spending { budget_remaining: ::core::primitive::u128 },
                    #[codec(index = 2)]
                    ///Some funds have been allocated.
                    Awarded {
                        proposal_index: ::core::primitive::u32,
                        award: ::core::primitive::u128,
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    ///A proposal was rejected; funds were slashed.
                    Rejected {
                        proposal_index: ::core::primitive::u32,
                        slashed: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    ///Some of our funds have been burnt.
                    Burnt { burnt_funds: ::core::primitive::u128 },
                    #[codec(index = 5)]
                    ///Spending has finished; this is the amount that rolls over until next spend.
                    Rollover { rollover_balance: ::core::primitive::u128 },
                    #[codec(index = 6)]
                    ///Some funds have been deposited.
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 7)]
                    ///A new spend proposal has been approved.
                    SpendApproved {
                        proposal_index: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 8)]
                    ///The inactive funds of the pallet have been updated.
                    UpdatedInactive {
                        reactivated: ::core::primitive::u128,
                        deactivated: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Proposal<_0, _1> {
                pub proposer: _0,
                pub value: _1,
                pub beneficiary: _0,
                pub bond: _1,
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Send a batch of dispatch calls.
                    ///
                    ///May be called from any origin except `None`.
                    ///
                    /// - `calls`: The calls to be dispatched from the same origin. The number of
                    ///   call must not
                    ///  exceed the constant: `batched_calls_limit` (available in constant
                    /// metadata).
                    ///
                    ///If origin is root then the calls are dispatched without checking origin
                    /// filter. (This includes bypassing
                    /// `frame_system::Config::BaseCallFilter`).
                    ///
                    ///## Complexity
                    /// - O(C) where C is the number of calls to be batched.
                    ///
                    ///This will return `Ok` in all circumstances. To determine the success of the
                    /// batch, an event is deposited. If a call failed and the
                    /// batch was interrupted, then the `BatchInterrupted`
                    /// event is deposited, along with the number of successful calls made
                    /// and the error of the failed call. If all were successful, then the
                    /// `BatchCompleted` event is deposited.
                    batch { calls: ::std::vec::Vec<runtime_types::rococo_runtime::RuntimeCall> },
                    #[codec(index = 1)]
                    ///Send a call through an indexed pseudonym of the sender.
                    ///
                    ///Filter from origin are passed along. The call will be dispatched with an
                    /// origin which use the same filter as the origin of this
                    /// call.
                    ///
                    ///NOTE: If you need to ensure that any account-based filtering is not honored
                    /// (i.e. because you expect `proxy` to have been used
                    /// prior in the call stack and you do not want
                    /// the call restrictions to apply to any sub-accounts), then use
                    /// `as_multi_threshold_1` in the Multisig pallet instead.
                    ///
                    ///NOTE: Prior to version *12, this was called `as_limited_sub`.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 2)]
                    ///Send a batch of dispatch calls and atomically execute them.
                    ///The whole transaction will rollback and fail if any of the calls failed.
                    ///
                    ///May be called from any origin except `None`.
                    ///
                    /// - `calls`: The calls to be dispatched from the same origin. The number of
                    ///   call must not
                    ///  exceed the constant: `batched_calls_limit` (available in constant
                    /// metadata).
                    ///
                    ///If origin is root then the calls are dispatched without checking origin
                    /// filter. (This includes bypassing
                    /// `frame_system::Config::BaseCallFilter`).
                    ///
                    ///## Complexity
                    /// - O(C) where C is the number of calls to be batched.
                    batch_all { calls: ::std::vec::Vec<runtime_types::rococo_runtime::RuntimeCall> },
                    #[codec(index = 3)]
                    ///Dispatches a function call with a provided origin.
                    ///
                    ///The dispatch origin for this call must be _Root_.
                    ///
                    ///## Complexity
                    /// - O(1).
                    dispatch_as {
                        as_origin: ::std::boxed::Box<runtime_types::rococo_runtime::OriginCaller>,
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 4)]
                    ///Send a batch of dispatch calls.
                    ///Unlike `batch`, it allows errors and won't interrupt.
                    ///
                    ///May be called from any origin except `None`.
                    ///
                    /// - `calls`: The calls to be dispatched from the same origin. The number of
                    ///   call must not
                    ///  exceed the constant: `batched_calls_limit` (available in constant
                    /// metadata).
                    ///
                    ///If origin is root then the calls are dispatch without checking origin
                    /// filter. (This includes bypassing
                    /// `frame_system::Config::BaseCallFilter`).
                    ///
                    ///## Complexity
                    /// - O(C) where C is the number of calls to be batched.
                    force_batch {
                        calls: ::std::vec::Vec<runtime_types::rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    ///Dispatch a function call with a specified weight.
                    ///
                    ///This function does not check the weight of the call, and instead allows the
                    ///Root origin to specify the weight of the call.
                    ///
                    ///The dispatch origin for this call must be _Root_.
                    with_weight {
                        call: ::std::boxed::Box<runtime_types::rococo_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///Too many calls batched.
                    TooManyCalls,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///Batch of dispatches did not complete fully. Index of first failing dispatch
                    /// given, as well as the error.
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    ///Batch of dispatches completed fully with no error.
                    BatchCompleted,
                    #[codec(index = 2)]
                    ///Batch of dispatches completed but has errors.
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    ///A single item within a Batch of dispatches has completed with no error.
                    ItemCompleted,
                    #[codec(index = 4)]
                    ///A single item within a Batch of dispatches has completed with error.
                    ItemFailed { error: runtime_types::sp_runtime::DispatchError },
                    #[codec(index = 5)]
                    ///A call was dispatched.
                    DispatchedAs {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_vesting {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    ///Unlock any vested funds of the sender account.
                    ///
                    ///The dispatch origin for this call must be _Signed_ and the sender must have
                    /// funds still locked under this pallet.
                    ///
                    ///Emits either `VestingCompleted` or `VestingUpdated`.
                    ///
                    ///## Complexity
                    /// - `O(1)`.
                    vest,
                    #[codec(index = 1)]
                    ///Unlock any vested funds of a `target` account.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `target`: The account whose vested funds should be unlocked. Must have
                    ///   funds still
                    ///locked under this pallet.
                    ///
                    ///Emits either `VestingCompleted` or `VestingUpdated`.
                    ///
                    ///## Complexity
                    /// - `O(1)`.
                    vest_other {
                        target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 2)]
                    ///Create a vested transfer.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `target`: The account receiving the vested funds.
                    /// - `schedule`: The vesting schedule attached to the transfer.
                    ///
                    ///Emits `VestingCreated`.
                    ///
                    ///NOTE: This will unlock all schedules through the current block.
                    ///
                    ///## Complexity
                    /// - `O(1)`.
                    vested_transfer {
                        target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    ///Force a vested transfer.
                    ///
                    ///The dispatch origin for this call must be _Root_.
                    ///
                    /// - `source`: The account whose funds should be transferred.
                    /// - `target`: The account that should be transferred the vested funds.
                    /// - `schedule`: The vesting schedule attached to the transfer.
                    ///
                    ///Emits `VestingCreated`.
                    ///
                    ///NOTE: This will unlock all schedules through the current block.
                    ///
                    ///## Complexity
                    /// - `O(1)`.
                    force_vested_transfer {
                        source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        target: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    ///Merge two vesting schedules together, creating a new vesting schedule that
                    /// unlocks over the highest possible start and end blocks.
                    /// If both schedules have already started the
                    /// current block will be used as the schedule start; with the caveat that if
                    /// one schedule is finished by the current block, the
                    /// other will be treated as the new merged schedule,
                    /// unmodified.
                    ///
                    ///NOTE: If `schedule1_index == schedule2_index` this is a no-op.
                    ///NOTE: This will unlock all schedules through the current block prior to
                    /// merging. NOTE: If both schedules have ended by the
                    /// current block, no new schedule will be created and both
                    /// will be removed.
                    ///
                    ///Merged schedule attributes:
                    /// - `starting_block`: `MAX(schedule1.starting_block,
                    ///   scheduled2.starting_block,
                    ///  current_block)`.
                    /// - `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.
                    /// - `locked`: `schedule1.locked_at(current_block) +
                    ///   schedule2.locked_at(current_block)`.
                    ///
                    ///The dispatch origin for this call must be _Signed_.
                    ///
                    /// - `schedule1_index`: index of the first schedule to merge.
                    /// - `schedule2_index`: index of the second schedule to merge.
                    merge_schedules {
                        schedule1_index: ::core::primitive::u32,
                        schedule2_index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Error for the vesting pallet.
                pub enum Error {
                    #[codec(index = 0)]
                    ///The account given is not vesting.
                    NotVesting,
                    #[codec(index = 1)]
                    ///The account already has `MaxVestingSchedules` count of schedules and thus
                    ///cannot add another one. Consider merging existing schedules in order to add
                    /// another.
                    AtMaxVestingSchedules,
                    #[codec(index = 2)]
                    ///Amount being transferred is too low to create a vesting schedule.
                    AmountLow,
                    #[codec(index = 3)]
                    ///An index was out of bounds of the vesting schedules.
                    ScheduleIndexOutOfBounds,
                    #[codec(index = 4)]
                    ///Failed to create a new schedule because some parameter was invalid.
                    InvalidScheduleParams,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///The amount vested has been updated. This could indicate a change in funds
                    /// available. The balance given is the amount which is
                    /// left unvested (and thus locked).
                    VestingUpdated {
                        account: ::subxt::utils::AccountId32,
                        unvested: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    ///An \[account\] has become fully vested.
                    VestingCompleted { account: ::subxt::utils::AccountId32 },
                }
            }
            pub mod vesting_info {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VestingInfo<_0, _1> {
                    pub locked: _0,
                    pub per_block: _0,
                    pub starting_block: _1,
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V0,
                #[codec(index = 1)]
                V1,
            }
        }
        pub mod pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                ///Contains one variant per dispatchable that can be called by an extrinsic.
                pub enum Call {
                    #[codec(index = 0)]
                    send {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                    },
                    #[codec(index = 1)]
                    ///Teleport some assets from the local chain to some destination chain.
                    ///
                    ///Fee payment on the destination side is made from the asset in the `assets`
                    /// vector of index `fee_asset_item`. The weight limit for
                    /// fees is not provided and thus is unlimited,
                    /// with all fees taken as needed from the asset.
                    ///
                    /// - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
                    /// - `dest`: Destination context for the assets. Will typically be `X2(Parent,
                    ///   Parachain(..))` to send
                    ///  from parachain to parachain, or `X1(Parachain(..))` to send from relay to
                    /// parachain.
                    /// - `beneficiary`: A beneficiary location for the assets in the context of
                    ///   `dest`. Will generally be
                    ///  an `AccountId32` value.
                    /// - `assets`: The assets to be withdrawn. The first item should be the
                    ///   currency used to to pay the fee on the
                    ///  `dest` side. May not be empty.
                    /// - `fee_asset_item`: The index into `assets` of the item which should be
                    ///   used to pay
                    ///  fees.
                    teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ///Transfer some assets from the local chain to the sovereign account of a
                    /// destination chain and forward a notification XCM.
                    ///
                    ///Fee payment on the destination side is made from the asset in the `assets`
                    /// vector of index `fee_asset_item`. The weight limit for
                    /// fees is not provided and thus is unlimited,
                    /// with all fees taken as needed from the asset.
                    ///
                    /// - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
                    /// - `dest`: Destination context for the assets. Will typically be `X2(Parent,
                    ///   Parachain(..))` to send
                    ///  from parachain to parachain, or `X1(Parachain(..))` to send from relay to
                    /// parachain.
                    /// - `beneficiary`: A beneficiary location for the assets in the context of
                    ///   `dest`. Will generally be
                    ///  an `AccountId32` value.
                    /// - `assets`: The assets to be withdrawn. This should include the assets used
                    ///   to pay the fee on the
                    ///  `dest` side.
                    /// - `fee_asset_item`: The index into `assets` of the item which should be
                    ///   used to pay
                    ///  fees.
                    reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    ///Execute an XCM message from a local, signed, origin.
                    ///
                    ///An event is deposited indicating whether `msg` could be executed completely
                    /// or only partially.
                    ///
                    ///No more than `max_weight` will be used in its attempted execution. If this
                    /// is less than the maximum amount of weight that the
                    /// message could take to be executed, then no execution
                    /// attempt will be made.
                    ///
                    ///NOTE: A successful return to this does *not* imply that the `msg` was
                    /// executed successfully to completion; only that *some*
                    /// of it was executed.
                    execute {
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 4)]
                    ///Extoll that a particular destination can be communicated with through a
                    /// particular version of XCM.
                    ///
                    /// - `origin`: Must be Root.
                    /// - `location`: The destination that is being described.
                    /// - `xcm_version`: The latest version of XCM that `location` supports.
                    force_xcm_version {
                        location:
                            ::std::boxed::Box<runtime_types::xcm::v3::multilocation::MultiLocation>,
                        xcm_version: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    ///Set a safe XCM version (the version that XCM should be encoded with if the
                    /// most recent version a destination can accept is
                    /// unknown).
                    ///
                    /// - `origin`: Must be Root.
                    /// - `maybe_xcm_version`: The default XCM encoding version, or `None` to
                    ///   disable.
                    force_default_xcm_version {
                        maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 6)]
                    ///Ask a location to notify us regarding their XCM version and any changes to
                    /// it.
                    ///
                    /// - `origin`: Must be Root.
                    /// - `location`: The location to which we should subscribe for XCM version
                    ///   notifications.
                    force_subscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 7)]
                    ///Require that a particular destination should no longer notify us regarding
                    /// any XCM version changes.
                    ///
                    /// - `origin`: Must be Root.
                    /// - `location`: The location to which we are currently subscribed for XCM
                    ///   version
                    ///  notifications which we no longer desire.
                    force_unsubscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 8)]
                    ///Transfer some assets from the local chain to the sovereign account of a
                    /// destination chain and forward a notification XCM.
                    ///
                    ///Fee payment on the destination side is made from the asset in the `assets`
                    /// vector of index `fee_asset_item`, up to enough to pay
                    /// for `weight_limit` of weight. If more weight
                    /// is needed than `weight_limit`, then the operation will fail and the assets
                    /// send may be at risk.
                    ///
                    /// - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
                    /// - `dest`: Destination context for the assets. Will typically be `X2(Parent,
                    ///   Parachain(..))` to send
                    ///  from parachain to parachain, or `X1(Parachain(..))` to send from relay to
                    /// parachain.
                    /// - `beneficiary`: A beneficiary location for the assets in the context of
                    ///   `dest`. Will generally be
                    ///  an `AccountId32` value.
                    /// - `assets`: The assets to be withdrawn. This should include the assets used
                    ///   to pay the fee on the
                    ///  `dest` side.
                    /// - `fee_asset_item`: The index into `assets` of the item which should be
                    ///   used to pay
                    ///  fees.
                    /// - `weight_limit`: The remote-side weight limit, if any, for the XCM fee
                    ///   purchase.
                    limited_reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 9)]
                    ///Teleport some assets from the local chain to some destination chain.
                    ///
                    ///Fee payment on the destination side is made from the asset in the `assets`
                    /// vector of index `fee_asset_item`, up to enough to pay
                    /// for `weight_limit` of weight. If more weight
                    /// is needed than `weight_limit`, then the operation will fail and the assets
                    /// send may be at risk.
                    ///
                    /// - `origin`: Must be capable of withdrawing the `assets` and executing XCM.
                    /// - `dest`: Destination context for the assets. Will typically be `X2(Parent,
                    ///   Parachain(..))` to send
                    ///  from parachain to parachain, or `X1(Parachain(..))` to send from relay to
                    /// parachain.
                    /// - `beneficiary`: A beneficiary location for the assets in the context of
                    ///   `dest`. Will generally be
                    ///  an `AccountId32` value.
                    /// - `assets`: The assets to be withdrawn. The first item should be the
                    ///   currency used to to pay the fee on the
                    ///  `dest` side. May not be empty.
                    /// - `fee_asset_item`: The index into `assets` of the item which should be
                    ///   used to pay
                    ///  fees.
                    /// - `weight_limit`: The remote-side weight limit, if any, for the XCM fee
                    ///   purchase.
                    limited_teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                of this pallet.
                */
                pub enum Error {
                    #[codec(index = 0)]
                    ///The desired destination was unreachable, generally because there is a no
                    /// way of routing to it.
                    Unreachable,
                    #[codec(index = 1)]
                    ///There was some other issue (i.e. not to do with routing) in sending the
                    /// message. Perhaps a lack of space for buffering the
                    /// message.
                    SendFailure,
                    #[codec(index = 2)]
                    ///The message execution fails the filter.
                    Filtered,
                    #[codec(index = 3)]
                    ///The message's weight could not be determined.
                    UnweighableMessage,
                    #[codec(index = 4)]
                    ///The destination `MultiLocation` provided cannot be inverted.
                    DestinationNotInvertible,
                    #[codec(index = 5)]
                    ///The assets to be sent are empty.
                    Empty,
                    #[codec(index = 6)]
                    ///Could not re-anchor the assets to declare the fees for the destination
                    /// chain.
                    CannotReanchor,
                    #[codec(index = 7)]
                    ///Too many assets have been attempted for transfer.
                    TooManyAssets,
                    #[codec(index = 8)]
                    ///Origin is invalid for sending.
                    InvalidOrigin,
                    #[codec(index = 9)]
                    ///The version of the `Versioned` value used is not able to be interpreted.
                    BadVersion,
                    #[codec(index = 10)]
                    ///The given location could not be used (e.g. because it cannot be expressed
                    /// in the desired version of XCM).
                    BadLocation,
                    #[codec(index = 11)]
                    ///The referenced subscription could not be found.
                    NoSubscription,
                    #[codec(index = 12)]
                    ///The location is invalid since it already has a subscription from us.
                    AlreadySubscribed,
                    #[codec(index = 13)]
                    ///Invalid asset for the operation.
                    InvalidAsset,
                    #[codec(index = 14)]
                    ///The owner does not own (all) of the asset that they wish to do the
                    /// operation on.
                    LowBalance,
                    #[codec(index = 15)]
                    ///The asset owner has too many locks on the asset.
                    TooManyLocks,
                    #[codec(index = 16)]
                    ///The given account is not an identifiable sovereign account for any
                    /// location.
                    AccountNotSovereign,
                    #[codec(index = 17)]
                    ///The operation required fees to be paid which the initiator could not meet.
                    FeesNotMet,
                    #[codec(index = 18)]
                    ///A remote lock with the corresponding data could not be found.
                    LockNotFound,
                    #[codec(index = 19)]
                    ///The unlock operation cannot succeed because there are still users of the
                    /// lock.
                    InUse,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                /**
                The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                by this pallet.
                */
                pub enum Event {
                    #[codec(index = 0)]
                    ///Execution of an XCM message was attempted.
                    ///
                    ///\[ outcome \]
                    Attempted(runtime_types::xcm::v3::traits::Outcome),
                    #[codec(index = 1)]
                    ///A XCM message was sent.
                    ///
                    ///\[ origin, destination, message \]
                    Sent(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::Xcm,
                    ),
                    #[codec(index = 2)]
                    ///Query response received which does not match a registered query. This may
                    /// be because a matching query was never registered, it
                    /// may be because it is a duplicate response, or
                    /// because the query timed out.
                    ///
                    ///\[ origin location, id \]
                    UnexpectedResponse(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 3)]
                    ///Query response has been received and is ready for taking with
                    /// `take_response`. There is no registered notification
                    /// call.
                    ///
                    ///\[ id, response \]
                    ResponseReady(::core::primitive::u64, runtime_types::xcm::v3::Response),
                    #[codec(index = 4)]
                    ///Query response has been received and query is removed. The registered
                    /// notification has been dispatched and executed
                    /// successfully.
                    ///
                    ///\[ id, pallet index, call index \]
                    Notified(::core::primitive::u64, ::core::primitive::u8, ::core::primitive::u8),
                    #[codec(index = 5)]
                    ///Query response has been received and query is removed. The registered
                    /// notification could not be dispatched because the
                    /// dispatch weight is greater than the maximum weight
                    /// originally budgeted by this runtime for the query result.
                    ///
                    ///\[ id, pallet index, call index, actual weight, max budgeted weight \]
                    NotifyOverweight(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                        runtime_types::sp_weights::weight_v2::Weight,
                        runtime_types::sp_weights::weight_v2::Weight,
                    ),
                    #[codec(index = 6)]
                    ///Query response has been received and query is removed. There was a general
                    /// error with dispatching the notification call.
                    ///
                    ///\[ id, pallet index, call index \]
                    NotifyDispatchError(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 7)]
                    ///Query response has been received and query is removed. The dispatch was
                    /// unable to be decoded into a `Call`; this might be due
                    /// to dispatch function having a signature which
                    /// is not `(origin, QueryId, Response)`.
                    ///
                    ///\[ id, pallet index, call index \]
                    NotifyDecodeFailed(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 8)]
                    ///Expected query response has been received but the origin location of the
                    /// response does not match that expected. The query
                    /// remains registered for a later, valid, response to
                    /// be received and acted upon.
                    ///
                    ///\[ origin location, id, expected location \]
                    InvalidResponder(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 9)]
                    ///Expected query response has been received but the expected origin location
                    /// placed in storage by this runtime previously cannot be
                    /// decoded. The query remains registered.
                    ///
                    ///This is unexpected (since a location placed in storage in a previously
                    /// executing runtime should be readable prior to query
                    /// timeout) and dangerous since the possibly
                    /// valid response will be dropped. Manual governance intervention is probably
                    /// going to be needed.
                    ///
                    ///\[ origin location, id \]
                    InvalidResponderVersion(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 10)]
                    ///Received query response has been read and removed.
                    ///
                    ///\[ id \]
                    ResponseTaken(::core::primitive::u64),
                    #[codec(index = 11)]
                    ///Some assets have been placed in an asset trap.
                    ///
                    ///\[ hash, origin, assets \]
                    AssetsTrapped(
                        ::subxt::utils::H256,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::VersionedMultiAssets,
                    ),
                    #[codec(index = 12)]
                    ///An XCM version change notification message has been attempted to be sent.
                    ///
                    ///The cost of sending it (borne by the chain) is included.
                    ///
                    ///\[ destination, result, cost \]
                    VersionChangeNotified(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u32,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 13)]
                    ///The supported version of a location has been changed. This might be through
                    /// an automatic notification or a manual intervention.
                    ///
                    ///\[ location, XCM version \]
                    SupportedVersionChanged(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 14)]
                    ///A given location which had a version change subscription was dropped owing
                    /// to an error sending the notification to it.
                    ///
                    ///\[ location, query ID, error \]
                    NotifyTargetSendFail(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        runtime_types::xcm::v3::traits::Error,
                    ),
                    #[codec(index = 15)]
                    ///A given location which had a version change subscription was dropped owing
                    /// to an error migrating the location to our new XCM
                    /// format.
                    ///
                    ///\[ location, query ID \]
                    NotifyTargetMigrationFail(
                        runtime_types::xcm::VersionedMultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 16)]
                    ///Expected query response has been received but the expected querier location
                    /// placed in storage by this runtime previously cannot be
                    /// decoded. The query remains registered.
                    ///
                    ///This is unexpected (since a location placed in storage in a previously
                    /// executing runtime should be readable prior to query
                    /// timeout) and dangerous since the possibly
                    /// valid response will be dropped. Manual governance intervention is probably
                    /// going to be needed.
                    ///
                    ///\[ origin location, id \]
                    InvalidQuerierVersion(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 17)]
                    ///Expected query response has been received but the querier location of the
                    /// response does not match the expected. The query remains
                    /// registered for a later, valid, response to be received
                    /// and acted upon.
                    ///
                    ///\[ origin location, id, expected querier, maybe actual querier \]
                    InvalidQuerier(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 18)]
                    ///A remote has requested XCM version change notification from us and we have
                    /// honored it. A version information message is sent to
                    /// them and its cost is included.
                    ///
                    ///\[ destination location, cost \]
                    VersionNotifyStarted(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 19)]
                    ///We have requested that a remote chain sends us XCM version change
                    /// notifications.
                    ///
                    ///\[ destination location, cost \]
                    VersionNotifyRequested(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 20)]
                    ///We have requested that a remote chain stops sending us XCM version change
                    /// notifications.
                    ///
                    ///\[ destination location, cost \]
                    VersionNotifyUnrequested(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 21)]
                    ///Fees were paid from a location for an operation (often for using
                    /// `SendXcm`).
                    ///
                    ///\[ paying location, fees \]
                    FeesPaid(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 22)]
                    ///Some assets have been claimed from an asset trap
                    ///
                    ///\[ hash, origin, assets \]
                    AssetsClaimed(
                        ::subxt::utils::H256,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::VersionedMultiAssets,
                    ),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Origin {
                    #[codec(index = 0)]
                    Xcm(runtime_types::xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 1)]
                    Response(runtime_types::xcm::v3::multilocation::MultiLocation),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum QueryStatus<_0> {
                    #[codec(index = 0)]
                    Pending {
                        responder: runtime_types::xcm::VersionedMultiLocation,
                        maybe_match_querier:
                            ::core::option::Option<runtime_types::xcm::VersionedMultiLocation>,
                        maybe_notify:
                            ::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
                        timeout: _0,
                    },
                    #[codec(index = 1)]
                    VersionNotifier {
                        origin: runtime_types::xcm::VersionedMultiLocation,
                        is_active: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    Ready { response: runtime_types::xcm::VersionedResponse, at: _0 },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoteLockedFungibleRecord {
                    pub amount: ::core::primitive::u128,
                    pub owner: runtime_types::xcm::VersionedMultiLocation,
                    pub locker: runtime_types::xcm::VersionedMultiLocation,
                    pub users: ::core::primitive::u32,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum VersionMigrationStage {
                    #[codec(index = 0)]
                    MigrateSupportedVersion,
                    #[codec(index = 1)]
                    MigrateVersionNotifiers,
                    #[codec(index = 2)]
                    NotifyCurrentTargets(
                        ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    ),
                    #[codec(index = 3)]
                    MigrateAndNotifyOldTargets,
                }
            }
        }
        pub mod polkadot_core_primitives {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CandidateHash(pub ::subxt::utils::H256);
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundDownwardMessage<_0> {
                pub sent_at: _0,
                pub msg: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundHrmpMessage<_0> {
                pub sent_at: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OutboundHrmpMessage<_0> {
                pub recipient: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
        }
        pub mod polkadot_parachain {
            use super::runtime_types;
            pub mod primitives {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HeadData(pub ::std::vec::Vec<::core::primitive::u8>);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HrmpChannelId {
                    pub sender: runtime_types::polkadot_parachain::primitives::Id,
                    pub recipient: runtime_types::polkadot_parachain::primitives::Id,
                }
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Id(pub ::core::primitive::u32);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidationCode(pub ::std::vec::Vec<::core::primitive::u8>);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidationCodeHash(pub ::subxt::utils::H256);
            }
        }
        pub mod polkadot_primitives {
            use super::runtime_types;
            pub mod v2 {
                use super::runtime_types;
                pub mod assignment_app {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                }
                pub mod collator_app {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
                }
                pub mod signed {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct UncheckedSigned<_0, _1> {
                        pub payload: _0,
                        pub validator_index: runtime_types::polkadot_primitives::v2::ValidatorIndex,
                        pub signature:
                            runtime_types::polkadot_primitives::v2::validator_app::Signature,
                        #[codec(skip)]
                        pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                    }
                }
                pub mod validator_app {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AvailabilityBitfield(
                    pub  ::subxt::utils::bits::DecodedBits<
                        ::core::primitive::u8,
                        ::subxt::utils::bits::Lsb0,
                    >,
                );
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BackedCandidate<_0> {
                    pub candidate:
                        runtime_types::polkadot_primitives::v2::CommittedCandidateReceipt<_0>,
                    pub validity_votes: ::std::vec::Vec<
                        runtime_types::polkadot_primitives::v2::ValidityAttestation,
                    >,
                    pub validator_indices: ::subxt::utils::bits::DecodedBits<
                        ::core::primitive::u8,
                        ::subxt::utils::bits::Lsb0,
                    >,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidateCommitments<_0> {
                    pub upward_messages:
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::std::vec::Vec<::core::primitive::u8>,
                        >,
                    pub horizontal_messages:
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
                                runtime_types::polkadot_parachain::primitives::Id,
                            >,
                        >,
                    pub new_validation_code: ::core::option::Option<
                        runtime_types::polkadot_parachain::primitives::ValidationCode,
                    >,
                    pub head_data: runtime_types::polkadot_parachain::primitives::HeadData,
                    pub processed_downward_messages: _0,
                    pub hrmp_watermark: _0,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidateDescriptor<_0> {
                    pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                    pub relay_parent: _0,
                    pub collator: runtime_types::polkadot_primitives::v2::collator_app::Public,
                    pub persisted_validation_data_hash: _0,
                    pub pov_hash: _0,
                    pub erasure_root: _0,
                    pub signature: runtime_types::polkadot_primitives::v2::collator_app::Signature,
                    pub para_head: _0,
                    pub validation_code_hash:
                        runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidateReceipt<_0> {
                    pub descriptor: runtime_types::polkadot_primitives::v2::CandidateDescriptor<_0>,
                    pub commitments_hash: _0,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CommittedCandidateReceipt<_0> {
                    pub descriptor: runtime_types::polkadot_primitives::v2::CandidateDescriptor<_0>,
                    pub commitments: runtime_types::polkadot_primitives::v2::CandidateCommitments<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CoreIndex(pub ::core::primitive::u32);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum CoreOccupied {
                    #[codec(index = 0)]
                    Parathread(runtime_types::polkadot_primitives::v2::ParathreadEntry),
                    #[codec(index = 1)]
                    Parachain,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisputeState<_0> {
                    pub validators_for: ::subxt::utils::bits::DecodedBits<
                        ::core::primitive::u8,
                        ::subxt::utils::bits::Lsb0,
                    >,
                    pub validators_against: ::subxt::utils::bits::DecodedBits<
                        ::core::primitive::u8,
                        ::subxt::utils::bits::Lsb0,
                    >,
                    pub start: _0,
                    pub concluded_at: ::core::option::Option<_0>,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DisputeStatement {
                    #[codec(index = 0)]
                    Valid(runtime_types::polkadot_primitives::v2::ValidDisputeStatementKind),
                    #[codec(index = 1)]
                    Invalid(runtime_types::polkadot_primitives::v2::InvalidDisputeStatementKind),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisputeStatementSet {
                    pub candidate_hash: runtime_types::polkadot_core_primitives::CandidateHash,
                    pub session: ::core::primitive::u32,
                    pub statements: ::std::vec::Vec<(
                        runtime_types::polkadot_primitives::v2::DisputeStatement,
                        runtime_types::polkadot_primitives::v2::ValidatorIndex,
                        runtime_types::polkadot_primitives::v2::validator_app::Signature,
                    )>,
                }
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GroupIndex(pub ::core::primitive::u32);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IndexedVec<_0, _1>(
                    pub ::std::vec::Vec<_1>,
                    #[codec(skip)] pub ::core::marker::PhantomData<_0>,
                );
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InherentData<_0> {
                    pub bitfields: ::std::vec::Vec<
                        runtime_types::polkadot_primitives::v2::signed::UncheckedSigned<
                            runtime_types::polkadot_primitives::v2::AvailabilityBitfield,
                            runtime_types::polkadot_primitives::v2::AvailabilityBitfield,
                        >,
                    >,
                    pub backed_candidates: ::std::vec::Vec<
                        runtime_types::polkadot_primitives::v2::BackedCandidate<
                            ::subxt::utils::H256,
                        >,
                    >,
                    pub disputes: ::std::vec::Vec<
                        runtime_types::polkadot_primitives::v2::DisputeStatementSet,
                    >,
                    pub parent_header: _0,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum InvalidDisputeStatementKind {
                    #[codec(index = 0)]
                    Explicit,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParathreadClaim(
                    pub runtime_types::polkadot_parachain::primitives::Id,
                    pub runtime_types::polkadot_primitives::v2::collator_app::Public,
                );
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParathreadEntry {
                    pub claim: runtime_types::polkadot_primitives::v2::ParathreadClaim,
                    pub retries: ::core::primitive::u32,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PvfCheckStatement {
                    pub accept: ::core::primitive::bool,
                    pub subject: runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                    pub session_index: ::core::primitive::u32,
                    pub validator_index: runtime_types::polkadot_primitives::v2::ValidatorIndex,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum PvfExecTimeoutKind {
                    #[codec(index = 0)]
                    Backing,
                    #[codec(index = 1)]
                    Approval,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum PvfPrepTimeoutKind {
                    #[codec(index = 0)]
                    Precheck,
                    #[codec(index = 1)]
                    Lenient,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScrapedOnChainVotes<_0> {
                    pub session: ::core::primitive::u32,
                    pub backing_validators_per_candidate: ::std::vec::Vec<(
                        runtime_types::polkadot_primitives::v2::CandidateReceipt<_0>,
                        ::std::vec::Vec<(
                            runtime_types::polkadot_primitives::v2::ValidatorIndex,
                            runtime_types::polkadot_primitives::v2::ValidityAttestation,
                        )>,
                    )>,
                    pub disputes: ::std::vec::Vec<
                        runtime_types::polkadot_primitives::v2::DisputeStatementSet,
                    >,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SessionInfo {
                    pub active_validator_indices:
                        ::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
                    pub random_seed: [::core::primitive::u8; 32usize],
                    pub dispute_period: ::core::primitive::u32,
                    pub validators: runtime_types::polkadot_primitives::v2::IndexedVec<
                        runtime_types::polkadot_primitives::v2::ValidatorIndex,
                        runtime_types::polkadot_primitives::v2::validator_app::Public,
                    >,
                    pub discovery_keys:
                        ::std::vec::Vec<runtime_types::sp_authority_discovery::app::Public>,
                    pub assignment_keys: ::std::vec::Vec<
                        runtime_types::polkadot_primitives::v2::assignment_app::Public,
                    >,
                    pub validator_groups: runtime_types::polkadot_primitives::v2::IndexedVec<
                        runtime_types::polkadot_primitives::v2::GroupIndex,
                        ::std::vec::Vec<runtime_types::polkadot_primitives::v2::ValidatorIndex>,
                    >,
                    pub n_cores: ::core::primitive::u32,
                    pub zeroth_delay_tranche_width: ::core::primitive::u32,
                    pub relay_vrf_modulo_samples: ::core::primitive::u32,
                    pub n_delay_tranches: ::core::primitive::u32,
                    pub no_show_slots: ::core::primitive::u32,
                    pub needed_approvals: ::core::primitive::u32,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum UpgradeGoAhead {
                    #[codec(index = 0)]
                    Abort,
                    #[codec(index = 1)]
                    GoAhead,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum UpgradeRestriction {
                    #[codec(index = 0)]
                    Present,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ValidDisputeStatementKind {
                    #[codec(index = 0)]
                    Explicit,
                    #[codec(index = 1)]
                    BackingSeconded(::subxt::utils::H256),
                    #[codec(index = 2)]
                    BackingValid(::subxt::utils::H256),
                    #[codec(index = 3)]
                    ApprovalChecking,
                }
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidatorIndex(pub ::core::primitive::u32);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ValidityAttestation {
                    #[codec(index = 1)]
                    Implicit(runtime_types::polkadot_primitives::v2::validator_app::Signature),
                    #[codec(index = 2)]
                    Explicit(runtime_types::polkadot_primitives::v2::validator_app::Signature),
                }
            }
            pub mod vstaging {
                use super::runtime_types;
                pub mod executor_params {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum ExecutorParam {
                        #[codec(index = 1)]
                        MaxMemoryPages(::core::primitive::u32),
                        #[codec(index = 2)]
                        StackLogicalMax(::core::primitive::u32),
                        #[codec(index = 3)]
                        StackNativeMax(::core::primitive::u32),
                        #[codec(index = 4)]
                        PrecheckingMaxMemory(::core::primitive::u64),
                        #[codec(index = 5)]
                        PvfPrepTimeout(
                            runtime_types::polkadot_primitives::v2::PvfPrepTimeoutKind,
                            ::core::primitive::u64,
                        ),
                        #[codec(index = 6)]
                        PvfExecTimeout(
                            runtime_types::polkadot_primitives::v2::PvfExecTimeoutKind,
                            ::core::primitive::u64,
                        ),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct ExecutorParams(
                        pub ::std::vec::Vec<
                            runtime_types::polkadot_primitives::vstaging::executor_params::ExecutorParam,
                        >,
                    );
                }
            }
        }
        pub mod polkadot_runtime_common {
            use super::runtime_types;
            pub mod assigned_slots {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Assign a permanent parachain slot and immediately create a lease for it.
                        assign_perm_parachain_slot {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 1)]
                        ///Assign a temporary parachain slot. The function tries to create a lease for it
                        ///immediately if `SlotLeasePeriodStart::Current` is specified, and if the number
                        ///of currently active temporary slots is below `MaxTemporarySlotPerLeasePeriod`.
                        assign_temp_parachain_slot {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                            lease_period_start: runtime_types::polkadot_runtime_common::assigned_slots::SlotLeasePeriodStart,
                        },
                        #[codec(index = 2)]
                        ///Unassign a permanent or temporary parachain slot
                        unassign_parachain_slot {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///The specified parachain or parathread is not registered.
                        ParaDoesntExist,
                        #[codec(index = 1)]
                        ///Not a parathread.
                        NotParathread,
                        #[codec(index = 2)]
                        ///Cannot upgrade parathread.
                        CannotUpgrade,
                        #[codec(index = 3)]
                        ///Cannot downgrade parachain.
                        CannotDowngrade,
                        #[codec(index = 4)]
                        ///Permanent or Temporary slot already assigned.
                        SlotAlreadyAssigned,
                        #[codec(index = 5)]
                        ///Permanent or Temporary slot has not been assigned.
                        SlotNotAssigned,
                        #[codec(index = 6)]
                        ///An ongoing lease already exists.
                        OngoingLeaseExists,
                        #[codec(index = 7)]
                        MaxPermanentSlotsExceeded,
                        #[codec(index = 8)]
                        MaxTemporarySlotsExceeded,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///A para was assigned a permanent parachain slot
                        PermanentSlotAssigned(runtime_types::polkadot_parachain::primitives::Id),
                        #[codec(index = 1)]
                        ///A para was assigned a temporary parachain slot
                        TemporarySlotAssigned(runtime_types::polkadot_parachain::primitives::Id),
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParachainTemporarySlot<_0, _1> {
                    pub manager: _0,
                    pub period_begin: _1,
                    pub period_count: _1,
                    pub last_lease: ::core::option::Option<_1>,
                    pub lease_count: _1,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum SlotLeasePeriodStart {
                    #[codec(index = 0)]
                    Current,
                    #[codec(index = 1)]
                    Next,
                }
            }
            pub mod auctions {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Create a new auction.
                        ///
                        ///This can only happen when there isn't already an auction in progress
                        /// and may only be called by the root origin.
                        /// Accepts the `duration` of this auction and the
                        /// `lease_period_index` of the initial lease period of the four that are
                        /// to be auctioned.
                        new_auction {
                            #[codec(compact)]
                            duration: ::core::primitive::u32,
                            #[codec(compact)]
                            lease_period_index: ::core::primitive::u32,
                        },
                        #[codec(index = 1)]
                        ///Make a new bid from an account (including a parachain account) for
                        /// deploying a new parachain.
                        ///
                        ///Multiple simultaneous bids from the same bidder are allowed only as
                        /// long as all active bids overlap each other
                        /// (i.e. are mutually exclusive). Bids cannot be redacted.
                        ///
                        /// - `sub` is the sub-bidder ID, allowing for multiple competing bids to
                        ///   be made by (and
                        ///funded by) the same account.
                        /// - `auction_index` is the index of the auction to bid on. Should just be
                        ///   the present
                        ///value of `AuctionCounter`.
                        /// - `first_slot` is the first lease period index of the range to bid on.
                        ///   This is the
                        ///absolute lease period index value, not an auction-specific offset.
                        /// - `last_slot` is the last lease period index of the range to bid on.
                        ///   This is the
                        ///absolute lease period index value, not an auction-specific offset.
                        /// - `amount` is the amount to bid to be held as deposit for the parachain
                        ///   should the
                        ///bid win. This amount is held throughout the range.
                        bid {
                            #[codec(compact)]
                            para: runtime_types::polkadot_parachain::primitives::Id,
                            #[codec(compact)]
                            auction_index: ::core::primitive::u32,
                            #[codec(compact)]
                            first_slot: ::core::primitive::u32,
                            #[codec(compact)]
                            last_slot: ::core::primitive::u32,
                            #[codec(compact)]
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 2)]
                        ///Cancel an in-progress auction.
                        ///
                        ///Can only be called by Root origin.
                        cancel_auction,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///This auction is already in progress.
                        AuctionInProgress,
                        #[codec(index = 1)]
                        ///The lease period is in the past.
                        LeasePeriodInPast,
                        #[codec(index = 2)]
                        ///Para is not registered
                        ParaNotRegistered,
                        #[codec(index = 3)]
                        ///Not a current auction.
                        NotCurrentAuction,
                        #[codec(index = 4)]
                        ///Not an auction.
                        NotAuction,
                        #[codec(index = 5)]
                        ///Auction has already ended.
                        AuctionEnded,
                        #[codec(index = 6)]
                        ///The para is already leased out for part of this range.
                        AlreadyLeasedOut,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///An auction started. Provides its index and the block number where it
                        /// will begin to close and the first lease period
                        /// of the quadruplet that is auctioned.
                        AuctionStarted {
                            auction_index: ::core::primitive::u32,
                            lease_period: ::core::primitive::u32,
                            ending: ::core::primitive::u32,
                        },
                        #[codec(index = 1)]
                        ///An auction ended. All funds become unreserved.
                        AuctionClosed { auction_index: ::core::primitive::u32 },
                        #[codec(index = 2)]
                        ///Funds were reserved for a winning bid. First balance is the extra
                        /// amount reserved. Second is the total.
                        Reserved {
                            bidder: ::subxt::utils::AccountId32,
                            extra_reserved: ::core::primitive::u128,
                            total_amount: ::core::primitive::u128,
                        },
                        #[codec(index = 3)]
                        ///Funds were unreserved since bidder is no longer active. `[bidder,
                        /// amount]`
                        Unreserved {
                            bidder: ::subxt::utils::AccountId32,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 4)]
                        ///Someone attempted to lease the same slot twice for a parachain. The
                        /// amount is held in reserve but no parachain slot
                        /// has been leased.
                        ReserveConfiscated {
                            para_id: runtime_types::polkadot_parachain::primitives::Id,
                            leaser: ::subxt::utils::AccountId32,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 5)]
                        ///A new bid has been accepted as the current winner.
                        BidAccepted {
                            bidder: ::subxt::utils::AccountId32,
                            para_id: runtime_types::polkadot_parachain::primitives::Id,
                            amount: ::core::primitive::u128,
                            first_slot: ::core::primitive::u32,
                            last_slot: ::core::primitive::u32,
                        },
                        #[codec(index = 6)]
                        ///The winning offset was chosen for an auction. This will map into the
                        /// `Winning` storage map.
                        WinningOffset {
                            auction_index: ::core::primitive::u32,
                            block_number: ::core::primitive::u32,
                        },
                    }
                }
            }
            pub mod claims {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Make a claim to collect your DOTs.
                        ///
                        ///The dispatch origin for this call must be _None_.
                        ///
                        ///Unsigned Validation:
                        ///A call to claim is deemed valid if the signature provided matches
                        ///the expected signed message of:
                        ///
                        /// > Ethereum Signed Message:
                        /// > (configured prefix string)(address)
                        ///
                        ///and `address` matches the `dest` account.
                        ///
                        ///Parameters:
                        /// - `dest`: The destination account to payout the claim.
                        /// - `ethereum_signature`: The signature of an ethereum signed message
                        ///   matching the format described above.
                        ///
                        ///<weight>
                        ///The weight of this call is invariant over the input parameters.
                        ///Weight includes logic to validate unsigned `claim` call.
                        ///
                        ///Total Complexity: O(1)
                        ///</weight>
                        claim {
                            dest: ::subxt::utils::AccountId32,
                            ethereum_signature:
                                runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
                        },
                        #[codec(index = 1)]
                        ///Mint a new claim to collect DOTs.
                        ///
                        ///The dispatch origin for this call must be _Root_.
                        ///
                        ///Parameters:
                        /// - `who`: The Ethereum address allowed to collect this claim.
                        /// - `value`: The number of DOTs that will be claimed.
                        /// - `vesting_schedule`: An optional vesting schedule for these DOTs.
                        ///
                        ///<weight>
                        ///The weight of this call is invariant over the input parameters.
                        ///We assume worst case that both vesting and statement is being inserted.
                        ///
                        ///Total Complexity: O(1)
                        ///</weight>
                        mint_claim {
                            who: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                            value: ::core::primitive::u128,
                            vesting_schedule: ::core::option::Option<(
                                ::core::primitive::u128,
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                            )>,
                            statement: ::core::option::Option<
                                runtime_types::polkadot_runtime_common::claims::StatementKind,
                            >,
                        },
                        #[codec(index = 2)]
                        ///Make a claim to collect your DOTs by signing a statement.
                        ///
                        ///The dispatch origin for this call must be _None_.
                        ///
                        ///Unsigned Validation:
                        ///A call to `claim_attest` is deemed valid if the signature provided
                        /// matches the expected signed message of:
                        ///
                        /// > Ethereum Signed Message:
                        /// > (configured prefix string)(address)(statement)
                        ///
                        ///and `address` matches the `dest` account; the `statement` must match
                        /// that which is expected according to your
                        /// purchase arrangement.
                        ///
                        ///Parameters:
                        /// - `dest`: The destination account to payout the claim.
                        /// - `ethereum_signature`: The signature of an ethereum signed message
                        ///   matching the format described above.
                        /// - `statement`: The identity of the statement which is being attested to
                        ///   in the signature.
                        ///
                        ///<weight>
                        ///The weight of this call is invariant over the input parameters.
                        ///Weight includes logic to validate unsigned `claim_attest` call.
                        ///
                        ///Total Complexity: O(1)
                        ///</weight>
                        claim_attest {
                            dest: ::subxt::utils::AccountId32,
                            ethereum_signature:
                                runtime_types::polkadot_runtime_common::claims::EcdsaSignature,
                            statement: ::std::vec::Vec<::core::primitive::u8>,
                        },
                        #[codec(index = 3)]
                        ///Attest to a statement, needed to finalize the claims process.
                        ///
                        ///WARNING: Insecure unless your chain includes `PrevalidateAttests` as a
                        /// `SignedExtension`.
                        ///
                        ///Unsigned Validation:
                        ///A call to attest is deemed valid if the sender has a `Preclaim`
                        /// registered and provides a `statement` which is
                        /// expected for the account.
                        ///
                        ///Parameters:
                        /// - `statement`: The identity of the statement which is being attested to
                        ///   in the signature.
                        ///
                        ///<weight>
                        ///The weight of this call is invariant over the input parameters.
                        ///Weight includes logic to do pre-validation on `attest` call.
                        ///
                        ///Total Complexity: O(1)
                        ///</weight>
                        attest { statement: ::std::vec::Vec<::core::primitive::u8> },
                        #[codec(index = 4)]
                        move_claim {
                            old: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                            new: runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                            maybe_preclaim: ::core::option::Option<::subxt::utils::AccountId32>,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///Invalid Ethereum signature.
                        InvalidEthereumSignature,
                        #[codec(index = 1)]
                        ///Ethereum address has no claim.
                        SignerHasNoClaim,
                        #[codec(index = 2)]
                        ///Account ID sending transaction has no claim.
                        SenderHasNoClaim,
                        #[codec(index = 3)]
                        ///There's not enough in the pot to pay out some unvested amount.
                        /// Generally implies a logic error.
                        PotUnderflow,
                        #[codec(index = 4)]
                        ///A needed statement was not included.
                        InvalidStatement,
                        #[codec(index = 5)]
                        ///The account already has a vested balance.
                        VestedBalanceExists,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///Someone claimed some DOTs.
                        Claimed {
                            who: ::subxt::utils::AccountId32,
                            ethereum_address:
                                runtime_types::polkadot_runtime_common::claims::EthereumAddress,
                            amount: ::core::primitive::u128,
                        },
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EcdsaSignature(pub [::core::primitive::u8; 65usize]);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EthereumAddress(pub [::core::primitive::u8; 20usize]);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum StatementKind {
                    #[codec(index = 0)]
                    Regular,
                    #[codec(index = 1)]
                    Saft,
                }
            }
            pub mod crowdloan {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Create a new crowdloaning campaign for a parachain slot with the given
                        /// lease period range.
                        ///
                        ///This applies a lock to your parachain configuration, ensuring that it
                        /// cannot be changed by the parachain manager.
                        create {
                            #[codec(compact)]
                            index: runtime_types::polkadot_parachain::primitives::Id,
                            #[codec(compact)]
                            cap: ::core::primitive::u128,
                            #[codec(compact)]
                            first_period: ::core::primitive::u32,
                            #[codec(compact)]
                            last_period: ::core::primitive::u32,
                            #[codec(compact)]
                            end: ::core::primitive::u32,
                            verifier:
                                ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
                        },
                        #[codec(index = 1)]
                        ///Contribute to a crowd sale. This will transfer some balance over to
                        /// fund a parachain slot. It will be withdrawable
                        /// when the crowdloan has ended and the funds are unused.
                        contribute {
                            #[codec(compact)]
                            index: runtime_types::polkadot_parachain::primitives::Id,
                            #[codec(compact)]
                            value: ::core::primitive::u128,
                            signature:
                                ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
                        },
                        #[codec(index = 2)]
                        ///Withdraw full balance of a specific contributor.
                        ///
                        ///Origin must be signed, but can come from anyone.
                        ///
                        ///The fund must be either in, or ready for, retirement. For a fund to be
                        /// *in* retirement, then the retirement
                        /// flag must be set. For a fund to be ready for retirement, then:
                        /// - it must not already be in retirement;
                        /// - the amount of raised funds must be bigger than the _free_ balance of
                        ///   the account;
                        /// - and either:
                        ///  - the block number must be at least `end`; or
                        ///  - the current lease period must be greater than the fund's
                        ///    `last_period`.
                        ///
                        ///In this case, the fund's retirement flag is set and its `end` is reset
                        /// to the current block number.
                        ///
                        /// - `who`: The account whose contribution should be withdrawn.
                        /// - `index`: The parachain to whose crowdloan the contribution was made.
                        withdraw {
                            who: ::subxt::utils::AccountId32,
                            #[codec(compact)]
                            index: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 3)]
                        ///Automatically refund contributors of an ended crowdloan.
                        ///Due to weight restrictions, this function may need to be called
                        /// multiple times to fully refund all users. We
                        /// will refund `RemoveKeysLimit` users at a time.
                        ///
                        ///Origin must be signed, but can come from anyone.
                        refund {
                            #[codec(compact)]
                            index: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 4)]
                        ///Remove a fund after the retirement period has ended and all funds have
                        /// been returned.
                        dissolve {
                            #[codec(compact)]
                            index: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 5)]
                        ///Edit the configuration for an in-progress crowdloan.
                        ///
                        ///Can only be called by Root origin.
                        edit {
                            #[codec(compact)]
                            index: runtime_types::polkadot_parachain::primitives::Id,
                            #[codec(compact)]
                            cap: ::core::primitive::u128,
                            #[codec(compact)]
                            first_period: ::core::primitive::u32,
                            #[codec(compact)]
                            last_period: ::core::primitive::u32,
                            #[codec(compact)]
                            end: ::core::primitive::u32,
                            verifier:
                                ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
                        },
                        #[codec(index = 6)]
                        ///Add an optional memo to an existing crowdloan contribution.
                        ///
                        ///Origin must be Signed, and the user must have contributed to the
                        /// crowdloan.
                        add_memo {
                            index: runtime_types::polkadot_parachain::primitives::Id,
                            memo: ::std::vec::Vec<::core::primitive::u8>,
                        },
                        #[codec(index = 7)]
                        ///Poke the fund into `NewRaise`
                        ///
                        ///Origin must be Signed, and the fund has non-zero raise.
                        poke { index: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 8)]
                        ///Contribute your entire balance to a crowd sale. This will transfer the
                        /// entire balance of a user over to fund a parachain
                        /// slot. It will be withdrawable when the crowdloan has ended and the
                        /// funds are unused.
                        contribute_all {
                            #[codec(compact)]
                            index: runtime_types::polkadot_parachain::primitives::Id,
                            signature:
                                ::core::option::Option<runtime_types::sp_runtime::MultiSignature>,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///The current lease period is more than the first lease period.
                        FirstPeriodInPast,
                        #[codec(index = 1)]
                        ///The first lease period needs to at least be less than 3 `max_value`.
                        FirstPeriodTooFarInFuture,
                        #[codec(index = 2)]
                        ///Last lease period must be greater than first lease period.
                        LastPeriodBeforeFirstPeriod,
                        #[codec(index = 3)]
                        ///The last lease period cannot be more than 3 periods after the first
                        /// period.
                        LastPeriodTooFarInFuture,
                        #[codec(index = 4)]
                        ///The campaign ends before the current block number. The end must be in
                        /// the future.
                        CannotEndInPast,
                        #[codec(index = 5)]
                        ///The end date for this crowdloan is not sensible.
                        EndTooFarInFuture,
                        #[codec(index = 6)]
                        ///There was an overflow.
                        Overflow,
                        #[codec(index = 7)]
                        ///The contribution was below the minimum, `MinContribution`.
                        ContributionTooSmall,
                        #[codec(index = 8)]
                        ///Invalid fund index.
                        InvalidParaId,
                        #[codec(index = 9)]
                        ///Contributions exceed maximum amount.
                        CapExceeded,
                        #[codec(index = 10)]
                        ///The contribution period has already ended.
                        ContributionPeriodOver,
                        #[codec(index = 11)]
                        ///The origin of this call is invalid.
                        InvalidOrigin,
                        #[codec(index = 12)]
                        ///This crowdloan does not correspond to a parachain.
                        NotParachain,
                        #[codec(index = 13)]
                        ///This parachain lease is still active and retirement cannot yet begin.
                        LeaseActive,
                        #[codec(index = 14)]
                        ///This parachain's bid or lease is still active and withdraw cannot yet
                        /// begin.
                        BidOrLeaseActive,
                        #[codec(index = 15)]
                        ///The crowdloan has not yet ended.
                        FundNotEnded,
                        #[codec(index = 16)]
                        ///There are no contributions stored in this crowdloan.
                        NoContributions,
                        #[codec(index = 17)]
                        ///The crowdloan is not ready to dissolve. Potentially still has a slot or
                        /// in retirement period.
                        NotReadyToDissolve,
                        #[codec(index = 18)]
                        ///Invalid signature.
                        InvalidSignature,
                        #[codec(index = 19)]
                        ///The provided memo is too large.
                        MemoTooLarge,
                        #[codec(index = 20)]
                        ///The fund is already in `NewRaise`
                        AlreadyInNewRaise,
                        #[codec(index = 21)]
                        ///No contributions allowed during the VRF delay
                        VrfDelayInProgress,
                        #[codec(index = 22)]
                        ///A lease period has not started yet, due to an offset in the starting
                        /// block.
                        NoLeasePeriod,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///Create a new crowdloaning campaign.
                        Created { para_id: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 1)]
                        ///Contributed to a crowd sale.
                        Contributed {
                            who: ::subxt::utils::AccountId32,
                            fund_index: runtime_types::polkadot_parachain::primitives::Id,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 2)]
                        ///Withdrew full balance of a contributor.
                        Withdrew {
                            who: ::subxt::utils::AccountId32,
                            fund_index: runtime_types::polkadot_parachain::primitives::Id,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 3)]
                        ///The loans in a fund have been partially dissolved, i.e. there are some
                        /// left over child keys that still need to be
                        /// killed.
                        PartiallyRefunded {
                            para_id: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 4)]
                        ///All loans in a fund have been refunded.
                        AllRefunded { para_id: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 5)]
                        ///Fund is dissolved.
                        Dissolved { para_id: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 6)]
                        ///The result of trying to submit a new bid to the Slots pallet.
                        HandleBidResult {
                            para_id: runtime_types::polkadot_parachain::primitives::Id,
                            result: ::core::result::Result<
                                (),
                                runtime_types::sp_runtime::DispatchError,
                            >,
                        },
                        #[codec(index = 7)]
                        ///The configuration to a crowdloan has been edited.
                        Edited { para_id: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 8)]
                        ///A memo has been updated.
                        MemoUpdated {
                            who: ::subxt::utils::AccountId32,
                            para_id: runtime_types::polkadot_parachain::primitives::Id,
                            memo: ::std::vec::Vec<::core::primitive::u8>,
                        },
                        #[codec(index = 9)]
                        ///A parachain has been moved to `NewRaise`
                        AddedToNewRaise {
                            para_id: runtime_types::polkadot_parachain::primitives::Id,
                        },
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FundInfo<_0, _1, _2, _3> {
                    pub depositor: _0,
                    pub verifier: ::core::option::Option<runtime_types::sp_runtime::MultiSigner>,
                    pub deposit: _1,
                    pub raised: _1,
                    pub end: _2,
                    pub cap: _1,
                    pub last_contribution:
                        runtime_types::polkadot_runtime_common::crowdloan::LastContribution<_2>,
                    pub first_period: _2,
                    pub last_period: _2,
                    pub fund_index: _2,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum LastContribution<_0> {
                    #[codec(index = 0)]
                    Never,
                    #[codec(index = 1)]
                    PreEnding(_0),
                    #[codec(index = 2)]
                    Ending(_0),
                }
            }
            pub mod paras_registrar {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Register head data and validation code for a reserved Para Id.
                        ///
                        ///## Arguments
                        /// - `origin`: Must be called by a `Signed` origin.
                        /// - `id`: The para ID. Must be owned/managed by the `origin` signing
                        ///   account.
                        /// - `genesis_head`: The genesis head data of the parachain/thread.
                        /// - `validation_code`: The initial validation code of the
                        ///   parachain/thread.
                        ///
                        ///## Deposits/Fees
                        ///The origin signed account must reserve a corresponding deposit for the
                        /// registration. Anything already
                        /// reserved previously for this para ID is accounted for.
                        ///
                        ///## Events
                        ///The `Registered` event is emitted in case of success.
                        register {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                            genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
                            validation_code:
                                runtime_types::polkadot_parachain::primitives::ValidationCode,
                        },
                        #[codec(index = 1)]
                        ///Force the registration of a Para Id on the relay chain.
                        ///
                        ///This function must be called by a Root origin.
                        ///
                        ///The deposit taken can be specified for this registration. Any `ParaId`
                        ///can be registered, including sub-1000 IDs which are System Parachains.
                        force_register {
                            who: ::subxt::utils::AccountId32,
                            deposit: ::core::primitive::u128,
                            id: runtime_types::polkadot_parachain::primitives::Id,
                            genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
                            validation_code:
                                runtime_types::polkadot_parachain::primitives::ValidationCode,
                        },
                        #[codec(index = 2)]
                        ///Deregister a Para Id, freeing all data and returning any deposit.
                        ///
                        ///The caller must be Root, the `para` owner, or the `para` itself. The
                        /// para must be a parathread.
                        deregister { id: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 3)]
                        ///Swap a parachain with another parachain or parathread.
                        ///
                        ///The origin must be Root, the `para` owner, or the `para` itself.
                        ///
                        ///The swap will happen only if there is already an opposite swap pending.
                        /// If there is not, the swap will be stored in the
                        /// pending swaps map, ready for a later confirmatory swap.
                        ///
                        ///The `ParaId`s remain mapped to the same head data and code so external
                        /// code can rely on `ParaId` to be a long-term
                        /// identifier of a notional "parachain". However, their
                        /// scheduling info (i.e. whether they're a parathread or parachain),
                        /// auction information and the auction deposit are
                        /// switched.
                        swap {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                            other: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 4)]
                        ///Remove a manager lock from a para. This will allow the manager of a
                        ///previously locked para to deregister or swap a para without using
                        /// governance.
                        ///
                        ///Can only be called by the Root origin or the parachain.
                        remove_lock { para: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 5)]
                        ///Reserve a Para Id on the relay chain.
                        ///
                        ///This function will reserve a new Para Id to be owned/managed by the
                        /// origin account. The origin account is able to
                        /// register head data and validation code using `register` to create
                        /// a parathread. Using the Slots pallet, a parathread can then be upgraded
                        /// to get a parachain slot.
                        ///
                        ///## Arguments
                        /// - `origin`: Must be called by a `Signed` origin. Becomes the
                        ///   manager/owner of the new para ID.
                        ///
                        ///## Deposits/Fees
                        ///The origin must reserve a deposit of `ParaDeposit` for the
                        /// registration.
                        ///
                        ///## Events
                        ///The `Reserved` event is emitted in case of success, which provides the
                        /// ID reserved for use.
                        reserve,
                        #[codec(index = 6)]
                        ///Add a manager lock from a para. This will prevent the manager of a
                        ///para to deregister or swap a para.
                        ///
                        ///Can be called by Root, the parachain, or the parachain manager if the
                        /// parachain is unlocked.
                        add_lock { para: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 7)]
                        ///Schedule a parachain upgrade.
                        ///
                        ///Can be called by Root, the parachain, or the parachain manager if the
                        /// parachain is unlocked.
                        schedule_code_upgrade {
                            para: runtime_types::polkadot_parachain::primitives::Id,
                            new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                        },
                        #[codec(index = 8)]
                        ///Set the parachain's current head.
                        ///
                        ///Can be called by Root, the parachain, or the parachain manager if the
                        /// parachain is unlocked.
                        set_current_head {
                            para: runtime_types::polkadot_parachain::primitives::Id,
                            new_head: runtime_types::polkadot_parachain::primitives::HeadData,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///The ID is not registered.
                        NotRegistered,
                        #[codec(index = 1)]
                        ///The ID is already registered.
                        AlreadyRegistered,
                        #[codec(index = 2)]
                        ///The caller is not the owner of this Id.
                        NotOwner,
                        #[codec(index = 3)]
                        ///Invalid para code size.
                        CodeTooLarge,
                        #[codec(index = 4)]
                        ///Invalid para head data size.
                        HeadDataTooLarge,
                        #[codec(index = 5)]
                        ///Para is not a Parachain.
                        NotParachain,
                        #[codec(index = 6)]
                        ///Para is not a Parathread.
                        NotParathread,
                        #[codec(index = 7)]
                        ///Cannot deregister para
                        CannotDeregister,
                        #[codec(index = 8)]
                        ///Cannot schedule downgrade of parachain to parathread
                        CannotDowngrade,
                        #[codec(index = 9)]
                        ///Cannot schedule upgrade of parathread to parachain
                        CannotUpgrade,
                        #[codec(index = 10)]
                        ///Para is locked from manipulation by the manager. Must use parachain or
                        /// relay chain governance.
                        ParaLocked,
                        #[codec(index = 11)]
                        ///The ID given for registration has not been reserved.
                        NotReserved,
                        #[codec(index = 12)]
                        ///Registering parachain with empty code is not allowed.
                        EmptyCode,
                        #[codec(index = 13)]
                        ///Cannot perform a parachain slot / lifecycle swap. Check that the state
                        /// of both paras are correct for the swap to work.
                        CannotSwap,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        Registered {
                            para_id: runtime_types::polkadot_parachain::primitives::Id,
                            manager: ::subxt::utils::AccountId32,
                        },
                        #[codec(index = 1)]
                        Deregistered { para_id: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 2)]
                        Reserved {
                            para_id: runtime_types::polkadot_parachain::primitives::Id,
                            who: ::subxt::utils::AccountId32,
                        },
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParaInfo<_0, _1> {
                    pub manager: _0,
                    pub deposit: _1,
                    pub locked: ::core::primitive::bool,
                }
            }
            pub mod paras_sudo_wrapper {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Schedule a para to be initialized at the start of the next session.
                        sudo_schedule_para_initialize {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                            genesis:
                                runtime_types::polkadot_runtime_parachains::paras::ParaGenesisArgs,
                        },
                        #[codec(index = 1)]
                        ///Schedule a para to be cleaned up at the start of the next session.
                        sudo_schedule_para_cleanup {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 2)]
                        ///Upgrade a parathread to a parachain
                        sudo_schedule_parathread_upgrade {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 3)]
                        ///Downgrade a parachain to a parathread
                        sudo_schedule_parachain_downgrade {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 4)]
                        ///Send a downward XCM to the given para.
                        ///
                        ///The given parachain should exist and the payload should not exceed the
                        /// preconfigured size
                        /// `config.max_downward_message_size`.
                        sudo_queue_downward_xcm {
                            id: runtime_types::polkadot_parachain::primitives::Id,
                            xcm: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                        },
                        #[codec(index = 5)]
                        ///Forcefully establish a channel from the sender to the recipient.
                        ///
                        ///This is equivalent to sending an `Hrmp::hrmp_init_open_channel`
                        /// extrinsic followed by
                        /// `Hrmp::hrmp_accept_open_channel`.
                        sudo_establish_hrmp_channel {
                            sender: runtime_types::polkadot_parachain::primitives::Id,
                            recipient: runtime_types::polkadot_parachain::primitives::Id,
                            max_capacity: ::core::primitive::u32,
                            max_message_size: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///The specified parachain or parathread is not registered.
                        ParaDoesntExist,
                        #[codec(index = 1)]
                        ///The specified parachain or parathread is already registered.
                        ParaAlreadyExists,
                        #[codec(index = 2)]
                        ///A DMP message couldn't be sent because it exceeds the maximum size
                        /// allowed for a downward message.
                        ExceedsMaxMessageSize,
                        #[codec(index = 3)]
                        ///Could not schedule para cleanup.
                        CouldntCleanup,
                        #[codec(index = 4)]
                        ///Not a parathread.
                        NotParathread,
                        #[codec(index = 5)]
                        ///Not a parachain.
                        NotParachain,
                        #[codec(index = 6)]
                        ///Cannot upgrade parathread.
                        CannotUpgrade,
                        #[codec(index = 7)]
                        ///Cannot downgrade parachain.
                        CannotDowngrade,
                    }
                }
            }
            pub mod slots {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Just a connect into the `lease_out` call, in case Root wants to force
                        /// some lease to happen independently of any other
                        /// on-chain mechanism to use it.
                        ///
                        ///The dispatch origin for this call must match `T::ForceOrigin`.
                        force_lease {
                            para: runtime_types::polkadot_parachain::primitives::Id,
                            leaser: ::subxt::utils::AccountId32,
                            amount: ::core::primitive::u128,
                            period_begin: ::core::primitive::u32,
                            period_count: ::core::primitive::u32,
                        },
                        #[codec(index = 1)]
                        ///Clear all leases for a Para Id, refunding any deposits back to the
                        /// original owners.
                        ///
                        ///The dispatch origin for this call must match `T::ForceOrigin`.
                        clear_all_leases { para: runtime_types::polkadot_parachain::primitives::Id },
                        #[codec(index = 2)]
                        ///Try to onboard a parachain that has a lease for the current lease
                        /// period.
                        ///
                        ///This function can be useful if there was some state issue with a para
                        /// that should have onboarded, but was unable to.
                        /// As long as they have a lease period, we can let
                        /// them onboard from here.
                        ///
                        ///Origin must be signed, but can be called by anyone.
                        trigger_onboard { para: runtime_types::polkadot_parachain::primitives::Id },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///The parachain ID is not onboarding.
                        ParaNotOnboarding,
                        #[codec(index = 1)]
                        ///There was an error with the lease.
                        LeaseError,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///A new `[lease_period]` is beginning.
                        NewLeasePeriod { lease_period: ::core::primitive::u32 },
                        #[codec(index = 1)]
                        ///A para has won the right to a continuous set of lease periods as a
                        /// parachain. First balance is any extra amount
                        /// reserved on top of the para's existing deposit.
                        /// Second balance is the total amount reserved.
                        Leased {
                            para_id: runtime_types::polkadot_parachain::primitives::Id,
                            leaser: ::subxt::utils::AccountId32,
                            period_begin: ::core::primitive::u32,
                            period_count: ::core::primitive::u32,
                            extra_reserved: ::core::primitive::u128,
                            total_amount: ::core::primitive::u128,
                        },
                    }
                }
            }
        }
        pub mod polkadot_runtime_parachains {
            use super::runtime_types;
            pub mod configuration {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Set the validation upgrade cooldown.
                        set_validation_upgrade_cooldown { new: ::core::primitive::u32 },
                        #[codec(index = 1)]
                        ///Set the validation upgrade delay.
                        set_validation_upgrade_delay { new: ::core::primitive::u32 },
                        #[codec(index = 2)]
                        ///Set the acceptance period for an included candidate.
                        set_code_retention_period { new: ::core::primitive::u32 },
                        #[codec(index = 3)]
                        ///Set the max validation code size for incoming upgrades.
                        set_max_code_size { new: ::core::primitive::u32 },
                        #[codec(index = 4)]
                        ///Set the max POV block size for incoming upgrades.
                        set_max_pov_size { new: ::core::primitive::u32 },
                        #[codec(index = 5)]
                        ///Set the max head data size for paras.
                        set_max_head_data_size { new: ::core::primitive::u32 },
                        #[codec(index = 6)]
                        ///Set the number of parathread execution cores.
                        set_parathread_cores { new: ::core::primitive::u32 },
                        #[codec(index = 7)]
                        ///Set the number of retries for a particular parathread.
                        set_parathread_retries { new: ::core::primitive::u32 },
                        #[codec(index = 8)]
                        ///Set the parachain validator-group rotation frequency
                        set_group_rotation_frequency { new: ::core::primitive::u32 },
                        #[codec(index = 9)]
                        ///Set the availability period for parachains.
                        set_chain_availability_period { new: ::core::primitive::u32 },
                        #[codec(index = 10)]
                        ///Set the availability period for parathreads.
                        set_thread_availability_period { new: ::core::primitive::u32 },
                        #[codec(index = 11)]
                        ///Set the scheduling lookahead, in expected number of blocks at peak
                        /// throughput.
                        set_scheduling_lookahead { new: ::core::primitive::u32 },
                        #[codec(index = 12)]
                        ///Set the maximum number of validators to assign to any core.
                        set_max_validators_per_core {
                            new: ::core::option::Option<::core::primitive::u32>,
                        },
                        #[codec(index = 13)]
                        ///Set the maximum number of validators to use in parachain consensus.
                        set_max_validators { new: ::core::option::Option<::core::primitive::u32> },
                        #[codec(index = 14)]
                        ///Set the dispute period, in number of sessions to keep for disputes.
                        set_dispute_period { new: ::core::primitive::u32 },
                        #[codec(index = 15)]
                        ///Set the dispute post conclusion acceptance period.
                        set_dispute_post_conclusion_acceptance_period {
                            new: ::core::primitive::u32,
                        },
                        #[codec(index = 17)]
                        ///Set the dispute conclusion by time out period.
                        set_dispute_conclusion_by_time_out_period { new: ::core::primitive::u32 },
                        #[codec(index = 18)]
                        ///Set the no show slots, in number of number of consensus slots.
                        ///Must be at least 1.
                        set_no_show_slots { new: ::core::primitive::u32 },
                        #[codec(index = 19)]
                        ///Set the total number of delay tranches.
                        set_n_delay_tranches { new: ::core::primitive::u32 },
                        #[codec(index = 20)]
                        ///Set the zeroth delay tranche width.
                        set_zeroth_delay_tranche_width { new: ::core::primitive::u32 },
                        #[codec(index = 21)]
                        ///Set the number of validators needed to approve a block.
                        set_needed_approvals { new: ::core::primitive::u32 },
                        #[codec(index = 22)]
                        ///Set the number of samples to do of the `RelayVRFModulo` approval
                        /// assignment criterion.
                        set_relay_vrf_modulo_samples { new: ::core::primitive::u32 },
                        #[codec(index = 23)]
                        ///Sets the maximum items that can present in a upward dispatch queue at
                        /// once.
                        set_max_upward_queue_count { new: ::core::primitive::u32 },
                        #[codec(index = 24)]
                        ///Sets the maximum total size of items that can present in a upward
                        /// dispatch queue at once.
                        set_max_upward_queue_size { new: ::core::primitive::u32 },
                        #[codec(index = 25)]
                        ///Set the critical downward message size.
                        set_max_downward_message_size { new: ::core::primitive::u32 },
                        #[codec(index = 26)]
                        ///Sets the soft limit for the phase of dispatching dispatchable upward
                        /// messages.
                        set_ump_service_total_weight {
                            new: runtime_types::sp_weights::weight_v2::Weight,
                        },
                        #[codec(index = 27)]
                        ///Sets the maximum size of an upward message that can be sent by a
                        /// candidate.
                        set_max_upward_message_size { new: ::core::primitive::u32 },
                        #[codec(index = 28)]
                        ///Sets the maximum number of messages that a candidate can contain.
                        set_max_upward_message_num_per_candidate { new: ::core::primitive::u32 },
                        #[codec(index = 29)]
                        ///Sets the number of sessions after which an HRMP open channel request
                        /// expires.
                        set_hrmp_open_request_ttl { new: ::core::primitive::u32 },
                        #[codec(index = 30)]
                        ///Sets the amount of funds that the sender should provide for opening an
                        /// HRMP channel.
                        set_hrmp_sender_deposit { new: ::core::primitive::u128 },
                        #[codec(index = 31)]
                        ///Sets the amount of funds that the recipient should provide for
                        /// accepting opening an HRMP channel.
                        set_hrmp_recipient_deposit { new: ::core::primitive::u128 },
                        #[codec(index = 32)]
                        ///Sets the maximum number of messages allowed in an HRMP channel at once.
                        set_hrmp_channel_max_capacity { new: ::core::primitive::u32 },
                        #[codec(index = 33)]
                        ///Sets the maximum total size of messages in bytes allowed in an HRMP
                        /// channel at once.
                        set_hrmp_channel_max_total_size { new: ::core::primitive::u32 },
                        #[codec(index = 34)]
                        ///Sets the maximum number of inbound HRMP channels a parachain is allowed
                        /// to accept.
                        set_hrmp_max_parachain_inbound_channels { new: ::core::primitive::u32 },
                        #[codec(index = 35)]
                        ///Sets the maximum number of inbound HRMP channels a parathread is
                        /// allowed to accept.
                        set_hrmp_max_parathread_inbound_channels { new: ::core::primitive::u32 },
                        #[codec(index = 36)]
                        ///Sets the maximum size of a message that could ever be put into an HRMP
                        /// channel.
                        set_hrmp_channel_max_message_size { new: ::core::primitive::u32 },
                        #[codec(index = 37)]
                        ///Sets the maximum number of outbound HRMP channels a parachain is
                        /// allowed to open.
                        set_hrmp_max_parachain_outbound_channels { new: ::core::primitive::u32 },
                        #[codec(index = 38)]
                        ///Sets the maximum number of outbound HRMP channels a parathread is
                        /// allowed to open.
                        set_hrmp_max_parathread_outbound_channels { new: ::core::primitive::u32 },
                        #[codec(index = 39)]
                        ///Sets the maximum number of outbound HRMP messages can be sent by a
                        /// candidate.
                        set_hrmp_max_message_num_per_candidate { new: ::core::primitive::u32 },
                        #[codec(index = 40)]
                        ///Sets the maximum amount of weight any individual upward message may
                        /// consume.
                        set_ump_max_individual_weight {
                            new: runtime_types::sp_weights::weight_v2::Weight,
                        },
                        #[codec(index = 41)]
                        ///Enable or disable PVF pre-checking. Consult the field documentation
                        /// prior executing.
                        set_pvf_checking_enabled { new: ::core::primitive::bool },
                        #[codec(index = 42)]
                        ///Set the number of session changes after which a PVF pre-checking voting
                        /// is rejected.
                        set_pvf_voting_ttl { new: ::core::primitive::u32 },
                        #[codec(index = 43)]
                        ///Sets the minimum delay between announcing the upgrade block for a
                        /// parachain until the upgrade taking place.
                        ///
                        ///See the field documentation for information and constraints for the new
                        /// value.
                        set_minimum_validation_upgrade_delay { new: ::core::primitive::u32 },
                        #[codec(index = 44)]
                        ///Setting this to true will disable consistency checks for the
                        /// configuration setters. Use with caution.
                        set_bypass_consistency_check { new: ::core::primitive::bool },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///The new value for a configuration parameter is invalid.
                        InvalidNewValue,
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HostConfiguration<_0> {
                    pub max_code_size: _0,
                    pub max_head_data_size: _0,
                    pub max_upward_queue_count: _0,
                    pub max_upward_queue_size: _0,
                    pub max_upward_message_size: _0,
                    pub max_upward_message_num_per_candidate: _0,
                    pub hrmp_max_message_num_per_candidate: _0,
                    pub validation_upgrade_cooldown: _0,
                    pub validation_upgrade_delay: _0,
                    pub max_pov_size: _0,
                    pub max_downward_message_size: _0,
                    pub ump_service_total_weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub hrmp_max_parachain_outbound_channels: _0,
                    pub hrmp_max_parathread_outbound_channels: _0,
                    pub hrmp_sender_deposit: ::core::primitive::u128,
                    pub hrmp_recipient_deposit: ::core::primitive::u128,
                    pub hrmp_channel_max_capacity: _0,
                    pub hrmp_channel_max_total_size: _0,
                    pub hrmp_max_parachain_inbound_channels: _0,
                    pub hrmp_max_parathread_inbound_channels: _0,
                    pub hrmp_channel_max_message_size: _0,
                    pub code_retention_period: _0,
                    pub parathread_cores: _0,
                    pub parathread_retries: _0,
                    pub group_rotation_frequency: _0,
                    pub chain_availability_period: _0,
                    pub thread_availability_period: _0,
                    pub scheduling_lookahead: _0,
                    pub max_validators_per_core: ::core::option::Option<_0>,
                    pub max_validators: ::core::option::Option<_0>,
                    pub dispute_period: _0,
                    pub dispute_post_conclusion_acceptance_period: _0,
                    pub dispute_conclusion_by_time_out_period: _0,
                    pub no_show_slots: _0,
                    pub n_delay_tranches: _0,
                    pub zeroth_delay_tranche_width: _0,
                    pub needed_approvals: _0,
                    pub relay_vrf_modulo_samples: _0,
                    pub ump_max_individual_weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub pvf_checking_enabled: ::core::primitive::bool,
                    pub pvf_voting_ttl: _0,
                    pub minimum_validation_upgrade_delay: _0,
                }
            }
            pub mod disputes {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        force_unfreeze,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///Duplicate dispute statement sets provided.
                        DuplicateDisputeStatementSets,
                        #[codec(index = 1)]
                        ///Ancient dispute statement provided.
                        AncientDisputeStatement,
                        #[codec(index = 2)]
                        ///Validator index on statement is out of bounds for session.
                        ValidatorIndexOutOfBounds,
                        #[codec(index = 3)]
                        ///Invalid signature on statement.
                        InvalidSignature,
                        #[codec(index = 4)]
                        ///Validator vote submitted more than once to dispute.
                        DuplicateStatement,
                        #[codec(index = 5)]
                        ///A dispute where there are only votes on one side.
                        SingleSidedDispute,
                        #[codec(index = 6)]
                        ///A dispute vote from a malicious backer.
                        MaliciousBacker,
                        #[codec(index = 7)]
                        ///No backing votes were provides along dispute statements.
                        MissingBackingVotes,
                        #[codec(index = 8)]
                        ///Unconfirmed dispute statement sets provided.
                        UnconfirmedDispute,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///A dispute has been initiated. \[candidate hash, dispute location\]
                        DisputeInitiated(
                            runtime_types::polkadot_core_primitives::CandidateHash,
                            runtime_types::polkadot_runtime_parachains::disputes::DisputeLocation,
                        ),
                        #[codec(index = 1)]
                        ///A dispute has concluded for or against a candidate.
                        ///`\[para id, candidate hash, dispute result\]`
                        DisputeConcluded(
                            runtime_types::polkadot_core_primitives::CandidateHash,
                            runtime_types::polkadot_runtime_parachains::disputes::DisputeResult,
                        ),
                        #[codec(index = 2)]
                        ///A dispute has timed out due to insufficient participation.
                        ///`\[para id, candidate hash\]`
                        DisputeTimedOut(runtime_types::polkadot_core_primitives::CandidateHash),
                        #[codec(index = 3)]
                        ///A dispute has concluded with supermajority against a candidate.
                        ///Block authors should no longer build on top of this head and should
                        ///instead revert the block at the given height. This should be the
                        ///number of the child of the last known valid block in the chain.
                        Revert(::core::primitive::u32),
                    }
                }
                pub mod slashing {
                    use super::runtime_types;
                    pub mod pallet {
                        use super::runtime_types;
                        #[derive(
                            ::subxt::ext::codec::Decode,
                            ::subxt::ext::codec::Encode,
                            ::subxt::ext::scale_decode::DecodeAsType,
                            ::subxt::ext::scale_encode::EncodeAsType,
                            Debug,
                        )]
                        #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                        #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                        ///Contains one variant per dispatchable that can be called by an
                        /// extrinsic.
                        pub enum Call {
                            #[codec(index = 0)]
                            report_dispute_lost_unsigned {
                                dispute_proof: ::std::boxed::Box<
                                    runtime_types::polkadot_runtime_parachains::disputes::slashing::DisputeProof,
                                >,
                                key_owner_proof: runtime_types::sp_session::MembershipProof,
                            },
                        }
                        #[derive(
                            ::subxt::ext::codec::Decode,
                            ::subxt::ext::codec::Encode,
                            ::subxt::ext::scale_decode::DecodeAsType,
                            ::subxt::ext::scale_encode::EncodeAsType,
                            Debug,
                        )]
                        #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                        #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                        /**
                        Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                        of this pallet.
                        */
                        pub enum Error {
                            #[codec(index = 0)]
                            ///The key ownership proof is invalid.
                            InvalidKeyOwnershipProof,
                            #[codec(index = 1)]
                            ///The session index is too old or invalid.
                            InvalidSessionIndex,
                            #[codec(index = 2)]
                            ///The candidate hash is invalid.
                            InvalidCandidateHash,
                            #[codec(index = 3)]
                            ///There is no pending slash for the given validator index and time
                            ///slot.
                            InvalidValidatorIndex,
                            #[codec(index = 4)]
                            ///The validator index does not match the validator id.
                            ValidatorIndexIdMismatch,
                            #[codec(index = 5)]
                            ///The given slashing report is valid but already previously reported.
                            DuplicateSlashingReport,
                        }
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct DisputeProof {
                        pub time_slot: runtime_types::polkadot_runtime_parachains::disputes::slashing::DisputesTimeSlot,
                        pub kind: runtime_types::polkadot_runtime_parachains::disputes::slashing::SlashingOffenceKind,
                        pub validator_index: runtime_types::polkadot_primitives::v2::ValidatorIndex,
                        pub validator_id: runtime_types::polkadot_primitives::v2::validator_app::Public,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct DisputesTimeSlot {
                        pub session_index: ::core::primitive::u32,
                        pub candidate_hash: runtime_types::polkadot_core_primitives::CandidateHash,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct PendingSlashes {
                        pub keys: ::subxt::utils::KeyedVec<
                            runtime_types::polkadot_primitives::v2::ValidatorIndex,
                            runtime_types::polkadot_primitives::v2::validator_app::Public,
                        >,
                        pub kind: runtime_types::polkadot_runtime_parachains::disputes::slashing::SlashingOffenceKind,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum SlashingOffenceKind {
                        #[codec(index = 0)]
                        ForInvalid,
                        #[codec(index = 1)]
                        AgainstValid,
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DisputeLocation {
                    #[codec(index = 0)]
                    Local,
                    #[codec(index = 1)]
                    Remote,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DisputeResult {
                    #[codec(index = 0)]
                    Valid,
                    #[codec(index = 1)]
                    Invalid,
                }
            }
            pub mod dmp {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {}
                }
            }
            pub mod hrmp {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Initiate opening a channel from a parachain to a given recipient with
                        /// given channel parameters.
                        ///
                        /// - `proposed_max_capacity` - specifies how many messages can be in the
                        ///   channel at once.
                        /// - `proposed_max_message_size` - specifies the maximum size of the
                        ///   messages.
                        ///
                        ///These numbers are a subject to the relay-chain configuration limits.
                        ///
                        ///The channel can be opened only after the recipient confirms it and only
                        /// on a session change.
                        hrmp_init_open_channel {
                            recipient: runtime_types::polkadot_parachain::primitives::Id,
                            proposed_max_capacity: ::core::primitive::u32,
                            proposed_max_message_size: ::core::primitive::u32,
                        },
                        #[codec(index = 1)]
                        ///Accept a pending open channel request from the given sender.
                        ///
                        ///The channel will be opened only on the next session boundary.
                        hrmp_accept_open_channel {
                            sender: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 2)]
                        ///Initiate unilateral closing of a channel. The origin must be either the
                        /// sender or the recipient in the channel being
                        /// closed.
                        ///
                        ///The closure can only happen on a session change.
                        hrmp_close_channel {
                            channel_id:
                                runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                        },
                        #[codec(index = 3)]
                        ///This extrinsic triggers the cleanup of all the HRMP storage items that
                        ///a para may have. Normally this happens once per session, but this
                        /// allows you to trigger the cleanup immediately
                        /// for a specific parachain.
                        ///
                        ///Origin must be Root.
                        ///
                        ///Number of inbound and outbound channels for `para` must be provided as
                        /// witness data of weighing.
                        force_clean_hrmp {
                            para: runtime_types::polkadot_parachain::primitives::Id,
                            inbound: ::core::primitive::u32,
                            outbound: ::core::primitive::u32,
                        },
                        #[codec(index = 4)]
                        ///Force process HRMP open channel requests.
                        ///
                        ///If there are pending HRMP open channel requests, you can use this
                        ///function process all of those requests immediately.
                        ///
                        ///Total number of opening channels must be provided as witness data of
                        /// weighing.
                        force_process_hrmp_open { channels: ::core::primitive::u32 },
                        #[codec(index = 5)]
                        ///Force process HRMP close channel requests.
                        ///
                        ///If there are pending HRMP close channel requests, you can use this
                        ///function process all of those requests immediately.
                        ///
                        ///Total number of closing channels must be provided as witness data of
                        /// weighing.
                        force_process_hrmp_close { channels: ::core::primitive::u32 },
                        #[codec(index = 6)]
                        ///This cancels a pending open channel request. It can be canceled by
                        /// either of the sender or the recipient for that
                        /// request. The origin must be either of those.
                        ///
                        ///The cancellation happens immediately. It is not possible to cancel the
                        /// request if it is already accepted.
                        ///
                        ///Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must
                        /// be provided as witness data.
                        hrmp_cancel_open_request {
                            channel_id:
                                runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                            open_requests: ::core::primitive::u32,
                        },
                        #[codec(index = 7)]
                        ///Open a channel from a `sender` to a `recipient` `ParaId` using the Root
                        /// origin. Although opened by Root, the
                        /// `max_capacity` and `max_message_size` are still subject to the Relay
                        /// Chain's configured limits.
                        ///
                        ///Expected use is when one of the `ParaId`s involved in the channel is
                        /// governed by the Relay Chain, e.g. a common good
                        /// parachain.
                        force_open_hrmp_channel {
                            sender: runtime_types::polkadot_parachain::primitives::Id,
                            recipient: runtime_types::polkadot_parachain::primitives::Id,
                            max_capacity: ::core::primitive::u32,
                            max_message_size: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///The sender tried to open a channel to themselves.
                        OpenHrmpChannelToSelf,
                        #[codec(index = 1)]
                        ///The recipient is not a valid para.
                        OpenHrmpChannelInvalidRecipient,
                        #[codec(index = 2)]
                        ///The requested capacity is zero.
                        OpenHrmpChannelZeroCapacity,
                        #[codec(index = 3)]
                        ///The requested capacity exceeds the global limit.
                        OpenHrmpChannelCapacityExceedsLimit,
                        #[codec(index = 4)]
                        ///The requested maximum message size is 0.
                        OpenHrmpChannelZeroMessageSize,
                        #[codec(index = 5)]
                        ///The open request requested the message size that exceeds the global
                        /// limit.
                        OpenHrmpChannelMessageSizeExceedsLimit,
                        #[codec(index = 6)]
                        ///The channel already exists
                        OpenHrmpChannelAlreadyExists,
                        #[codec(index = 7)]
                        ///There is already a request to open the same channel.
                        OpenHrmpChannelAlreadyRequested,
                        #[codec(index = 8)]
                        ///The sender already has the maximum number of allowed outbound channels.
                        OpenHrmpChannelLimitExceeded,
                        #[codec(index = 9)]
                        ///The channel from the sender to the origin doesn't exist.
                        AcceptHrmpChannelDoesntExist,
                        #[codec(index = 10)]
                        ///The channel is already confirmed.
                        AcceptHrmpChannelAlreadyConfirmed,
                        #[codec(index = 11)]
                        ///The recipient already has the maximum number of allowed inbound
                        /// channels.
                        AcceptHrmpChannelLimitExceeded,
                        #[codec(index = 12)]
                        ///The origin tries to close a channel where it is neither the sender nor
                        /// the recipient.
                        CloseHrmpChannelUnauthorized,
                        #[codec(index = 13)]
                        ///The channel to be closed doesn't exist.
                        CloseHrmpChannelDoesntExist,
                        #[codec(index = 14)]
                        ///The channel close request is already requested.
                        CloseHrmpChannelAlreadyUnderway,
                        #[codec(index = 15)]
                        ///Canceling is requested by neither the sender nor recipient of the open
                        /// channel request.
                        CancelHrmpOpenChannelUnauthorized,
                        #[codec(index = 16)]
                        ///The open request doesn't exist.
                        OpenHrmpChannelDoesntExist,
                        #[codec(index = 17)]
                        ///Cannot cancel an HRMP open channel request because it is already
                        /// confirmed.
                        OpenHrmpChannelAlreadyConfirmed,
                        #[codec(index = 18)]
                        ///The provided witness data is wrong.
                        WrongWitness,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///Open HRMP channel requested.
                        ///`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`
                        OpenChannelRequested(
                            runtime_types::polkadot_parachain::primitives::Id,
                            runtime_types::polkadot_parachain::primitives::Id,
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        ),
                        #[codec(index = 1)]
                        ///An HRMP channel request sent by the receiver was canceled by either
                        /// party. `[by_parachain, channel_id]`
                        OpenChannelCanceled(
                            runtime_types::polkadot_parachain::primitives::Id,
                            runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                        ),
                        #[codec(index = 2)]
                        ///Open HRMP channel accepted. `[sender, recipient]`
                        OpenChannelAccepted(
                            runtime_types::polkadot_parachain::primitives::Id,
                            runtime_types::polkadot_parachain::primitives::Id,
                        ),
                        #[codec(index = 3)]
                        ///HRMP channel closed. `[by_parachain, channel_id]`
                        ChannelClosed(
                            runtime_types::polkadot_parachain::primitives::Id,
                            runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                        ),
                        #[codec(index = 4)]
                        ///An HRMP channel was opened via Root origin.
                        ///`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`
                        HrmpChannelForceOpened(
                            runtime_types::polkadot_parachain::primitives::Id,
                            runtime_types::polkadot_parachain::primitives::Id,
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        ),
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HrmpChannel {
                    pub max_capacity: ::core::primitive::u32,
                    pub max_total_size: ::core::primitive::u32,
                    pub max_message_size: ::core::primitive::u32,
                    pub msg_count: ::core::primitive::u32,
                    pub total_size: ::core::primitive::u32,
                    pub mqc_head: ::core::option::Option<::subxt::utils::H256>,
                    pub sender_deposit: ::core::primitive::u128,
                    pub recipient_deposit: ::core::primitive::u128,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HrmpOpenChannelRequest {
                    pub confirmed: ::core::primitive::bool,
                    pub _age: ::core::primitive::u32,
                    pub sender_deposit: ::core::primitive::u128,
                    pub max_message_size: ::core::primitive::u32,
                    pub max_capacity: ::core::primitive::u32,
                    pub max_total_size: ::core::primitive::u32,
                }
            }
            pub mod inclusion {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {}
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///Validator indices are out of order or contains duplicates.
                        UnsortedOrDuplicateValidatorIndices,
                        #[codec(index = 1)]
                        ///Dispute statement sets are out of order or contain duplicates.
                        UnsortedOrDuplicateDisputeStatementSet,
                        #[codec(index = 2)]
                        ///Backed candidates are out of order (core index) or contain duplicates.
                        UnsortedOrDuplicateBackedCandidates,
                        #[codec(index = 3)]
                        ///A different relay parent was provided compared to the on-chain stored
                        /// one.
                        UnexpectedRelayParent,
                        #[codec(index = 4)]
                        ///Availability bitfield has unexpected size.
                        WrongBitfieldSize,
                        #[codec(index = 5)]
                        ///Bitfield consists of zeros only.
                        BitfieldAllZeros,
                        #[codec(index = 6)]
                        ///Multiple bitfields submitted by same validator or validators out of
                        /// order by index.
                        BitfieldDuplicateOrUnordered,
                        #[codec(index = 7)]
                        ///Validator index out of bounds.
                        ValidatorIndexOutOfBounds,
                        #[codec(index = 8)]
                        ///Invalid signature
                        InvalidBitfieldSignature,
                        #[codec(index = 9)]
                        ///Candidate submitted but para not scheduled.
                        UnscheduledCandidate,
                        #[codec(index = 10)]
                        ///Candidate scheduled despite pending candidate already existing for the
                        /// para.
                        CandidateScheduledBeforeParaFree,
                        #[codec(index = 11)]
                        ///Candidate included with the wrong collator.
                        WrongCollator,
                        #[codec(index = 12)]
                        ///Scheduled cores out of order.
                        ScheduledOutOfOrder,
                        #[codec(index = 13)]
                        ///Head data exceeds the configured maximum.
                        HeadDataTooLarge,
                        #[codec(index = 14)]
                        ///Code upgrade prematurely.
                        PrematureCodeUpgrade,
                        #[codec(index = 15)]
                        ///Output code is too large
                        NewCodeTooLarge,
                        #[codec(index = 16)]
                        ///Candidate not in parent context.
                        CandidateNotInParentContext,
                        #[codec(index = 17)]
                        ///Invalid group index in core assignment.
                        InvalidGroupIndex,
                        #[codec(index = 18)]
                        ///Insufficient (non-majority) backing.
                        InsufficientBacking,
                        #[codec(index = 19)]
                        ///Invalid (bad signature, unknown validator, etc.) backing.
                        InvalidBacking,
                        #[codec(index = 20)]
                        ///Collator did not sign PoV.
                        NotCollatorSigned,
                        #[codec(index = 21)]
                        ///The validation data hash does not match expected.
                        ValidationDataHashMismatch,
                        #[codec(index = 22)]
                        ///The downward message queue is not processed correctly.
                        IncorrectDownwardMessageHandling,
                        #[codec(index = 23)]
                        ///At least one upward message sent does not pass the acceptance criteria.
                        InvalidUpwardMessages,
                        #[codec(index = 24)]
                        ///The candidate didn't follow the rules of HRMP watermark advancement.
                        HrmpWatermarkMishandling,
                        #[codec(index = 25)]
                        ///The HRMP messages sent by the candidate is not valid.
                        InvalidOutboundHrmp,
                        #[codec(index = 26)]
                        ///The validation code hash of the candidate is not valid.
                        InvalidValidationCodeHash,
                        #[codec(index = 27)]
                        ///The `para_head` hash in the candidate descriptor doesn't match the hash
                        /// of the actual para head in the commitments.
                        ParaHeadMismatch,
                        #[codec(index = 28)]
                        ///A bitfield that references a freed core,
                        ///either intentionally or as part of a concluded
                        ///invalid dispute.
                        BitfieldReferencesFreedCore,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///A candidate was backed. `[candidate, head_data]`
                        CandidateBacked(
                            runtime_types::polkadot_primitives::v2::CandidateReceipt<
                                ::subxt::utils::H256,
                            >,
                            runtime_types::polkadot_parachain::primitives::HeadData,
                            runtime_types::polkadot_primitives::v2::CoreIndex,
                            runtime_types::polkadot_primitives::v2::GroupIndex,
                        ),
                        #[codec(index = 1)]
                        ///A candidate was included. `[candidate, head_data]`
                        CandidateIncluded(
                            runtime_types::polkadot_primitives::v2::CandidateReceipt<
                                ::subxt::utils::H256,
                            >,
                            runtime_types::polkadot_parachain::primitives::HeadData,
                            runtime_types::polkadot_primitives::v2::CoreIndex,
                            runtime_types::polkadot_primitives::v2::GroupIndex,
                        ),
                        #[codec(index = 2)]
                        ///A candidate timed out. `[candidate, head_data]`
                        CandidateTimedOut(
                            runtime_types::polkadot_primitives::v2::CandidateReceipt<
                                ::subxt::utils::H256,
                            >,
                            runtime_types::polkadot_parachain::primitives::HeadData,
                            runtime_types::polkadot_primitives::v2::CoreIndex,
                        ),
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AvailabilityBitfieldRecord<_0> {
                    pub bitfield: runtime_types::polkadot_primitives::v2::AvailabilityBitfield,
                    pub submitted_at: _0,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidatePendingAvailability<_0, _1> {
                    pub core: runtime_types::polkadot_primitives::v2::CoreIndex,
                    pub hash: runtime_types::polkadot_core_primitives::CandidateHash,
                    pub descriptor: runtime_types::polkadot_primitives::v2::CandidateDescriptor<_0>,
                    pub availability_votes: ::subxt::utils::bits::DecodedBits<
                        ::core::primitive::u8,
                        ::subxt::utils::bits::Lsb0,
                    >,
                    pub backers: ::subxt::utils::bits::DecodedBits<
                        ::core::primitive::u8,
                        ::subxt::utils::bits::Lsb0,
                    >,
                    pub relay_parent_number: _1,
                    pub backed_in_number: _1,
                    pub backing_group: runtime_types::polkadot_primitives::v2::GroupIndex,
                }
            }
            pub mod initializer {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Issue a signal to the consensus engine to forcibly act as though all
                        /// parachain blocks in all relay chain blocks up
                        /// to and including the given number in the current
                        /// chain are valid and should be finalized.
                        force_approve { up_to: ::core::primitive::u32 },
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BufferedSessionChange {
                    pub validators: ::std::vec::Vec<
                        runtime_types::polkadot_primitives::v2::validator_app::Public,
                    >,
                    pub queued: ::std::vec::Vec<
                        runtime_types::polkadot_primitives::v2::validator_app::Public,
                    >,
                    pub session_index: ::core::primitive::u32,
                }
            }
            pub mod origin {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Origin {
                        #[codec(index = 0)]
                        Parachain(runtime_types::polkadot_parachain::primitives::Id),
                    }
                }
            }
            pub mod paras {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Set the storage for the parachain validation code immediately.
                        force_set_current_code {
                            para: runtime_types::polkadot_parachain::primitives::Id,
                            new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                        },
                        #[codec(index = 1)]
                        ///Set the storage for the current parachain head data immediately.
                        force_set_current_head {
                            para: runtime_types::polkadot_parachain::primitives::Id,
                            new_head: runtime_types::polkadot_parachain::primitives::HeadData,
                        },
                        #[codec(index = 2)]
                        ///Schedule an upgrade as if it was scheduled in the given relay parent
                        /// block.
                        force_schedule_code_upgrade {
                            para: runtime_types::polkadot_parachain::primitives::Id,
                            new_code: runtime_types::polkadot_parachain::primitives::ValidationCode,
                            relay_parent_number: ::core::primitive::u32,
                        },
                        #[codec(index = 3)]
                        ///Note a new block head for para within the context of the current block.
                        force_note_new_head {
                            para: runtime_types::polkadot_parachain::primitives::Id,
                            new_head: runtime_types::polkadot_parachain::primitives::HeadData,
                        },
                        #[codec(index = 4)]
                        ///Put a parachain directly into the next session's action queue.
                        ///We can't queue it any sooner than this without going into the
                        ///initializer...
                        force_queue_action {
                            para: runtime_types::polkadot_parachain::primitives::Id,
                        },
                        #[codec(index = 5)]
                        ///Adds the validation code to the storage.
                        ///
                        ///The code will not be added if it is already present. Additionally, if
                        /// PVF pre-checking is running for that code, it
                        /// will be instantly accepted.
                        ///
                        ///Otherwise, the code will be added into the storage. Note that the code
                        /// will be added into storage with reference count
                        /// 0. This is to account the fact that there are no users
                        /// for this code yet. The caller will have to make sure that this code
                        /// eventually gets used by some parachain or
                        /// removed from the storage to avoid storage leaks. For the latter
                        /// prefer to use the `poke_unused_validation_code` dispatchable to raw
                        /// storage manipulation.
                        ///
                        ///This function is mainly meant to be used for upgrading parachains that
                        /// do not follow the go-ahead signal while the PVF
                        /// pre-checking feature is enabled.
                        add_trusted_validation_code {
                            validation_code:
                                runtime_types::polkadot_parachain::primitives::ValidationCode,
                        },
                        #[codec(index = 6)]
                        ///Remove the validation code from the storage iff the reference count is
                        /// 0.
                        ///
                        ///This is better than removing the storage directly, because it will not
                        /// remove the code that was suddenly got used by
                        /// some parachain while this dispatchable was pending
                        /// dispatching.
                        poke_unused_validation_code {
                            validation_code_hash:
                                runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                        },
                        #[codec(index = 7)]
                        ///Includes a statement for a PVF pre-checking vote. Potentially,
                        /// finalizes the vote and enacts the results if
                        /// that was the last vote before achieving the supermajority.
                        include_pvf_check_statement {
                            stmt: runtime_types::polkadot_primitives::v2::PvfCheckStatement,
                            signature:
                                runtime_types::polkadot_primitives::v2::validator_app::Signature,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///Para is not registered in our system.
                        NotRegistered,
                        #[codec(index = 1)]
                        ///Para cannot be onboarded because it is already tracked by our system.
                        CannotOnboard,
                        #[codec(index = 2)]
                        ///Para cannot be offboarded at this time.
                        CannotOffboard,
                        #[codec(index = 3)]
                        ///Para cannot be upgraded to a parachain.
                        CannotUpgrade,
                        #[codec(index = 4)]
                        ///Para cannot be downgraded to a parathread.
                        CannotDowngrade,
                        #[codec(index = 5)]
                        ///The statement for PVF pre-checking is stale.
                        PvfCheckStatementStale,
                        #[codec(index = 6)]
                        ///The statement for PVF pre-checking is for a future session.
                        PvfCheckStatementFuture,
                        #[codec(index = 7)]
                        ///Claimed validator index is out of bounds.
                        PvfCheckValidatorIndexOutOfBounds,
                        #[codec(index = 8)]
                        ///The signature for the PVF pre-checking is invalid.
                        PvfCheckInvalidSignature,
                        #[codec(index = 9)]
                        ///The given validator already has cast a vote.
                        PvfCheckDoubleVote,
                        #[codec(index = 10)]
                        ///The given PVF does not exist at the moment of process a vote.
                        PvfCheckSubjectInvalid,
                        #[codec(index = 11)]
                        ///The PVF pre-checking statement cannot be included since the PVF
                        /// pre-checking mechanism is disabled.
                        PvfCheckDisabled,
                        #[codec(index = 12)]
                        ///Parachain cannot currently schedule a code upgrade.
                        CannotUpgradeCode,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///Current code has been updated for a Para. `para_id`
                        CurrentCodeUpdated(runtime_types::polkadot_parachain::primitives::Id),
                        #[codec(index = 1)]
                        ///Current head has been updated for a Para. `para_id`
                        CurrentHeadUpdated(runtime_types::polkadot_parachain::primitives::Id),
                        #[codec(index = 2)]
                        ///A code upgrade has been scheduled for a Para. `para_id`
                        CodeUpgradeScheduled(runtime_types::polkadot_parachain::primitives::Id),
                        #[codec(index = 3)]
                        ///A new head has been noted for a Para. `para_id`
                        NewHeadNoted(runtime_types::polkadot_parachain::primitives::Id),
                        #[codec(index = 4)]
                        ///A para has been queued to execute pending actions. `para_id`
                        ActionQueued(
                            runtime_types::polkadot_parachain::primitives::Id,
                            ::core::primitive::u32,
                        ),
                        #[codec(index = 5)]
                        ///The given para either initiated or subscribed to a PVF check for the
                        /// given validation code. `code_hash` `para_id`
                        PvfCheckStarted(
                            runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                            runtime_types::polkadot_parachain::primitives::Id,
                        ),
                        #[codec(index = 6)]
                        ///The given validation code was accepted by the PVF pre-checking vote.
                        ///`code_hash` `para_id`
                        PvfCheckAccepted(
                            runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                            runtime_types::polkadot_parachain::primitives::Id,
                        ),
                        #[codec(index = 7)]
                        ///The given validation code was rejected by the PVF pre-checking vote.
                        ///`code_hash` `para_id`
                        PvfCheckRejected(
                            runtime_types::polkadot_parachain::primitives::ValidationCodeHash,
                            runtime_types::polkadot_parachain::primitives::Id,
                        ),
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParaGenesisArgs {
                    pub genesis_head: runtime_types::polkadot_parachain::primitives::HeadData,
                    pub validation_code:
                        runtime_types::polkadot_parachain::primitives::ValidationCode,
                    pub para_kind: ::core::primitive::bool,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ParaLifecycle {
                    #[codec(index = 0)]
                    Onboarding,
                    #[codec(index = 1)]
                    Parathread,
                    #[codec(index = 2)]
                    Parachain,
                    #[codec(index = 3)]
                    UpgradingParathread,
                    #[codec(index = 4)]
                    DowngradingParachain,
                    #[codec(index = 5)]
                    OffboardingParathread,
                    #[codec(index = 6)]
                    OffboardingParachain,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParaPastCodeMeta<_0> {
                    pub upgrade_times: ::std::vec::Vec<
                        runtime_types::polkadot_runtime_parachains::paras::ReplacementTimes<_0>,
                    >,
                    pub last_pruned: ::core::option::Option<_0>,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PvfCheckActiveVoteState<_0> {
                    pub votes_accept: ::subxt::utils::bits::DecodedBits<
                        ::core::primitive::u8,
                        ::subxt::utils::bits::Lsb0,
                    >,
                    pub votes_reject: ::subxt::utils::bits::DecodedBits<
                        ::core::primitive::u8,
                        ::subxt::utils::bits::Lsb0,
                    >,
                    pub age: _0,
                    pub created_at: _0,
                    pub causes: ::std::vec::Vec<
                        runtime_types::polkadot_runtime_parachains::paras::PvfCheckCause<_0>,
                    >,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum PvfCheckCause<_0> {
                    #[codec(index = 0)]
                    Onboarding(runtime_types::polkadot_parachain::primitives::Id),
                    #[codec(index = 1)]
                    Upgrade {
                        id: runtime_types::polkadot_parachain::primitives::Id,
                        relay_parent_number: _0,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReplacementTimes<_0> {
                    pub expected_at: _0,
                    pub activated_at: _0,
                }
            }
            pub mod paras_inherent {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Enter the paras inherent. This will process bitfields and backed
                        /// candidates.
                        enter {
                            data: runtime_types::polkadot_primitives::v2::InherentData<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                    runtime_types::sp_runtime::traits::BlakeTwo256,
                                >,
                            >,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///Inclusion inherent called more than once per block.
                        TooManyInclusionInherents,
                        #[codec(index = 1)]
                        ///The hash of the submitted parent header doesn't correspond to the saved
                        /// block hash of the parent.
                        InvalidParentHeader,
                        #[codec(index = 2)]
                        ///Disputed candidate that was concluded invalid.
                        CandidateConcludedInvalid,
                        #[codec(index = 3)]
                        ///The data given to the inherent will result in an overweight block.
                        InherentOverweight,
                        #[codec(index = 4)]
                        ///The ordering of dispute statements was invalid.
                        DisputeStatementsUnsortedOrDuplicates,
                        #[codec(index = 5)]
                        ///A dispute statement was invalid.
                        DisputeInvalid,
                    }
                }
            }
            pub mod scheduler {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AssignmentKind {
                    #[codec(index = 0)]
                    Parachain,
                    #[codec(index = 1)]
                    Parathread(
                        runtime_types::polkadot_primitives::v2::collator_app::Public,
                        ::core::primitive::u32,
                    ),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CoreAssignment {
                    pub core: runtime_types::polkadot_primitives::v2::CoreIndex,
                    pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                    pub kind: runtime_types::polkadot_runtime_parachains::scheduler::AssignmentKind,
                    pub group_idx: runtime_types::polkadot_primitives::v2::GroupIndex,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParathreadClaimQueue {
                    pub queue: ::std::vec::Vec<
                        runtime_types::polkadot_runtime_parachains::scheduler::QueuedParathread,
                    >,
                    pub next_core_offset: ::core::primitive::u32,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueuedParathread {
                    pub claim: runtime_types::polkadot_primitives::v2::ParathreadEntry,
                    pub core_offset: ::core::primitive::u32,
                }
            }
            pub mod shared {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {}
                }
            }
            pub mod ump {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Service a single overweight upward message.
                        ///
                        /// - `origin`: Must pass `ExecuteOverweightOrigin`.
                        /// - `index`: The index of the overweight message to service.
                        /// - `weight_limit`: The amount of weight that message execution may take.
                        ///
                        ///Errors:
                        /// - `UnknownMessageIndex`: Message of `index` is unknown.
                        /// - `WeightOverLimit`: Message execution may use greater than
                        ///   `weight_limit`.
                        ///
                        ///Events:
                        /// - `OverweightServiced`: On success.
                        service_overweight {
                            index: ::core::primitive::u64,
                            weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)
                    of this pallet.
                    */
                    pub enum Error {
                        #[codec(index = 0)]
                        ///The message index given is unknown.
                        UnknownMessageIndex,
                        #[codec(index = 1)]
                        ///The amount of weight given is possibly not enough for executing the
                        /// message.
                        WeightOverLimit,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///Upward message is invalid XCM.
                        ///\[ id \]
                        InvalidFormat([::core::primitive::u8; 32usize]),
                        #[codec(index = 1)]
                        ///Upward message is unsupported version of XCM.
                        ///\[ id \]
                        UnsupportedVersion([::core::primitive::u8; 32usize]),
                        #[codec(index = 2)]
                        ///Upward message executed with the given outcome.
                        ///\[ id, outcome \]
                        ExecutedUpward(
                            [::core::primitive::u8; 32usize],
                            runtime_types::xcm::v3::traits::Outcome,
                        ),
                        #[codec(index = 3)]
                        ///The weight limit for handling upward messages was reached.
                        ///\[ id, remaining, required \]
                        WeightExhausted(
                            [::core::primitive::u8; 32usize],
                            runtime_types::sp_weights::weight_v2::Weight,
                            runtime_types::sp_weights::weight_v2::Weight,
                        ),
                        #[codec(index = 4)]
                        ///Some upward messages have been received and will be processed.
                        ///\[ para, count, size \]
                        UpwardMessagesReceived(
                            runtime_types::polkadot_parachain::primitives::Id,
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        ),
                        #[codec(index = 5)]
                        ///The weight budget was exceeded for an individual upward message.
                        ///
                        ///This message can be later dispatched manually using
                        /// `service_overweight` dispatchable
                        /// using the assigned `overweight_index`.
                        ///
                        ///\[ para, id, overweight_index, required \]
                        OverweightEnqueued(
                            runtime_types::polkadot_parachain::primitives::Id,
                            [::core::primitive::u8; 32usize],
                            ::core::primitive::u64,
                            runtime_types::sp_weights::weight_v2::Weight,
                        ),
                        #[codec(index = 6)]
                        ///Upward message from the overweight queue was executed with the given
                        /// actual weight used.
                        ///
                        ///\[ overweight_index, used \]
                        OverweightServiced(
                            ::core::primitive::u64,
                            runtime_types::sp_weights::weight_v2::Weight,
                        ),
                    }
                }
            }
        }
        pub mod rococo_runtime {
            use super::runtime_types;
            pub mod validator_manager {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    ///Contains one variant per dispatchable that can be called by an extrinsic.
                    pub enum Call {
                        #[codec(index = 0)]
                        ///Add new validators to the set.
                        ///
                        ///The new validators will be active from current session + 2.
                        register_validators {
                            validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        },
                        #[codec(index = 1)]
                        ///Remove validators from the set.
                        ///
                        ///The removed validators will be deactivated from current session + 2.
                        deregister_validators {
                            validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    /**
                    The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted
                    by this pallet.
                    */
                    pub enum Event {
                        #[codec(index = 0)]
                        ///New validators were added to the set.
                        ValidatorsRegistered(::std::vec::Vec<::subxt::utils::AccountId32>),
                        #[codec(index = 1)]
                        ///Validators were removed from the set.
                        ValidatorsDeregistered(::std::vec::Vec<::subxt::utils::AccountId32>),
                    }
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<::subxt::utils::AccountId32>,
                ),
                #[codec(index = 14)]
                Council(runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>),
                #[codec(index = 15)]
                TechnicalCommittee(
                    runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>,
                ),
                #[codec(index = 50)]
                ParachainsOrigin(
                    runtime_types::polkadot_runtime_parachains::origin::pallet::Origin,
                ),
                #[codec(index = 99)]
                XcmPallet(runtime_types::pallet_xcm::pallet::Origin),
                #[codec(index = 5)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ProxyType {
                #[codec(index = 0)]
                Any,
                #[codec(index = 1)]
                NonTransfer,
                #[codec(index = 2)]
                Governance,
                #[codec(index = 3)]
                IdentityJudgement,
                #[codec(index = 4)]
                CancelProxy,
                #[codec(index = 5)]
                Auction,
                #[codec(index = 6)]
                Society,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Runtime;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeCall {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 1)]
                Babe(runtime_types::pallet_babe::pallet::Call),
                #[codec(index = 2)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 3)]
                Indices(runtime_types::pallet_indices::pallet::Call),
                #[codec(index = 4)]
                Balances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 8)]
                Session(runtime_types::pallet_session::pallet::Call),
                #[codec(index = 10)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Call),
                #[codec(index = 11)]
                ImOnline(runtime_types::pallet_im_online::pallet::Call),
                #[codec(index = 13)]
                Democracy(runtime_types::pallet_democracy::pallet::Call),
                #[codec(index = 14)]
                Council(runtime_types::pallet_collective::pallet::Call),
                #[codec(index = 15)]
                TechnicalCommittee(runtime_types::pallet_collective::pallet::Call),
                #[codec(index = 16)]
                PhragmenElection(runtime_types::pallet_elections_phragmen::pallet::Call),
                #[codec(index = 17)]
                TechnicalMembership(runtime_types::pallet_membership::pallet::Call),
                #[codec(index = 18)]
                Treasury(runtime_types::pallet_treasury::pallet::Call),
                #[codec(index = 19)]
                Claims(runtime_types::polkadot_runtime_common::claims::pallet::Call),
                #[codec(index = 24)]
                Utility(runtime_types::pallet_utility::pallet::Call),
                #[codec(index = 25)]
                Identity(runtime_types::pallet_identity::pallet::Call),
                #[codec(index = 26)]
                Society(runtime_types::pallet_society::pallet::Call),
                #[codec(index = 27)]
                Recovery(runtime_types::pallet_recovery::pallet::Call),
                #[codec(index = 28)]
                Vesting(runtime_types::pallet_vesting::pallet::Call),
                #[codec(index = 29)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Call),
                #[codec(index = 30)]
                Proxy(runtime_types::pallet_proxy::pallet::Call),
                #[codec(index = 31)]
                Multisig(runtime_types::pallet_multisig::pallet::Call),
                #[codec(index = 32)]
                Preimage(runtime_types::pallet_preimage::pallet::Call),
                #[codec(index = 35)]
                Bounties(runtime_types::pallet_bounties::pallet::Call),
                #[codec(index = 40)]
                ChildBounties(runtime_types::pallet_child_bounties::pallet::Call),
                #[codec(index = 36)]
                Tips(runtime_types::pallet_tips::pallet::Call),
                #[codec(index = 38)]
                Nis(runtime_types::pallet_nis::pallet::Call),
                #[codec(index = 45)]
                NisCounterpartBalances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 51)]
                Configuration(
                    runtime_types::polkadot_runtime_parachains::configuration::pallet::Call,
                ),
                #[codec(index = 52)]
                ParasShared(runtime_types::polkadot_runtime_parachains::shared::pallet::Call),
                #[codec(index = 53)]
                ParaInclusion(runtime_types::polkadot_runtime_parachains::inclusion::pallet::Call),
                #[codec(index = 54)]
                ParaInherent(
                    runtime_types::polkadot_runtime_parachains::paras_inherent::pallet::Call,
                ),
                #[codec(index = 56)]
                Paras(runtime_types::polkadot_runtime_parachains::paras::pallet::Call),
                #[codec(index = 57)]
                Initializer(runtime_types::polkadot_runtime_parachains::initializer::pallet::Call),
                #[codec(index = 58)]
                Dmp(runtime_types::polkadot_runtime_parachains::dmp::pallet::Call),
                #[codec(index = 59)]
                Ump(runtime_types::polkadot_runtime_parachains::ump::pallet::Call),
                #[codec(index = 60)]
                Hrmp(runtime_types::polkadot_runtime_parachains::hrmp::pallet::Call),
                #[codec(index = 62)]
                ParasDisputes(runtime_types::polkadot_runtime_parachains::disputes::pallet::Call),
                #[codec(index = 63)]
                ParasSlashing(
                    runtime_types::polkadot_runtime_parachains::disputes::slashing::pallet::Call,
                ),
                #[codec(index = 70)]
                Registrar(runtime_types::polkadot_runtime_common::paras_registrar::pallet::Call),
                #[codec(index = 71)]
                Slots(runtime_types::polkadot_runtime_common::slots::pallet::Call),
                #[codec(index = 72)]
                Auctions(runtime_types::polkadot_runtime_common::auctions::pallet::Call),
                #[codec(index = 73)]
                Crowdloan(runtime_types::polkadot_runtime_common::crowdloan::pallet::Call),
                #[codec(index = 99)]
                XcmPallet(runtime_types::pallet_xcm::pallet::Call),
                #[codec(index = 240)]
                Beefy(runtime_types::pallet_beefy::pallet::Call),
                #[codec(index = 250)]
                ParasSudoWrapper(
                    runtime_types::polkadot_runtime_common::paras_sudo_wrapper::pallet::Call,
                ),
                #[codec(index = 251)]
                AssignedSlots(runtime_types::polkadot_runtime_common::assigned_slots::pallet::Call),
                #[codec(index = 252)]
                ValidatorManager(runtime_types::rococo_runtime::validator_manager::pallet::Call),
                #[codec(index = 254)]
                StateTrieMigration(runtime_types::pallet_state_trie_migration::pallet::Call),
                #[codec(index = 255)]
                Sudo(runtime_types::pallet_sudo::pallet::Call),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeEvent {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 3)]
                Indices(runtime_types::pallet_indices::pallet::Event),
                #[codec(index = 4)]
                Balances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 33)]
                TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
                #[codec(index = 7)]
                Offences(runtime_types::pallet_offences::pallet::Event),
                #[codec(index = 8)]
                Session(runtime_types::pallet_session::pallet::Event),
                #[codec(index = 10)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Event),
                #[codec(index = 11)]
                ImOnline(runtime_types::pallet_im_online::pallet::Event),
                #[codec(index = 13)]
                Democracy(runtime_types::pallet_democracy::pallet::Event),
                #[codec(index = 14)]
                Council(runtime_types::pallet_collective::pallet::Event),
                #[codec(index = 15)]
                TechnicalCommittee(runtime_types::pallet_collective::pallet::Event),
                #[codec(index = 16)]
                PhragmenElection(runtime_types::pallet_elections_phragmen::pallet::Event),
                #[codec(index = 17)]
                TechnicalMembership(runtime_types::pallet_membership::pallet::Event),
                #[codec(index = 18)]
                Treasury(runtime_types::pallet_treasury::pallet::Event),
                #[codec(index = 19)]
                Claims(runtime_types::polkadot_runtime_common::claims::pallet::Event),
                #[codec(index = 24)]
                Utility(runtime_types::pallet_utility::pallet::Event),
                #[codec(index = 25)]
                Identity(runtime_types::pallet_identity::pallet::Event),
                #[codec(index = 26)]
                Society(runtime_types::pallet_society::pallet::Event),
                #[codec(index = 27)]
                Recovery(runtime_types::pallet_recovery::pallet::Event),
                #[codec(index = 28)]
                Vesting(runtime_types::pallet_vesting::pallet::Event),
                #[codec(index = 29)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Event),
                #[codec(index = 30)]
                Proxy(runtime_types::pallet_proxy::pallet::Event),
                #[codec(index = 31)]
                Multisig(runtime_types::pallet_multisig::pallet::Event),
                #[codec(index = 32)]
                Preimage(runtime_types::pallet_preimage::pallet::Event),
                #[codec(index = 35)]
                Bounties(runtime_types::pallet_bounties::pallet::Event),
                #[codec(index = 40)]
                ChildBounties(runtime_types::pallet_child_bounties::pallet::Event),
                #[codec(index = 36)]
                Tips(runtime_types::pallet_tips::pallet::Event),
                #[codec(index = 38)]
                Nis(runtime_types::pallet_nis::pallet::Event),
                #[codec(index = 45)]
                NisCounterpartBalances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 53)]
                ParaInclusion(runtime_types::polkadot_runtime_parachains::inclusion::pallet::Event),
                #[codec(index = 56)]
                Paras(runtime_types::polkadot_runtime_parachains::paras::pallet::Event),
                #[codec(index = 59)]
                Ump(runtime_types::polkadot_runtime_parachains::ump::pallet::Event),
                #[codec(index = 60)]
                Hrmp(runtime_types::polkadot_runtime_parachains::hrmp::pallet::Event),
                #[codec(index = 62)]
                ParasDisputes(runtime_types::polkadot_runtime_parachains::disputes::pallet::Event),
                #[codec(index = 70)]
                Registrar(runtime_types::polkadot_runtime_common::paras_registrar::pallet::Event),
                #[codec(index = 71)]
                Slots(runtime_types::polkadot_runtime_common::slots::pallet::Event),
                #[codec(index = 72)]
                Auctions(runtime_types::polkadot_runtime_common::auctions::pallet::Event),
                #[codec(index = 73)]
                Crowdloan(runtime_types::polkadot_runtime_common::crowdloan::pallet::Event),
                #[codec(index = 99)]
                XcmPallet(runtime_types::pallet_xcm::pallet::Event),
                #[codec(index = 251)]
                AssignedSlots(
                    runtime_types::polkadot_runtime_common::assigned_slots::pallet::Event,
                ),
                #[codec(index = 252)]
                ValidatorManager(runtime_types::rococo_runtime::validator_manager::pallet::Event),
                #[codec(index = 254)]
                StateTrieMigration(runtime_types::pallet_state_trie_migration::pallet::Event),
                #[codec(index = 255)]
                Sudo(runtime_types::pallet_sudo::pallet::Event),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SessionKeys {
                pub grandpa: runtime_types::sp_consensus_grandpa::app::Public,
                pub babe: runtime_types::sp_consensus_babe::app::Public,
                pub im_online: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                pub para_validator: runtime_types::polkadot_primitives::v2::validator_app::Public,
                pub para_assignment: runtime_types::polkadot_primitives::v2::assignment_app::Public,
                pub authority_discovery: runtime_types::sp_authority_discovery::app::Public,
                pub beefy: runtime_types::sp_consensus_beefy::crypto::Public,
            }
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FixedU128(pub ::core::primitive::u128);
            }
            pub mod per_things {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Percent(pub ::core::primitive::u8);
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Permill(pub ::core::primitive::u32);
                #[derive(
                    ::subxt::ext::codec::CompactAs,
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Perquintill(pub ::core::primitive::u64);
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
        }
        pub mod sp_authority_discovery {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::sr25519::Public);
            }
        }
        pub mod sp_consensus_babe {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::sr25519::Public);
            }
            pub mod digests {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum NextConfigDescriptor {
                    #[codec(index = 1)]
                    V1 {
                        c: (::core::primitive::u64, ::core::primitive::u64),
                        allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum PreDigest {
                    #[codec(index = 1)]
                    Primary(runtime_types::sp_consensus_babe::digests::PrimaryPreDigest),
                    #[codec(index = 2)]
                    SecondaryPlain(
                        runtime_types::sp_consensus_babe::digests::SecondaryPlainPreDigest,
                    ),
                    #[codec(index = 3)]
                    SecondaryVRF(runtime_types::sp_consensus_babe::digests::SecondaryVRFPreDigest),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PrimaryPreDigest {
                    pub authority_index: ::core::primitive::u32,
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                    pub vrf_output: [::core::primitive::u8; 32usize],
                    pub vrf_proof: [::core::primitive::u8; 64usize],
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SecondaryPlainPreDigest {
                    pub authority_index: ::core::primitive::u32,
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SecondaryVRFPreDigest {
                    pub authority_index: ::core::primitive::u32,
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                    pub vrf_output: [::core::primitive::u8; 32usize],
                    pub vrf_proof: [::core::primitive::u8; 64usize],
                }
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum AllowedSlots {
                #[codec(index = 0)]
                PrimarySlots,
                #[codec(index = 1)]
                PrimaryAndSecondaryPlainSlots,
                #[codec(index = 2)]
                PrimaryAndSecondaryVRFSlots,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BabeEpochConfiguration {
                pub c: (::core::primitive::u64, ::core::primitive::u64),
                pub allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
            }
        }
        pub mod sp_consensus_beefy {
            use super::runtime_types;
            pub mod commitment {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Commitment<_0> {
                    pub payload: runtime_types::sp_consensus_beefy::payload::Payload,
                    pub block_number: _0,
                    pub validator_set_id: ::core::primitive::u64,
                }
            }
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::ecdsa::Public);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub runtime_types::sp_core::ecdsa::Signature);
            }
            pub mod mmr {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BeefyAuthoritySet<_0> {
                    pub id: ::core::primitive::u64,
                    pub len: ::core::primitive::u32,
                    pub root: _0,
                }
            }
            pub mod payload {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Payload(
                    pub  ::std::vec::Vec<(
                        [::core::primitive::u8; 2usize],
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                );
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EquivocationProof<_0, _1, _2> {
                pub first: runtime_types::sp_consensus_beefy::VoteMessage<_0, _1, _2>,
                pub second: runtime_types::sp_consensus_beefy::VoteMessage<_0, _1, _2>,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VoteMessage<_0, _1, _2> {
                pub commitment: runtime_types::sp_consensus_beefy::commitment::Commitment<_0>,
                pub id: _1,
                pub signature: _2,
            }
        }
        pub mod sp_consensus_grandpa {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::ed25519::Public);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Equivocation<_0, _1> {
                #[codec(index = 0)]
                Prevote(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_consensus_grandpa::app::Public,
                        runtime_types::finality_grandpa::Prevote<_0, _1>,
                        runtime_types::sp_consensus_grandpa::app::Signature,
                    >,
                ),
                #[codec(index = 1)]
                Precommit(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_consensus_grandpa::app::Public,
                        runtime_types::finality_grandpa::Precommit<_0, _1>,
                        runtime_types::sp_consensus_grandpa::app::Signature,
                    >,
                ),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EquivocationProof<_0, _1> {
                pub set_id: ::core::primitive::u64,
                pub equivocation: runtime_types::sp_consensus_grandpa::Equivocation<_0, _1>,
            }
        }
        pub mod sp_consensus_slots {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EquivocationProof<_0, _1> {
                pub offender: _1,
                pub slot: runtime_types::sp_consensus_slots::Slot,
                pub first_header: _0,
                pub second_header: _0,
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Slot(pub ::core::primitive::u64);
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
            }
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 33usize]);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod offchain {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OpaqueMultiaddr(pub ::std::vec::Vec<::core::primitive::u8>);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OpaqueNetworkState {
                    pub peer_id: runtime_types::sp_core::OpaquePeerId,
                    pub external_addresses:
                        ::std::vec::Vec<runtime_types::sp_core::offchain::OpaqueMultiaddr>,
                }
            }
            pub mod sr25519 {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OpaquePeerId(pub ::std::vec::Vec<::core::primitive::u8>);
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Void {}
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod generic {
                use super::runtime_types;
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Digest {
                        pub logs:
                            ::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::std::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
                pub mod header {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Header<_0, _1> {
                        pub parent_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        pub number: _0,
                        pub state_root: ::subxt::utils::H256,
                        pub extrinsics_root: ::subxt::utils::H256,
                        pub digest: runtime_types::sp_runtime::generic::digest::Digest,
                        #[codec(skip)]
                        pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                    }
                }
                pub mod unchecked_extrinsic {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
                        pub ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(skip)] pub ::core::marker::PhantomData<(_0, _1, _2, _3)>,
                    );
                }
            }
            pub mod traits {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlakeTwo256;
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
                #[codec(index = 10)]
                Exhausted,
                #[codec(index = 11)]
                Corruption,
                #[codec(index = 12)]
                Unavailable,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum MultiSignature {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Signature),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Signature),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Signature),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum MultiSigner {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Public),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Public),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Public),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TokenError {
                #[codec(index = 0)]
                NoFunds,
                #[codec(index = 1)]
                WouldDie,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_session {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MembershipProof {
                pub session: ::core::primitive::u32,
                pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                pub validator_count: ::core::primitive::u32,
            }
        }
        pub mod sp_staking {
            use super::runtime_types;
            pub mod offence {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OffenceDetails<_0, _1> {
                    pub offender: _1,
                    pub reporters: ::std::vec::Vec<_0>,
                }
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeVersion {
                pub spec_name: ::std::string::String,
                pub impl_name: ::std::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis:
                    ::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
                pub transaction_version: ::core::primitive::u32,
                pub state_version: ::core::primitive::u8,
            }
        }
        pub mod sp_weights {
            use super::runtime_types;
            pub mod weight_v2 {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Weight {
                    #[codec(compact)]
                    pub ref_time: ::core::primitive::u64,
                    #[codec(compact)]
                    pub proof_size: ::core::primitive::u64,
                }
            }
            #[derive(
                ::subxt::ext::codec::CompactAs,
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OldWeight(pub ::core::primitive::u64);
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeDbWeight {
                pub read: ::core::primitive::u64,
                pub write: ::core::primitive::u64,
            }
        }
        pub mod xcm {
            use super::runtime_types;
            pub mod double_encoded {
                use super::runtime_types;
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DoubleEncoded {
                    pub encoded: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
            pub mod v2 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network: runtime_types::xcm::v2::NetworkId,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network: runtime_types::xcm::v2::NetworkId,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network: runtime_types::xcm::v2::NetworkId,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey(
                            runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v2::BodyId,
                            part: runtime_types::xcm::v2::BodyPart,
                        },
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::xcm::v2::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                        #[codec(index = 6)]
                        Blob(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v2::multiasset::AssetInstance),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v2::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v2::multiasset::Fungibility,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v2::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v2::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAssets(
                        pub ::std::vec::Vec<runtime_types::xcm::v2::multiasset::MultiAsset>,
                    );
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v2::multiasset::AssetId,
                            fun: runtime_types::xcm::v2::multiasset::WildFungibility,
                        },
                    }
                }
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v2::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v2::multilocation::Junctions,
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        MultiLocationFull,
                        #[codec(index = 5)]
                        MultiLocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        UnhandledXcmVersion,
                        #[codec(index = 23)]
                        WeightLimitReached(::core::primitive::u64),
                        #[codec(index = 24)]
                        Barrier,
                        #[codec(index = 25)]
                        WeightNotComputable,
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BodyId {
                    #[codec(index = 0)]
                    Unit,
                    #[codec(index = 1)]
                    Named(
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Index(#[codec(compact)] ::core::primitive::u32),
                    #[codec(index = 3)]
                    Executive,
                    #[codec(index = 4)]
                    Technical,
                    #[codec(index = 5)]
                    Legislative,
                    #[codec(index = 6)]
                    Judicial,
                    #[codec(index = 7)]
                    Defense,
                    #[codec(index = 8)]
                    Administration,
                    #[codec(index = 9)]
                    Treasury,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BodyPart {
                    #[codec(index = 0)]
                    Voice,
                    #[codec(index = 1)]
                    Members {
                        #[codec(compact)]
                        count: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    Fraction {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    AtLeastProportion {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    MoreThanProportion {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v2::Response,
                        #[codec(compact)]
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v2::OriginKind,
                        #[codec(compact)]
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
                    #[codec(index = 12)]
                    ReportError {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        receive: runtime_types::xcm::v2::multiasset::MultiAssets,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 18)]
                    QueryHolding {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v2::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum NetworkId {
                    #[codec(index = 0)]
                    Any,
                    #[codec(index = 1)]
                    Named(
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Polkadot,
                    #[codec(index = 3)]
                    Kusama,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum OriginKind {
                    #[codec(index = 0)]
                    Native,
                    #[codec(index = 1)]
                    SovereignAccount,
                    #[codec(index = 2)]
                    Superuser,
                    #[codec(index = 3)]
                    Xcm,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v2::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(#[codec(compact)] ::core::primitive::u64),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction>);
            }
            pub mod v3 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum BodyId {
                        #[codec(index = 0)]
                        Unit,
                        #[codec(index = 1)]
                        Moniker([::core::primitive::u8; 4usize]),
                        #[codec(index = 2)]
                        Index(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        Executive,
                        #[codec(index = 4)]
                        Technical,
                        #[codec(index = 5)]
                        Legislative,
                        #[codec(index = 6)]
                        Judicial,
                        #[codec(index = 7)]
                        Defense,
                        #[codec(index = 8)]
                        Administration,
                        #[codec(index = 9)]
                        Treasury,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum BodyPart {
                        #[codec(index = 0)]
                        Voice,
                        #[codec(index = 1)]
                        Members {
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                        #[codec(index = 2)]
                        Fraction {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 3)]
                        AtLeastProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 4)]
                        MoreThanProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey {
                            length: ::core::primitive::u8,
                            data: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v3::junction::BodyId,
                            part: runtime_types::xcm::v3::junction::BodyPart,
                        },
                        #[codec(index = 9)]
                        GlobalConsensus(runtime_types::xcm::v3::junction::NetworkId),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum NetworkId {
                        #[codec(index = 0)]
                        ByGenesis([::core::primitive::u8; 32usize]),
                        #[codec(index = 1)]
                        ByFork {
                            block_number: ::core::primitive::u64,
                            block_hash: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        Polkadot,
                        #[codec(index = 3)]
                        Kusama,
                        #[codec(index = 4)]
                        Westend,
                        #[codec(index = 5)]
                        Rococo,
                        #[codec(index = 6)]
                        Wococo,
                        #[codec(index = 7)]
                        Ethereum {
                            #[codec(compact)]
                            chain_id: ::core::primitive::u64,
                        },
                        #[codec(index = 8)]
                        BitcoinCore,
                        #[codec(index = 9)]
                        BitcoinCash,
                    }
                }
                pub mod junctions {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v3::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::xcm::v3::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v3::multiasset::AssetInstance),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v3::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v3::multiasset::Fungibility,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v3::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v3::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAssets(
                        pub ::std::vec::Vec<runtime_types::xcm::v3::multiasset::MultiAsset>,
                    );
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                        },
                        #[codec(index = 2)]
                        AllCounted(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        AllOfCounted {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                    }
                }
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v3::junctions::Junctions,
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        LocationFull,
                        #[codec(index = 5)]
                        LocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        ExpectationFalse,
                        #[codec(index = 23)]
                        PalletNotFound,
                        #[codec(index = 24)]
                        NameMismatch,
                        #[codec(index = 25)]
                        VersionIncompatible,
                        #[codec(index = 26)]
                        HoldingWouldOverflow,
                        #[codec(index = 27)]
                        ExportError,
                        #[codec(index = 28)]
                        ReanchorFailed,
                        #[codec(index = 29)]
                        NoDeal,
                        #[codec(index = 30)]
                        FeesNotMet,
                        #[codec(index = 31)]
                        LockError,
                        #[codec(index = 32)]
                        NoPermission,
                        #[codec(index = 33)]
                        Unanchored,
                        #[codec(index = 34)]
                        NotDepositable,
                        #[codec(index = 35)]
                        UnhandledXcmVersion,
                        #[codec(index = 36)]
                        WeightLimitReached(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 37)]
                        Barrier,
                        #[codec(index = 38)]
                        WeightNotComputable,
                        #[codec(index = 39)]
                        ExceedsStackLimit,
                    }
                    #[derive(
                        ::subxt::ext::codec::Decode,
                        ::subxt::ext::codec::Encode,
                        ::subxt::ext::scale_decode::DecodeAsType,
                        ::subxt::ext::scale_encode::EncodeAsType,
                        Debug,
                    )]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Outcome {
                        #[codec(index = 0)]
                        Complete(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 1)]
                        Incomplete(
                            runtime_types::sp_weights::weight_v2::Weight,
                            runtime_types::xcm::v3::traits::Error,
                        ),
                        #[codec(index = 2)]
                        Error(runtime_types::xcm::v3::traits::Error),
                    }
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v3::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        want: runtime_types::xcm::v3::multiasset::MultiAssets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v3::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::xcm::v3::junction::NetworkId,
                        destination: runtime_types::xcm::v3::junctions::Junctions,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        unlocker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        target: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        owner: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        locker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 43)]
                    SetFeesMode { jit_withdraw: ::core::primitive::bool },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MaybeErrorCode {
                    #[codec(index = 0)]
                    Success,
                    #[codec(index = 1)]
                    Error(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    TruncatedError(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PalletInfo {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    #[codec(compact)]
                    pub major: ::core::primitive::u32,
                    #[codec(compact)]
                    pub minor: ::core::primitive::u32,
                    #[codec(compact)]
                    pub patch: ::core::primitive::u32,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryResponseInfo {
                    pub destination: runtime_types::xcm::v3::multilocation::MultiLocation,
                    #[codec(compact)]
                    pub query_id: ::core::primitive::u64,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                    #[codec(index = 4)]
                    PalletsInfo(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::xcm::v3::PalletInfo,
                        >,
                    ),
                    #[codec(index = 5)]
                    DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(runtime_types::sp_weights::weight_v2::Weight),
                }
                #[derive(
                    ::subxt::ext::codec::Decode,
                    ::subxt::ext::codec::Encode,
                    ::subxt::ext::scale_decode::DecodeAsType,
                    ::subxt::ext::scale_encode::EncodeAsType,
                    Debug,
                )]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction>);
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedAssetId {
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::AssetId),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedMultiAssets {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multiasset::MultiAssets),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::MultiAssets),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedMultiLocation {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multilocation::MultiLocation),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multilocation::MultiLocation),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedResponse {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Response),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Response),
            }
            #[derive(
                ::subxt::ext::codec::Decode,
                ::subxt::ext::codec::Encode,
                ::subxt::ext::scale_decode::DecodeAsType,
                ::subxt::ext::scale_encode::EncodeAsType,
                Debug,
            )]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedXcm {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Xcm),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Xcm),
            }
        }
    }
}
